// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	domain "git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/internal/app/domain"
)

// MockConfigRepo is a mock of ConfigRepo interface.
type MockConfigRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepoMockRecorder
}

// MockConfigRepoMockRecorder is the mock recorder for MockConfigRepo.
type MockConfigRepoMockRecorder struct {
	mock *MockConfigRepo
}

// NewMockConfigRepo creates a new mock instance.
func NewMockConfigRepo(ctrl *gomock.Controller) *MockConfigRepo {
	mock := &MockConfigRepo{ctrl: ctrl}
	mock.recorder = &MockConfigRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepo) EXPECT() *MockConfigRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigRepo) Get() *domain.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*domain.Config)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockConfigRepoMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigRepo)(nil).Get))
}

// Load mocks base method.
func (m *MockConfigRepo) Load(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockConfigRepoMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigRepo)(nil).Load), arg0)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(arg0 context.Context, arg1 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), arg0, arg1)
}

// Exists mocks base method.
func (m *MockUserRepo) Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepoMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepo)(nil).Exists), arg0, arg1)
}

// Get mocks base method.
func (m *MockUserRepo) Get(arg0 context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), arg0)
}

// GetByEmail mocks base method.
func (m *MockUserRepo) GetByEmail(arg0 context.Context, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepoMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetByEmail), arg0, arg1)
}

// GetByUUID mocks base method.
func (m *MockUserRepo) GetByUUID(arg0 context.Context, arg1 uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockUserRepoMockRecorder) GetByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockUserRepo)(nil).GetByUUID), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserRepo) Update(arg0 context.Context, arg1 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepo)(nil).Update), arg0, arg1)
}

// MockLoggerRepo is a mock of LoggerRepo interface.
type MockLoggerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerRepoMockRecorder
}

// MockLoggerRepoMockRecorder is the mock recorder for MockLoggerRepo.
type MockLoggerRepoMockRecorder struct {
	mock *MockLoggerRepo
}

// NewMockLoggerRepo creates a new mock instance.
func NewMockLoggerRepo(ctrl *gomock.Controller) *MockLoggerRepo {
	mock := &MockLoggerRepo{ctrl: ctrl}
	mock.recorder = &MockLoggerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerRepo) EXPECT() *MockLoggerRepoMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerRepo) Debug(msg string, fields ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerRepoMockRecorder) Debug(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerRepo)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerRepo) Error(msg string, fields ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerRepoMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerRepo)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLoggerRepo) Info(msg string, fields ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerRepoMockRecorder) Info(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerRepo)(nil).Info), varargs...)
}

// Trace mocks base method.
func (m *MockLoggerRepo) Trace(msg string, fields ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerRepoMockRecorder) Trace(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLoggerRepo)(nil).Trace), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerRepo) Warn(msg string, fields ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerRepoMockRecorder) Warn(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerRepo)(nil).Warn), varargs...)
}

// MockIAuthorizationEnforcerRepo is a mock of IAuthorizationEnforcerRepo interface.
type MockIAuthorizationEnforcerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationEnforcerRepoMockRecorder
}

// MockIAuthorizationEnforcerRepoMockRecorder is the mock recorder for MockIAuthorizationEnforcerRepo.
type MockIAuthorizationEnforcerRepoMockRecorder struct {
	mock *MockIAuthorizationEnforcerRepo
}

// NewMockIAuthorizationEnforcerRepo creates a new mock instance.
func NewMockIAuthorizationEnforcerRepo(ctrl *gomock.Controller) *MockIAuthorizationEnforcerRepo {
	mock := &MockIAuthorizationEnforcerRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationEnforcerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationEnforcerRepo) EXPECT() *MockIAuthorizationEnforcerRepoMockRecorder {
	return m.recorder
}

// AddGroupDataRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) AddGroupDataRBAC(data, role string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupDataRBAC", data, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupDataRBAC indicates an expected call of AddGroupDataRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) AddGroupDataRBAC(data, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupDataRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).AddGroupDataRBAC), data, role)
}

// AddGroupRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) AddGroupRBAC(role1, role2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupRBAC", role1, role2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupRBAC indicates an expected call of AddGroupRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) AddGroupRBAC(role1, role2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).AddGroupRBAC), role1, role2)
}

// AddPolicyRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) AddPolicyRBAC(role, data, action string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyRBAC", role, data, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyRBAC indicates an expected call of AddPolicyRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) AddPolicyRBAC(role, data, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).AddPolicyRBAC), role, data, action)
}

// AddPolicyRolePathMethod mocks base method.
func (m *MockIAuthorizationEnforcerRepo) AddPolicyRolePathMethod(role, path, method string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyRolePathMethod", role, path, method)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyRolePathMethod indicates an expected call of AddPolicyRolePathMethod.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) AddPolicyRolePathMethod(role, path, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyRolePathMethod", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).AddPolicyRolePathMethod), role, path, method)
}

// EnforceRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) EnforceRBAC(user, data, action string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceRBAC", user, data, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnforceRBAC indicates an expected call of EnforceRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) EnforceRBAC(user, data, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).EnforceRBAC), user, data, action)
}

// EnforceRolePathMethod mocks base method.
func (m *MockIAuthorizationEnforcerRepo) EnforceRolePathMethod(role, path, method string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceRolePathMethod", role, path, method)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnforceRolePathMethod indicates an expected call of EnforceRolePathMethod.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) EnforceRolePathMethod(role, path, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceRolePathMethod", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).EnforceRolePathMethod), role, path, method)
}

// RemoveGroupDataRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) RemoveGroupDataRBAC(data, role string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupDataRBAC", data, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupDataRBAC indicates an expected call of RemoveGroupDataRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) RemoveGroupDataRBAC(data, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupDataRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).RemoveGroupDataRBAC), data, role)
}

// RemoveGroupRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) RemoveGroupRBAC(role1, role2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupRBAC", role1, role2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupRBAC indicates an expected call of RemoveGroupRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) RemoveGroupRBAC(role1, role2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).RemoveGroupRBAC), role1, role2)
}

// RemovePolicyRBAC mocks base method.
func (m *MockIAuthorizationEnforcerRepo) RemovePolicyRBAC(role, data, action string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicyRBAC", role, data, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicyRBAC indicates an expected call of RemovePolicyRBAC.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) RemovePolicyRBAC(role, data, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicyRBAC", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).RemovePolicyRBAC), role, data, action)
}

// RemovePolicyRolePathMethod mocks base method.
func (m *MockIAuthorizationEnforcerRepo) RemovePolicyRolePathMethod(role, path, method string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicyRolePathMethod", role, path, method)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicyRolePathMethod indicates an expected call of RemovePolicyRolePathMethod.
func (mr *MockIAuthorizationEnforcerRepoMockRecorder) RemovePolicyRolePathMethod(role, path, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicyRolePathMethod", reflect.TypeOf((*MockIAuthorizationEnforcerRepo)(nil).RemovePolicyRolePathMethod), role, path, method)
}

// MockSessionStateRepo is a mock of SessionStateRepo interface.
type MockSessionStateRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStateRepoMockRecorder
}

// MockSessionStateRepoMockRecorder is the mock recorder for MockSessionStateRepo.
type MockSessionStateRepoMockRecorder struct {
	mock *MockSessionStateRepo
}

// NewMockSessionStateRepo creates a new mock instance.
func NewMockSessionStateRepo(ctrl *gomock.Controller) *MockSessionStateRepo {
	mock := &MockSessionStateRepo{ctrl: ctrl}
	mock.recorder = &MockSessionStateRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStateRepo) EXPECT() *MockSessionStateRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSessionStateRepo) Get(r *http.Request) (map[interface{}]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", r)
	ret0, _ := ret[0].(map[interface{}]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionStateRepoMockRecorder) Get(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionStateRepo)(nil).Get), r)
}

// Save mocks base method.
func (m *MockSessionStateRepo) Save(r *http.Request, w http.ResponseWriter, values map[interface{}]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", r, w, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSessionStateRepoMockRecorder) Save(r, w, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessionStateRepo)(nil).Save), r, w, values)
}

// MockCompanyRepo is a mock of CompanyRepo interface.
type MockCompanyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepoMockRecorder
}

// MockCompanyRepoMockRecorder is the mock recorder for MockCompanyRepo.
type MockCompanyRepoMockRecorder struct {
	mock *MockCompanyRepo
}

// NewMockCompanyRepo creates a new mock instance.
func NewMockCompanyRepo(ctrl *gomock.Controller) *MockCompanyRepo {
	mock := &MockCompanyRepo{ctrl: ctrl}
	mock.recorder = &MockCompanyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepo) EXPECT() *MockCompanyRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCompanyRepo) Create(arg0 context.Context, arg1 domain.Company) (domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCompanyRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompanyRepo)(nil).Create), arg0, arg1)
}

// ExistsNamed mocks base method.
func (m *MockCompanyRepo) ExistsNamed(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsNamed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsNamed indicates an expected call of ExistsNamed.
func (mr *MockCompanyRepoMockRecorder) ExistsNamed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsNamed", reflect.TypeOf((*MockCompanyRepo)(nil).ExistsNamed), arg0, arg1)
}

// ExistsUUID mocks base method.
func (m *MockCompanyRepo) ExistsUUID(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsUUID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsUUID indicates an expected call of ExistsUUID.
func (mr *MockCompanyRepoMockRecorder) ExistsUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsUUID", reflect.TypeOf((*MockCompanyRepo)(nil).ExistsUUID), arg0, arg1)
}

// GetByUUID mocks base method.
func (m *MockCompanyRepo) GetByUUID(arg0 context.Context, arg1 uuid.UUID) (domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", arg0, arg1)
	ret0, _ := ret[0].(domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockCompanyRepoMockRecorder) GetByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockCompanyRepo)(nil).GetByUUID), arg0, arg1)
}

// Update mocks base method.
func (m *MockCompanyRepo) Update(arg0 context.Context, arg1 domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCompanyRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompanyRepo)(nil).Update), arg0, arg1)
}

// MockUserToCompanyRepo is a mock of UserToCompanyRepo interface.
type MockUserToCompanyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserToCompanyRepoMockRecorder
}

// MockUserToCompanyRepoMockRecorder is the mock recorder for MockUserToCompanyRepo.
type MockUserToCompanyRepoMockRecorder struct {
	mock *MockUserToCompanyRepo
}

// NewMockUserToCompanyRepo creates a new mock instance.
func NewMockUserToCompanyRepo(ctrl *gomock.Controller) *MockUserToCompanyRepo {
	mock := &MockUserToCompanyRepo{ctrl: ctrl}
	mock.recorder = &MockUserToCompanyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserToCompanyRepo) EXPECT() *MockUserToCompanyRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserToCompanyRepo) Create(arg0 context.Context, arg1 domain.UserToCompany) (domain.UserToCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.UserToCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserToCompanyRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserToCompanyRepo)(nil).Create), arg0, arg1)
}

// Exists mocks base method.
func (m *MockUserToCompanyRepo) Exists(ctx context.Context, userUUID, companyUUID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, userUUID, companyUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserToCompanyRepoMockRecorder) Exists(ctx, userUUID, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserToCompanyRepo)(nil).Exists), ctx, userUUID, companyUUID)
}

// GetByCompanyUUID mocks base method.
func (m *MockUserToCompanyRepo) GetByCompanyUUID(ctx context.Context, companyUUID uuid.UUID) ([]domain.UserToCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompanyUUID", ctx, companyUUID)
	ret0, _ := ret[0].([]domain.UserToCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompanyUUID indicates an expected call of GetByCompanyUUID.
func (mr *MockUserToCompanyRepoMockRecorder) GetByCompanyUUID(ctx, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompanyUUID", reflect.TypeOf((*MockUserToCompanyRepo)(nil).GetByCompanyUUID), ctx, companyUUID)
}

// GetByUUIDS mocks base method.
func (m *MockUserToCompanyRepo) GetByUUIDS(ctx context.Context, userUUID, companyUUID uuid.UUID) (domain.UserToCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUIDS", ctx, userUUID, companyUUID)
	ret0, _ := ret[0].(domain.UserToCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUIDS indicates an expected call of GetByUUIDS.
func (mr *MockUserToCompanyRepoMockRecorder) GetByUUIDS(ctx, userUUID, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUIDS", reflect.TypeOf((*MockUserToCompanyRepo)(nil).GetByUUIDS), ctx, userUUID, companyUUID)
}

// GetByUserUUID mocks base method.
func (m *MockUserToCompanyRepo) GetByUserUUID(ctx context.Context, userUUID uuid.UUID) ([]domain.UserToCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserUUID", ctx, userUUID)
	ret0, _ := ret[0].([]domain.UserToCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserUUID indicates an expected call of GetByUserUUID.
func (mr *MockUserToCompanyRepoMockRecorder) GetByUserUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserUUID", reflect.TypeOf((*MockUserToCompanyRepo)(nil).GetByUserUUID), ctx, userUUID)
}

// Update mocks base method.
func (m *MockUserToCompanyRepo) Update(arg0 context.Context, arg1 domain.UserToCompany) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserToCompanyRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserToCompanyRepo)(nil).Update), arg0, arg1)
}

// MockItemBatchRepo is a mock of ItemBatchRepo interface.
type MockItemBatchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockItemBatchRepoMockRecorder
}

// MockItemBatchRepoMockRecorder is the mock recorder for MockItemBatchRepo.
type MockItemBatchRepoMockRecorder struct {
	mock *MockItemBatchRepo
}

// NewMockItemBatchRepo creates a new mock instance.
func NewMockItemBatchRepo(ctrl *gomock.Controller) *MockItemBatchRepo {
	mock := &MockItemBatchRepo{ctrl: ctrl}
	mock.recorder = &MockItemBatchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemBatchRepo) EXPECT() *MockItemBatchRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemBatchRepo) Create(ctx context.Context, itemBatch domain.ItemBatch) (domain.ItemBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, itemBatch)
	ret0, _ := ret[0].(domain.ItemBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemBatchRepoMockRecorder) Create(ctx, itemBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemBatchRepo)(nil).Create), ctx, itemBatch)
}

// Exists mocks base method.
func (m *MockItemBatchRepo) Exists(ctx context.Context, itemNumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, itemNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockItemBatchRepoMockRecorder) Exists(ctx, itemNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockItemBatchRepo)(nil).Exists), ctx, itemNumber)
}

// GetByCompanyUUID mocks base method.
func (m *MockItemBatchRepo) GetByCompanyUUID(ctx context.Context, companyUUID uuid.UUID) ([]domain.ItemBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompanyUUID", ctx, companyUUID)
	ret0, _ := ret[0].([]domain.ItemBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompanyUUID indicates an expected call of GetByCompanyUUID.
func (mr *MockItemBatchRepoMockRecorder) GetByCompanyUUID(ctx, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompanyUUID", reflect.TypeOf((*MockItemBatchRepo)(nil).GetByCompanyUUID), ctx, companyUUID)
}

// GetByUUID mocks base method.
func (m *MockItemBatchRepo) GetByUUID(ctx context.Context, uuid uuid.UUID) (domain.ItemBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(domain.ItemBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockItemBatchRepoMockRecorder) GetByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockItemBatchRepo)(nil).GetByUUID), ctx, uuid)
}

// Update mocks base method.
func (m *MockItemBatchRepo) Update(ctx context.Context, itemBatch domain.ItemBatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, itemBatch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemBatchRepoMockRecorder) Update(ctx, itemBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemBatchRepo)(nil).Update), ctx, itemBatch)
}

// MockCertificationRepo is a mock of CertificationRepo interface.
type MockCertificationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCertificationRepoMockRecorder
}

// MockCertificationRepoMockRecorder is the mock recorder for MockCertificationRepo.
type MockCertificationRepoMockRecorder struct {
	mock *MockCertificationRepo
}

// NewMockCertificationRepo creates a new mock instance.
func NewMockCertificationRepo(ctrl *gomock.Controller) *MockCertificationRepo {
	mock := &MockCertificationRepo{ctrl: ctrl}
	mock.recorder = &MockCertificationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificationRepo) EXPECT() *MockCertificationRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCertificationRepo) Create(ctx context.Context, certification domain.Certification) (domain.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, certification)
	ret0, _ := ret[0].(domain.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCertificationRepoMockRecorder) Create(ctx, certification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCertificationRepo)(nil).Create), ctx, certification)
}

// Exists mocks base method.
func (m *MockCertificationRepo) Exists(ctx context.Context, PrimaryAttribute string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, PrimaryAttribute)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCertificationRepoMockRecorder) Exists(ctx, PrimaryAttribute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCertificationRepo)(nil).Exists), ctx, PrimaryAttribute)
}

// GetByCompanyUUID mocks base method.
func (m *MockCertificationRepo) GetByCompanyUUID(ctx context.Context, companyUUID uuid.UUID) ([]domain.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompanyUUID", ctx, companyUUID)
	ret0, _ := ret[0].([]domain.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompanyUUID indicates an expected call of GetByCompanyUUID.
func (mr *MockCertificationRepoMockRecorder) GetByCompanyUUID(ctx, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompanyUUID", reflect.TypeOf((*MockCertificationRepo)(nil).GetByCompanyUUID), ctx, companyUUID)
}

// GetByUUID mocks base method.
func (m *MockCertificationRepo) GetByUUID(ctx context.Context, uuid uuid.UUID) (domain.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(domain.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockCertificationRepoMockRecorder) GetByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockCertificationRepo)(nil).GetByUUID), ctx, uuid)
}

// Update mocks base method.
func (m *MockCertificationRepo) Update(ctx context.Context, certification domain.Certification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, certification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCertificationRepoMockRecorder) Update(ctx, certification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCertificationRepo)(nil).Update), ctx, certification)
}
