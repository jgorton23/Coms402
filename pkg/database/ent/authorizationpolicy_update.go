// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/MatthewBehnke/apis/pkg/database/ent/authorizationpolicy"
	"github.com/MatthewBehnke/apis/pkg/database/ent/predicate"
)

// AuthorizationPolicyUpdate is the builder for updating AuthorizationPolicy entities.
type AuthorizationPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationPolicyMutation
}

// Where appends a list predicates to the AuthorizationPolicyUpdate builder.
func (apu *AuthorizationPolicyUpdate) Where(ps ...predicate.AuthorizationPolicy) *AuthorizationPolicyUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetPtype sets the "Ptype" field.
func (apu *AuthorizationPolicyUpdate) SetPtype(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetPtype(s)
	return apu
}

// SetNillablePtype sets the "Ptype" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillablePtype(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetPtype(*s)
	}
	return apu
}

// SetV0 sets the "V0" field.
func (apu *AuthorizationPolicyUpdate) SetV0(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV0(s)
	return apu
}

// SetNillableV0 sets the "V0" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV0(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV0(*s)
	}
	return apu
}

// SetV1 sets the "V1" field.
func (apu *AuthorizationPolicyUpdate) SetV1(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV1(s)
	return apu
}

// SetNillableV1 sets the "V1" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV1(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV1(*s)
	}
	return apu
}

// SetV2 sets the "V2" field.
func (apu *AuthorizationPolicyUpdate) SetV2(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV2(s)
	return apu
}

// SetNillableV2 sets the "V2" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV2(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV2(*s)
	}
	return apu
}

// SetV3 sets the "V3" field.
func (apu *AuthorizationPolicyUpdate) SetV3(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV3(s)
	return apu
}

// SetNillableV3 sets the "V3" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV3(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV3(*s)
	}
	return apu
}

// SetV4 sets the "V4" field.
func (apu *AuthorizationPolicyUpdate) SetV4(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV4(s)
	return apu
}

// SetNillableV4 sets the "V4" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV4(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV4(*s)
	}
	return apu
}

// SetV5 sets the "V5" field.
func (apu *AuthorizationPolicyUpdate) SetV5(s string) *AuthorizationPolicyUpdate {
	apu.mutation.SetV5(s)
	return apu
}

// SetNillableV5 sets the "V5" field if the given value is not nil.
func (apu *AuthorizationPolicyUpdate) SetNillableV5(s *string) *AuthorizationPolicyUpdate {
	if s != nil {
		apu.SetV5(*s)
	}
	return apu
}

// Mutation returns the AuthorizationPolicyMutation object of the builder.
func (apu *AuthorizationPolicyUpdate) Mutation() *AuthorizationPolicyMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AuthorizationPolicyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(apu.hooks) == 0 {
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizationPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AuthorizationPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AuthorizationPolicyUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AuthorizationPolicyUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apu *AuthorizationPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authorizationpolicy.Table,
			Columns: authorizationpolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorizationpolicy.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.Ptype(); ok {
		_spec.SetField(authorizationpolicy.FieldPtype, field.TypeString, value)
	}
	if value, ok := apu.mutation.V0(); ok {
		_spec.SetField(authorizationpolicy.FieldV0, field.TypeString, value)
	}
	if value, ok := apu.mutation.V1(); ok {
		_spec.SetField(authorizationpolicy.FieldV1, field.TypeString, value)
	}
	if value, ok := apu.mutation.V2(); ok {
		_spec.SetField(authorizationpolicy.FieldV2, field.TypeString, value)
	}
	if value, ok := apu.mutation.V3(); ok {
		_spec.SetField(authorizationpolicy.FieldV3, field.TypeString, value)
	}
	if value, ok := apu.mutation.V4(); ok {
		_spec.SetField(authorizationpolicy.FieldV4, field.TypeString, value)
	}
	if value, ok := apu.mutation.V5(); ok {
		_spec.SetField(authorizationpolicy.FieldV5, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AuthorizationPolicyUpdateOne is the builder for updating a single AuthorizationPolicy entity.
type AuthorizationPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationPolicyMutation
}

// SetPtype sets the "Ptype" field.
func (apuo *AuthorizationPolicyUpdateOne) SetPtype(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetPtype(s)
	return apuo
}

// SetNillablePtype sets the "Ptype" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillablePtype(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetPtype(*s)
	}
	return apuo
}

// SetV0 sets the "V0" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV0(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV0(s)
	return apuo
}

// SetNillableV0 sets the "V0" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV0(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV0(*s)
	}
	return apuo
}

// SetV1 sets the "V1" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV1(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV1(s)
	return apuo
}

// SetNillableV1 sets the "V1" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV1(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV1(*s)
	}
	return apuo
}

// SetV2 sets the "V2" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV2(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV2(s)
	return apuo
}

// SetNillableV2 sets the "V2" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV2(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV2(*s)
	}
	return apuo
}

// SetV3 sets the "V3" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV3(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV3(s)
	return apuo
}

// SetNillableV3 sets the "V3" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV3(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV3(*s)
	}
	return apuo
}

// SetV4 sets the "V4" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV4(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV4(s)
	return apuo
}

// SetNillableV4 sets the "V4" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV4(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV4(*s)
	}
	return apuo
}

// SetV5 sets the "V5" field.
func (apuo *AuthorizationPolicyUpdateOne) SetV5(s string) *AuthorizationPolicyUpdateOne {
	apuo.mutation.SetV5(s)
	return apuo
}

// SetNillableV5 sets the "V5" field if the given value is not nil.
func (apuo *AuthorizationPolicyUpdateOne) SetNillableV5(s *string) *AuthorizationPolicyUpdateOne {
	if s != nil {
		apuo.SetV5(*s)
	}
	return apuo
}

// Mutation returns the AuthorizationPolicyMutation object of the builder.
func (apuo *AuthorizationPolicyUpdateOne) Mutation() *AuthorizationPolicyMutation {
	return apuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AuthorizationPolicyUpdateOne) Select(field string, fields ...string) *AuthorizationPolicyUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AuthorizationPolicy entity.
func (apuo *AuthorizationPolicyUpdateOne) Save(ctx context.Context) (*AuthorizationPolicy, error) {
	var (
		err  error
		node *AuthorizationPolicy
	)
	if len(apuo.hooks) == 0 {
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizationPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, apuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AuthorizationPolicy)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AuthorizationPolicyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AuthorizationPolicyUpdateOne) SaveX(ctx context.Context) *AuthorizationPolicy {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AuthorizationPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AuthorizationPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apuo *AuthorizationPolicyUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizationPolicy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authorizationpolicy.Table,
			Columns: authorizationpolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorizationpolicy.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizationPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizationpolicy.FieldID)
		for _, f := range fields {
			if !authorizationpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizationpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.Ptype(); ok {
		_spec.SetField(authorizationpolicy.FieldPtype, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V0(); ok {
		_spec.SetField(authorizationpolicy.FieldV0, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V1(); ok {
		_spec.SetField(authorizationpolicy.FieldV1, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V2(); ok {
		_spec.SetField(authorizationpolicy.FieldV2, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V3(); ok {
		_spec.SetField(authorizationpolicy.FieldV3, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V4(); ok {
		_spec.SetField(authorizationpolicy.FieldV4, field.TypeString, value)
	}
	if value, ok := apuo.mutation.V5(); ok {
		_spec.SetField(authorizationpolicy.FieldV5, field.TypeString, value)
	}
	_node = &AuthorizationPolicy{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
