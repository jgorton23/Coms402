// Code generated by ent, DO NOT EDIT.

package itembatch

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ItemNumber applies equality check predicate on the "itemNumber" field. It's identical to ItemNumberEQ.
func ItemNumber(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemNumber), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CompanyUUID applies equality check predicate on the "companyUUID" field. It's identical to CompanyUUIDEQ.
func CompanyUUID(v uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyUUID), v))
	})
}

// ItemNumberEQ applies the EQ predicate on the "itemNumber" field.
func ItemNumberEQ(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemNumber), v))
	})
}

// ItemNumberNEQ applies the NEQ predicate on the "itemNumber" field.
func ItemNumberNEQ(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemNumber), v))
	})
}

// ItemNumberIn applies the In predicate on the "itemNumber" field.
func ItemNumberIn(vs ...string) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemNumber), v...))
	})
}

// ItemNumberNotIn applies the NotIn predicate on the "itemNumber" field.
func ItemNumberNotIn(vs ...string) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemNumber), v...))
	})
}

// ItemNumberGT applies the GT predicate on the "itemNumber" field.
func ItemNumberGT(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemNumber), v))
	})
}

// ItemNumberGTE applies the GTE predicate on the "itemNumber" field.
func ItemNumberGTE(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemNumber), v))
	})
}

// ItemNumberLT applies the LT predicate on the "itemNumber" field.
func ItemNumberLT(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemNumber), v))
	})
}

// ItemNumberLTE applies the LTE predicate on the "itemNumber" field.
func ItemNumberLTE(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemNumber), v))
	})
}

// ItemNumberContains applies the Contains predicate on the "itemNumber" field.
func ItemNumberContains(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldItemNumber), v))
	})
}

// ItemNumberHasPrefix applies the HasPrefix predicate on the "itemNumber" field.
func ItemNumberHasPrefix(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldItemNumber), v))
	})
}

// ItemNumberHasSuffix applies the HasSuffix predicate on the "itemNumber" field.
func ItemNumberHasSuffix(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldItemNumber), v))
	})
}

// ItemNumberEqualFold applies the EqualFold predicate on the "itemNumber" field.
func ItemNumberEqualFold(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldItemNumber), v))
	})
}

// ItemNumberContainsFold applies the ContainsFold predicate on the "itemNumber" field.
func ItemNumberContainsFold(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldItemNumber), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// CompanyUUIDEQ applies the EQ predicate on the "companyUUID" field.
func CompanyUUIDEQ(v uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyUUID), v))
	})
}

// CompanyUUIDNEQ applies the NEQ predicate on the "companyUUID" field.
func CompanyUUIDNEQ(v uuid.UUID) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompanyUUID), v))
	})
}

// CompanyUUIDIn applies the In predicate on the "companyUUID" field.
func CompanyUUIDIn(vs ...uuid.UUID) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCompanyUUID), v...))
	})
}

// CompanyUUIDNotIn applies the NotIn predicate on the "companyUUID" field.
func CompanyUUIDNotIn(vs ...uuid.UUID) predicate.ItemBatch {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ItemBatch(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCompanyUUID), v...))
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ItemBatch) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ItemBatch) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ItemBatch) predicate.ItemBatch {
	return predicate.ItemBatch(func(s *sql.Selector) {
		p(s.Not())
	})
}
