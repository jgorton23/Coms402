// Code generated by ent, DO NOT EDIT.

package attributetypestotemplates

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AttributeTypeUUID applies equality check predicate on the "attributeTypeUUID" field. It's identical to AttributeTypeUUIDEQ.
func AttributeTypeUUID(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributeTypeUUID), v))
	})
}

// TemplateUUID applies equality check predicate on the "templateUUID" field. It's identical to TemplateUUIDEQ.
func TemplateUUID(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateUUID), v))
	})
}

// AttributeTypeUUIDEQ applies the EQ predicate on the "attributeTypeUUID" field.
func AttributeTypeUUIDEQ(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttributeTypeUUID), v))
	})
}

// AttributeTypeUUIDNEQ applies the NEQ predicate on the "attributeTypeUUID" field.
func AttributeTypeUUIDNEQ(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttributeTypeUUID), v))
	})
}

// AttributeTypeUUIDIn applies the In predicate on the "attributeTypeUUID" field.
func AttributeTypeUUIDIn(vs ...uuid.UUID) predicate.AttributeTypesToTemplates {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAttributeTypeUUID), v...))
	})
}

// AttributeTypeUUIDNotIn applies the NotIn predicate on the "attributeTypeUUID" field.
func AttributeTypeUUIDNotIn(vs ...uuid.UUID) predicate.AttributeTypesToTemplates {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAttributeTypeUUID), v...))
	})
}

// TemplateUUIDEQ applies the EQ predicate on the "templateUUID" field.
func TemplateUUIDEQ(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateUUID), v))
	})
}

// TemplateUUIDNEQ applies the NEQ predicate on the "templateUUID" field.
func TemplateUUIDNEQ(v uuid.UUID) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateUUID), v))
	})
}

// TemplateUUIDIn applies the In predicate on the "templateUUID" field.
func TemplateUUIDIn(vs ...uuid.UUID) predicate.AttributeTypesToTemplates {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTemplateUUID), v...))
	})
}

// TemplateUUIDNotIn applies the NotIn predicate on the "templateUUID" field.
func TemplateUUIDNotIn(vs ...uuid.UUID) predicate.AttributeTypesToTemplates {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTemplateUUID), v...))
	})
}

// HasAttribute applies the HasEdge predicate on the "attribute" edge.
func HasAttribute() predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttributeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttributeWith applies the HasEdge predicate on the "attribute" edge with a given conditions (other predicates).
func HasAttributeWith(preds ...predicate.AttributeType) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttributeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AttributeTable, AttributeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.CertificationTemplate) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttributeTypesToTemplates) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttributeTypesToTemplates) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttributeTypesToTemplates) predicate.AttributeTypesToTemplates {
	return predicate.AttributeTypesToTemplates(func(s *sql.Selector) {
		p(s.Not())
	})
}
