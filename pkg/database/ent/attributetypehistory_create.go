// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// AttributeTypeHistoryCreate is the builder for creating a AttributeTypeHistory entity.
type AttributeTypeHistoryCreate struct {
	config
	mutation *AttributeTypeHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHistoryTime sets the "history_time" field.
func (athc *AttributeTypeHistoryCreate) SetHistoryTime(t time.Time) *AttributeTypeHistoryCreate {
	athc.mutation.SetHistoryTime(t)
	return athc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (athc *AttributeTypeHistoryCreate) SetNillableHistoryTime(t *time.Time) *AttributeTypeHistoryCreate {
	if t != nil {
		athc.SetHistoryTime(*t)
	}
	return athc
}

// SetRef sets the "ref" field.
func (athc *AttributeTypeHistoryCreate) SetRef(u uuid.UUID) *AttributeTypeHistoryCreate {
	athc.mutation.SetRef(u)
	return athc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (athc *AttributeTypeHistoryCreate) SetNillableRef(u *uuid.UUID) *AttributeTypeHistoryCreate {
	if u != nil {
		athc.SetRef(*u)
	}
	return athc
}

// SetOperation sets the "operation" field.
func (athc *AttributeTypeHistoryCreate) SetOperation(et enthistory.OpType) *AttributeTypeHistoryCreate {
	athc.mutation.SetOperation(et)
	return athc
}

// SetUpdatedBy sets the "updated_by" field.
func (athc *AttributeTypeHistoryCreate) SetUpdatedBy(s string) *AttributeTypeHistoryCreate {
	athc.mutation.SetUpdatedBy(s)
	return athc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (athc *AttributeTypeHistoryCreate) SetNillableUpdatedBy(s *string) *AttributeTypeHistoryCreate {
	if s != nil {
		athc.SetUpdatedBy(*s)
	}
	return athc
}

// SetKey sets the "key" field.
func (athc *AttributeTypeHistoryCreate) SetKey(s string) *AttributeTypeHistoryCreate {
	athc.mutation.SetKey(s)
	return athc
}

// SetCompanyUUID sets the "companyUUID" field.
func (athc *AttributeTypeHistoryCreate) SetCompanyUUID(u uuid.UUID) *AttributeTypeHistoryCreate {
	athc.mutation.SetCompanyUUID(u)
	return athc
}

// SetID sets the "id" field.
func (athc *AttributeTypeHistoryCreate) SetID(u uuid.UUID) *AttributeTypeHistoryCreate {
	athc.mutation.SetID(u)
	return athc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (athc *AttributeTypeHistoryCreate) SetNillableID(u *uuid.UUID) *AttributeTypeHistoryCreate {
	if u != nil {
		athc.SetID(*u)
	}
	return athc
}

// Mutation returns the AttributeTypeHistoryMutation object of the builder.
func (athc *AttributeTypeHistoryCreate) Mutation() *AttributeTypeHistoryMutation {
	return athc.mutation
}

// Save creates the AttributeTypeHistory in the database.
func (athc *AttributeTypeHistoryCreate) Save(ctx context.Context) (*AttributeTypeHistory, error) {
	athc.defaults()
	return withHooks[*AttributeTypeHistory, AttributeTypeHistoryMutation](ctx, athc.sqlSave, athc.mutation, athc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (athc *AttributeTypeHistoryCreate) SaveX(ctx context.Context) *AttributeTypeHistory {
	v, err := athc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (athc *AttributeTypeHistoryCreate) Exec(ctx context.Context) error {
	_, err := athc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (athc *AttributeTypeHistoryCreate) ExecX(ctx context.Context) {
	if err := athc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (athc *AttributeTypeHistoryCreate) defaults() {
	if _, ok := athc.mutation.HistoryTime(); !ok {
		v := attributetypehistory.DefaultHistoryTime()
		athc.mutation.SetHistoryTime(v)
	}
	if _, ok := athc.mutation.ID(); !ok {
		v := attributetypehistory.DefaultID()
		athc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (athc *AttributeTypeHistoryCreate) check() error {
	if _, ok := athc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "AttributeTypeHistory.history_time"`)}
	}
	if _, ok := athc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "AttributeTypeHistory.operation"`)}
	}
	if v, ok := athc.mutation.Operation(); ok {
		if err := attributetypehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "AttributeTypeHistory.operation": %w`, err)}
		}
	}
	if _, ok := athc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "AttributeTypeHistory.key"`)}
	}
	if _, ok := athc.mutation.CompanyUUID(); !ok {
		return &ValidationError{Name: "companyUUID", err: errors.New(`ent: missing required field "AttributeTypeHistory.companyUUID"`)}
	}
	return nil
}

func (athc *AttributeTypeHistoryCreate) sqlSave(ctx context.Context) (*AttributeTypeHistory, error) {
	if err := athc.check(); err != nil {
		return nil, err
	}
	_node, _spec := athc.createSpec()
	if err := sqlgraph.CreateNode(ctx, athc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	athc.mutation.id = &_node.ID
	athc.mutation.done = true
	return _node, nil
}

func (athc *AttributeTypeHistoryCreate) createSpec() (*AttributeTypeHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeTypeHistory{config: athc.config}
		_spec = sqlgraph.NewCreateSpec(attributetypehistory.Table, sqlgraph.NewFieldSpec(attributetypehistory.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = athc.conflict
	if id, ok := athc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := athc.mutation.HistoryTime(); ok {
		_spec.SetField(attributetypehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := athc.mutation.Ref(); ok {
		_spec.SetField(attributetypehistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := athc.mutation.Operation(); ok {
		_spec.SetField(attributetypehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := athc.mutation.UpdatedBy(); ok {
		_spec.SetField(attributetypehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := athc.mutation.Key(); ok {
		_spec.SetField(attributetypehistory.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := athc.mutation.CompanyUUID(); ok {
		_spec.SetField(attributetypehistory.FieldCompanyUUID, field.TypeUUID, value)
		_node.CompanyUUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeTypeHistory.Create().
//		SetHistoryTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeTypeHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (athc *AttributeTypeHistoryCreate) OnConflict(opts ...sql.ConflictOption) *AttributeTypeHistoryUpsertOne {
	athc.conflict = opts
	return &AttributeTypeHistoryUpsertOne{
		create: athc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (athc *AttributeTypeHistoryCreate) OnConflictColumns(columns ...string) *AttributeTypeHistoryUpsertOne {
	athc.conflict = append(athc.conflict, sql.ConflictColumns(columns...))
	return &AttributeTypeHistoryUpsertOne{
		create: athc,
	}
}

type (
	// AttributeTypeHistoryUpsertOne is the builder for "upsert"-ing
	//  one AttributeTypeHistory node.
	AttributeTypeHistoryUpsertOne struct {
		create *AttributeTypeHistoryCreate
	}

	// AttributeTypeHistoryUpsert is the "OnConflict" setter.
	AttributeTypeHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *AttributeTypeHistoryUpsert) SetKey(v string) *AttributeTypeHistoryUpsert {
	u.Set(attributetypehistory.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsert) UpdateKey() *AttributeTypeHistoryUpsert {
	u.SetExcluded(attributetypehistory.FieldKey)
	return u
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *AttributeTypeHistoryUpsert) SetCompanyUUID(v uuid.UUID) *AttributeTypeHistoryUpsert {
	u.Set(attributetypehistory.FieldCompanyUUID, v)
	return u
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsert) UpdateCompanyUUID() *AttributeTypeHistoryUpsert {
	u.SetExcluded(attributetypehistory.FieldCompanyUUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attributetypehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeTypeHistoryUpsertOne) UpdateNewValues() *AttributeTypeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attributetypehistory.FieldID)
		}
		if _, exists := u.create.mutation.HistoryTime(); exists {
			s.SetIgnore(attributetypehistory.FieldHistoryTime)
		}
		if _, exists := u.create.mutation.Ref(); exists {
			s.SetIgnore(attributetypehistory.FieldRef)
		}
		if _, exists := u.create.mutation.Operation(); exists {
			s.SetIgnore(attributetypehistory.FieldOperation)
		}
		if _, exists := u.create.mutation.UpdatedBy(); exists {
			s.SetIgnore(attributetypehistory.FieldUpdatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttributeTypeHistoryUpsertOne) Ignore() *AttributeTypeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeTypeHistoryUpsertOne) DoNothing() *AttributeTypeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeTypeHistoryCreate.OnConflict
// documentation for more info.
func (u *AttributeTypeHistoryUpsertOne) Update(set func(*AttributeTypeHistoryUpsert)) *AttributeTypeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeTypeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *AttributeTypeHistoryUpsertOne) SetKey(v string) *AttributeTypeHistoryUpsertOne {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsertOne) UpdateKey() *AttributeTypeHistoryUpsertOne {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.UpdateKey()
	})
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *AttributeTypeHistoryUpsertOne) SetCompanyUUID(v uuid.UUID) *AttributeTypeHistoryUpsertOne {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.SetCompanyUUID(v)
	})
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsertOne) UpdateCompanyUUID() *AttributeTypeHistoryUpsertOne {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.UpdateCompanyUUID()
	})
}

// Exec executes the query.
func (u *AttributeTypeHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeTypeHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeTypeHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttributeTypeHistoryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AttributeTypeHistoryUpsertOne.ID is not supported by MySQL driver. Use AttributeTypeHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttributeTypeHistoryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttributeTypeHistoryCreateBulk is the builder for creating many AttributeTypeHistory entities in bulk.
type AttributeTypeHistoryCreateBulk struct {
	config
	builders []*AttributeTypeHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AttributeTypeHistory entities in the database.
func (athcb *AttributeTypeHistoryCreateBulk) Save(ctx context.Context) ([]*AttributeTypeHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(athcb.builders))
	nodes := make([]*AttributeTypeHistory, len(athcb.builders))
	mutators := make([]Mutator, len(athcb.builders))
	for i := range athcb.builders {
		func(i int, root context.Context) {
			builder := athcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeTypeHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, athcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = athcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, athcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, athcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (athcb *AttributeTypeHistoryCreateBulk) SaveX(ctx context.Context) []*AttributeTypeHistory {
	v, err := athcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (athcb *AttributeTypeHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := athcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (athcb *AttributeTypeHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := athcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeTypeHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeTypeHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (athcb *AttributeTypeHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttributeTypeHistoryUpsertBulk {
	athcb.conflict = opts
	return &AttributeTypeHistoryUpsertBulk{
		create: athcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (athcb *AttributeTypeHistoryCreateBulk) OnConflictColumns(columns ...string) *AttributeTypeHistoryUpsertBulk {
	athcb.conflict = append(athcb.conflict, sql.ConflictColumns(columns...))
	return &AttributeTypeHistoryUpsertBulk{
		create: athcb,
	}
}

// AttributeTypeHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AttributeTypeHistory nodes.
type AttributeTypeHistoryUpsertBulk struct {
	create *AttributeTypeHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attributetypehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeTypeHistoryUpsertBulk) UpdateNewValues() *AttributeTypeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attributetypehistory.FieldID)
			}
			if _, exists := b.mutation.HistoryTime(); exists {
				s.SetIgnore(attributetypehistory.FieldHistoryTime)
			}
			if _, exists := b.mutation.Ref(); exists {
				s.SetIgnore(attributetypehistory.FieldRef)
			}
			if _, exists := b.mutation.Operation(); exists {
				s.SetIgnore(attributetypehistory.FieldOperation)
			}
			if _, exists := b.mutation.UpdatedBy(); exists {
				s.SetIgnore(attributetypehistory.FieldUpdatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttributeTypeHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttributeTypeHistoryUpsertBulk) Ignore() *AttributeTypeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeTypeHistoryUpsertBulk) DoNothing() *AttributeTypeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeTypeHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *AttributeTypeHistoryUpsertBulk) Update(set func(*AttributeTypeHistoryUpsert)) *AttributeTypeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeTypeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *AttributeTypeHistoryUpsertBulk) SetKey(v string) *AttributeTypeHistoryUpsertBulk {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsertBulk) UpdateKey() *AttributeTypeHistoryUpsertBulk {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.UpdateKey()
	})
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *AttributeTypeHistoryUpsertBulk) SetCompanyUUID(v uuid.UUID) *AttributeTypeHistoryUpsertBulk {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.SetCompanyUUID(v)
	})
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *AttributeTypeHistoryUpsertBulk) UpdateCompanyUUID() *AttributeTypeHistoryUpsertBulk {
	return u.Update(func(s *AttributeTypeHistoryUpsert) {
		s.UpdateCompanyUUID()
	})
}

// Exec executes the query.
func (u *AttributeTypeHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttributeTypeHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeTypeHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeTypeHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
