// Code generated by enthistory, DO NOT EDIT.
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplatehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/companyhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchtoitembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userstocompanyhistory"
)

func (a *Attribute) History() *AttributeHistoryQuery {
	historyClient := NewAttributeHistoryClient(a.config)
	return historyClient.Query().Where(attributehistory.Ref(a.ID))
}

func (ah *AttributeHistory) Next(ctx context.Context) (*AttributeHistory, error) {
	client := NewAttributeHistoryClient(ah.config)
	return client.Query().
		Where(
			attributehistory.Ref(ah.Ref),
			attributehistory.HistoryTimeGT(ah.HistoryTime),
		).
		Order(Asc(attributehistory.FieldHistoryTime)).
		First(ctx)
}

func (ah *AttributeHistory) Prev(ctx context.Context) (*AttributeHistory, error) {
	client := NewAttributeHistoryClient(ah.config)
	return client.Query().
		Where(
			attributehistory.Ref(ah.Ref),
			attributehistory.HistoryTimeLT(ah.HistoryTime),
		).
		Order(Desc(attributehistory.FieldHistoryTime)).
		First(ctx)
}

func (ahq *AttributeHistoryQuery) Earliest(ctx context.Context) (*AttributeHistory, error) {
	return ahq.
		Order(Asc(attributehistory.FieldHistoryTime)).
		First(ctx)
}

func (ahq *AttributeHistoryQuery) Latest(ctx context.Context) (*AttributeHistory, error) {
	return ahq.
		Order(Desc(attributehistory.FieldHistoryTime)).
		First(ctx)
}

func (ahq *AttributeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*AttributeHistory, error) {
	return ahq.
		Where(attributehistory.HistoryTimeLTE(time)).
		Order(Desc(attributehistory.FieldHistoryTime)).
		First(ctx)
}

func (ah *AttributeHistory) Restore(ctx context.Context) (*Attribute, error) {
	client := NewAttributeClient(ah.config)
	return client.
		UpdateOneID(ah.Ref).
		SetKey(ah.Key).
		SetValue(ah.Value).
		SetCertUUID(ah.CertUUID).
		SetAttributeTypeUUID(ah.AttributeTypeUUID).
		Save(ctx)
}

func (at *AttributeType) History() *AttributeTypeHistoryQuery {
	historyClient := NewAttributeTypeHistoryClient(at.config)
	return historyClient.Query().Where(attributetypehistory.Ref(at.ID))
}

func (ath *AttributeTypeHistory) Next(ctx context.Context) (*AttributeTypeHistory, error) {
	client := NewAttributeTypeHistoryClient(ath.config)
	return client.Query().
		Where(
			attributetypehistory.Ref(ath.Ref),
			attributetypehistory.HistoryTimeGT(ath.HistoryTime),
		).
		Order(Asc(attributetypehistory.FieldHistoryTime)).
		First(ctx)
}

func (ath *AttributeTypeHistory) Prev(ctx context.Context) (*AttributeTypeHistory, error) {
	client := NewAttributeTypeHistoryClient(ath.config)
	return client.Query().
		Where(
			attributetypehistory.Ref(ath.Ref),
			attributetypehistory.HistoryTimeLT(ath.HistoryTime),
		).
		Order(Desc(attributetypehistory.FieldHistoryTime)).
		First(ctx)
}

func (athq *AttributeTypeHistoryQuery) Earliest(ctx context.Context) (*AttributeTypeHistory, error) {
	return athq.
		Order(Asc(attributetypehistory.FieldHistoryTime)).
		First(ctx)
}

func (athq *AttributeTypeHistoryQuery) Latest(ctx context.Context) (*AttributeTypeHistory, error) {
	return athq.
		Order(Desc(attributetypehistory.FieldHistoryTime)).
		First(ctx)
}

func (athq *AttributeTypeHistoryQuery) AsOf(ctx context.Context, time time.Time) (*AttributeTypeHistory, error) {
	return athq.
		Where(attributetypehistory.HistoryTimeLTE(time)).
		Order(Desc(attributetypehistory.FieldHistoryTime)).
		First(ctx)
}

func (ath *AttributeTypeHistory) Restore(ctx context.Context) (*AttributeType, error) {
	client := NewAttributeTypeClient(ath.config)
	return client.
		UpdateOneID(ath.Ref).
		SetKey(ath.Key).
		SetCompanyUUID(ath.CompanyUUID).
		Save(ctx)
}

func (c *Certification) History() *CertificationHistoryQuery {
	historyClient := NewCertificationHistoryClient(c.config)
	return historyClient.Query().Where(certificationhistory.Ref(c.ID))
}

func (ch *CertificationHistory) Next(ctx context.Context) (*CertificationHistory, error) {
	client := NewCertificationHistoryClient(ch.config)
	return client.Query().
		Where(
			certificationhistory.Ref(ch.Ref),
			certificationhistory.HistoryTimeGT(ch.HistoryTime),
		).
		Order(Asc(certificationhistory.FieldHistoryTime)).
		First(ctx)
}

func (ch *CertificationHistory) Prev(ctx context.Context) (*CertificationHistory, error) {
	client := NewCertificationHistoryClient(ch.config)
	return client.Query().
		Where(
			certificationhistory.Ref(ch.Ref),
			certificationhistory.HistoryTimeLT(ch.HistoryTime),
		).
		Order(Desc(certificationhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CertificationHistoryQuery) Earliest(ctx context.Context) (*CertificationHistory, error) {
	return chq.
		Order(Asc(certificationhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CertificationHistoryQuery) Latest(ctx context.Context) (*CertificationHistory, error) {
	return chq.
		Order(Desc(certificationhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CertificationHistoryQuery) AsOf(ctx context.Context, time time.Time) (*CertificationHistory, error) {
	return chq.
		Where(certificationhistory.HistoryTimeLTE(time)).
		Order(Desc(certificationhistory.FieldHistoryTime)).
		First(ctx)
}

func (ch *CertificationHistory) Restore(ctx context.Context) (*Certification, error) {
	client := NewCertificationClient(ch.config)
	return client.
		UpdateOneID(ch.Ref).
		SetPrimaryAttribute(ch.PrimaryAttribute).
		SetCompanyUUID(ch.CompanyUUID).
		SetItemBatchUUID(ch.ItemBatchUUID).
		SetImageUUID(ch.ImageUUID).
		Save(ctx)
}

func (ct *CertificationTemplate) History() *CertificationTemplateHistoryQuery {
	historyClient := NewCertificationTemplateHistoryClient(ct.config)
	return historyClient.Query().Where(certificationtemplatehistory.Ref(ct.ID))
}

func (cth *CertificationTemplateHistory) Next(ctx context.Context) (*CertificationTemplateHistory, error) {
	client := NewCertificationTemplateHistoryClient(cth.config)
	return client.Query().
		Where(
			certificationtemplatehistory.Ref(cth.Ref),
			certificationtemplatehistory.HistoryTimeGT(cth.HistoryTime),
		).
		Order(Asc(certificationtemplatehistory.FieldHistoryTime)).
		First(ctx)
}

func (cth *CertificationTemplateHistory) Prev(ctx context.Context) (*CertificationTemplateHistory, error) {
	client := NewCertificationTemplateHistoryClient(cth.config)
	return client.Query().
		Where(
			certificationtemplatehistory.Ref(cth.Ref),
			certificationtemplatehistory.HistoryTimeLT(cth.HistoryTime),
		).
		Order(Desc(certificationtemplatehistory.FieldHistoryTime)).
		First(ctx)
}

func (cthq *CertificationTemplateHistoryQuery) Earliest(ctx context.Context) (*CertificationTemplateHistory, error) {
	return cthq.
		Order(Asc(certificationtemplatehistory.FieldHistoryTime)).
		First(ctx)
}

func (cthq *CertificationTemplateHistoryQuery) Latest(ctx context.Context) (*CertificationTemplateHistory, error) {
	return cthq.
		Order(Desc(certificationtemplatehistory.FieldHistoryTime)).
		First(ctx)
}

func (cthq *CertificationTemplateHistoryQuery) AsOf(ctx context.Context, time time.Time) (*CertificationTemplateHistory, error) {
	return cthq.
		Where(certificationtemplatehistory.HistoryTimeLTE(time)).
		Order(Desc(certificationtemplatehistory.FieldHistoryTime)).
		First(ctx)
}

func (cth *CertificationTemplateHistory) Restore(ctx context.Context) (*CertificationTemplate, error) {
	client := NewCertificationTemplateClient(cth.config)
	return client.
		UpdateOneID(cth.Ref).
		SetDescription(cth.Description).
		SetCompanyUUID(cth.CompanyUUID).
		Save(ctx)
}

func (c *Company) History() *CompanyHistoryQuery {
	historyClient := NewCompanyHistoryClient(c.config)
	return historyClient.Query().Where(companyhistory.Ref(c.ID))
}

func (ch *CompanyHistory) Next(ctx context.Context) (*CompanyHistory, error) {
	client := NewCompanyHistoryClient(ch.config)
	return client.Query().
		Where(
			companyhistory.Ref(ch.Ref),
			companyhistory.HistoryTimeGT(ch.HistoryTime),
		).
		Order(Asc(companyhistory.FieldHistoryTime)).
		First(ctx)
}

func (ch *CompanyHistory) Prev(ctx context.Context) (*CompanyHistory, error) {
	client := NewCompanyHistoryClient(ch.config)
	return client.Query().
		Where(
			companyhistory.Ref(ch.Ref),
			companyhistory.HistoryTimeLT(ch.HistoryTime),
		).
		Order(Desc(companyhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CompanyHistoryQuery) Earliest(ctx context.Context) (*CompanyHistory, error) {
	return chq.
		Order(Asc(companyhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CompanyHistoryQuery) Latest(ctx context.Context) (*CompanyHistory, error) {
	return chq.
		Order(Desc(companyhistory.FieldHistoryTime)).
		First(ctx)
}

func (chq *CompanyHistoryQuery) AsOf(ctx context.Context, time time.Time) (*CompanyHistory, error) {
	return chq.
		Where(companyhistory.HistoryTimeLTE(time)).
		Order(Desc(companyhistory.FieldHistoryTime)).
		First(ctx)
}

func (ch *CompanyHistory) Restore(ctx context.Context) (*Company, error) {
	client := NewCompanyClient(ch.config)
	return client.
		UpdateOneID(ch.Ref).
		SetName(ch.Name).
		Save(ctx)
}

func (ib *ItemBatch) History() *ItemBatchHistoryQuery {
	historyClient := NewItemBatchHistoryClient(ib.config)
	return historyClient.Query().Where(itembatchhistory.Ref(ib.ID))
}

func (ibh *ItemBatchHistory) Next(ctx context.Context) (*ItemBatchHistory, error) {
	client := NewItemBatchHistoryClient(ibh.config)
	return client.Query().
		Where(
			itembatchhistory.Ref(ibh.Ref),
			itembatchhistory.HistoryTimeGT(ibh.HistoryTime),
		).
		Order(Asc(itembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibh *ItemBatchHistory) Prev(ctx context.Context) (*ItemBatchHistory, error) {
	client := NewItemBatchHistoryClient(ibh.config)
	return client.Query().
		Where(
			itembatchhistory.Ref(ibh.Ref),
			itembatchhistory.HistoryTimeLT(ibh.HistoryTime),
		).
		Order(Desc(itembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibhq *ItemBatchHistoryQuery) Earliest(ctx context.Context) (*ItemBatchHistory, error) {
	return ibhq.
		Order(Asc(itembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibhq *ItemBatchHistoryQuery) Latest(ctx context.Context) (*ItemBatchHistory, error) {
	return ibhq.
		Order(Desc(itembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibhq *ItemBatchHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ItemBatchHistory, error) {
	return ibhq.
		Where(itembatchhistory.HistoryTimeLTE(time)).
		Order(Desc(itembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibh *ItemBatchHistory) Restore(ctx context.Context) (*ItemBatch, error) {
	client := NewItemBatchClient(ibh.config)
	return client.
		UpdateOneID(ibh.Ref).
		SetItemNumber(ibh.ItemNumber).
		SetDescription(ibh.Description).
		SetCompanyUUID(ibh.CompanyUUID).
		Save(ctx)
}

func (ibtib *ItemBatchToItemBatch) History() *ItemBatchToItemBatchHistoryQuery {
	historyClient := NewItemBatchToItemBatchHistoryClient(ibtib.config)
	return historyClient.Query().Where(itembatchtoitembatchhistory.Ref(ibtib.ID))
}

func (ibtibh *ItemBatchToItemBatchHistory) Next(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	client := NewItemBatchToItemBatchHistoryClient(ibtibh.config)
	return client.Query().
		Where(
			itembatchtoitembatchhistory.Ref(ibtibh.Ref),
			itembatchtoitembatchhistory.HistoryTimeGT(ibtibh.HistoryTime),
		).
		Order(Asc(itembatchtoitembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibtibh *ItemBatchToItemBatchHistory) Prev(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	client := NewItemBatchToItemBatchHistoryClient(ibtibh.config)
	return client.Query().
		Where(
			itembatchtoitembatchhistory.Ref(ibtibh.Ref),
			itembatchtoitembatchhistory.HistoryTimeLT(ibtibh.HistoryTime),
		).
		Order(Desc(itembatchtoitembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Earliest(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	return ibtibhq.
		Order(Asc(itembatchtoitembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Latest(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	return ibtibhq.
		Order(Desc(itembatchtoitembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) AsOf(ctx context.Context, time time.Time) (*ItemBatchToItemBatchHistory, error) {
	return ibtibhq.
		Where(itembatchtoitembatchhistory.HistoryTimeLTE(time)).
		Order(Desc(itembatchtoitembatchhistory.FieldHistoryTime)).
		First(ctx)
}

func (ibtibh *ItemBatchToItemBatchHistory) Restore(ctx context.Context) (*ItemBatchToItemBatch, error) {
	client := NewItemBatchToItemBatchClient(ibtibh.config)
	return client.
		UpdateOneID(ibtibh.Ref).
		SetChildUUID(ibtibh.ChildUUID).
		SetParentUUID(ibtibh.ParentUUID).
		Save(ctx)
}

func (u *User) History() *UserHistoryQuery {
	historyClient := NewUserHistoryClient(u.config)
	return historyClient.Query().Where(userhistory.Ref(u.ID))
}

func (uh *UserHistory) Next(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(uh.config)
	return client.Query().
		Where(
			userhistory.Ref(uh.Ref),
			userhistory.HistoryTimeGT(uh.HistoryTime),
		).
		Order(Asc(userhistory.FieldHistoryTime)).
		First(ctx)
}

func (uh *UserHistory) Prev(ctx context.Context) (*UserHistory, error) {
	client := NewUserHistoryClient(uh.config)
	return client.Query().
		Where(
			userhistory.Ref(uh.Ref),
			userhistory.HistoryTimeLT(uh.HistoryTime),
		).
		Order(Desc(userhistory.FieldHistoryTime)).
		First(ctx)
}

func (uhq *UserHistoryQuery) Earliest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(Asc(userhistory.FieldHistoryTime)).
		First(ctx)
}

func (uhq *UserHistoryQuery) Latest(ctx context.Context) (*UserHistory, error) {
	return uhq.
		Order(Desc(userhistory.FieldHistoryTime)).
		First(ctx)
}

func (uhq *UserHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UserHistory, error) {
	return uhq.
		Where(userhistory.HistoryTimeLTE(time)).
		Order(Desc(userhistory.FieldHistoryTime)).
		First(ctx)
}

func (uh *UserHistory) Restore(ctx context.Context) (*User, error) {
	client := NewUserClient(uh.config)
	return client.
		UpdateOneID(uh.Ref).
		SetEmail(uh.Email).
		SetUpdatedAt(uh.UpdatedAt).
		SetPasswordHash(uh.PasswordHash).
		SetAttemptCount(uh.AttemptCount).
		SetLastAttempt(uh.LastAttempt).
		SetLocked(uh.Locked).
		SetRole(uh.Role).
		Save(ctx)
}

func (utc *UsersToCompany) History() *UsersToCompanyHistoryQuery {
	historyClient := NewUsersToCompanyHistoryClient(utc.config)
	return historyClient.Query().Where(userstocompanyhistory.Ref(utc.ID))
}

func (utch *UsersToCompanyHistory) Next(ctx context.Context) (*UsersToCompanyHistory, error) {
	client := NewUsersToCompanyHistoryClient(utch.config)
	return client.Query().
		Where(
			userstocompanyhistory.Ref(utch.Ref),
			userstocompanyhistory.HistoryTimeGT(utch.HistoryTime),
		).
		Order(Asc(userstocompanyhistory.FieldHistoryTime)).
		First(ctx)
}

func (utch *UsersToCompanyHistory) Prev(ctx context.Context) (*UsersToCompanyHistory, error) {
	client := NewUsersToCompanyHistoryClient(utch.config)
	return client.Query().
		Where(
			userstocompanyhistory.Ref(utch.Ref),
			userstocompanyhistory.HistoryTimeLT(utch.HistoryTime),
		).
		Order(Desc(userstocompanyhistory.FieldHistoryTime)).
		First(ctx)
}

func (utchq *UsersToCompanyHistoryQuery) Earliest(ctx context.Context) (*UsersToCompanyHistory, error) {
	return utchq.
		Order(Asc(userstocompanyhistory.FieldHistoryTime)).
		First(ctx)
}

func (utchq *UsersToCompanyHistoryQuery) Latest(ctx context.Context) (*UsersToCompanyHistory, error) {
	return utchq.
		Order(Desc(userstocompanyhistory.FieldHistoryTime)).
		First(ctx)
}

func (utchq *UsersToCompanyHistoryQuery) AsOf(ctx context.Context, time time.Time) (*UsersToCompanyHistory, error) {
	return utchq.
		Where(userstocompanyhistory.HistoryTimeLTE(time)).
		Order(Desc(userstocompanyhistory.FieldHistoryTime)).
		First(ctx)
}

func (utch *UsersToCompanyHistory) Restore(ctx context.Context) (*UsersToCompany, error) {
	client := NewUsersToCompanyClient(utch.config)
	return client.
		UpdateOneID(utch.Ref).
		SetCompanyUUID(utch.CompanyUUID).
		SetUserUUID(utch.UserUUID).
		SetRoleType(utch.RoleType).
		SetApproved(utch.Approved).
		Save(ctx)
}
