// Code generated by ent, DO NOT EDIT.

package certification

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldID, id))
}

// PrimaryAttribute applies equality check predicate on the "primaryAttribute" field. It's identical to PrimaryAttributeEQ.
func PrimaryAttribute(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldPrimaryAttribute, v))
}

// CompanyUUID applies equality check predicate on the "companyUUID" field. It's identical to CompanyUUIDEQ.
func CompanyUUID(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldCompanyUUID, v))
}

// ItemBatchUUID applies equality check predicate on the "itemBatchUUID" field. It's identical to ItemBatchUUIDEQ.
func ItemBatchUUID(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldItemBatchUUID, v))
}

// ImageUUID applies equality check predicate on the "imageUUID" field. It's identical to ImageUUIDEQ.
func ImageUUID(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldImageUUID, v))
}

// PrimaryAttributeEQ applies the EQ predicate on the "primaryAttribute" field.
func PrimaryAttributeEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldPrimaryAttribute, v))
}

// PrimaryAttributeNEQ applies the NEQ predicate on the "primaryAttribute" field.
func PrimaryAttributeNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldPrimaryAttribute, v))
}

// PrimaryAttributeIn applies the In predicate on the "primaryAttribute" field.
func PrimaryAttributeIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldPrimaryAttribute, vs...))
}

// PrimaryAttributeNotIn applies the NotIn predicate on the "primaryAttribute" field.
func PrimaryAttributeNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldPrimaryAttribute, vs...))
}

// PrimaryAttributeGT applies the GT predicate on the "primaryAttribute" field.
func PrimaryAttributeGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldPrimaryAttribute, v))
}

// PrimaryAttributeGTE applies the GTE predicate on the "primaryAttribute" field.
func PrimaryAttributeGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldPrimaryAttribute, v))
}

// PrimaryAttributeLT applies the LT predicate on the "primaryAttribute" field.
func PrimaryAttributeLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldPrimaryAttribute, v))
}

// PrimaryAttributeLTE applies the LTE predicate on the "primaryAttribute" field.
func PrimaryAttributeLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldPrimaryAttribute, v))
}

// PrimaryAttributeContains applies the Contains predicate on the "primaryAttribute" field.
func PrimaryAttributeContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldPrimaryAttribute, v))
}

// PrimaryAttributeHasPrefix applies the HasPrefix predicate on the "primaryAttribute" field.
func PrimaryAttributeHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldPrimaryAttribute, v))
}

// PrimaryAttributeHasSuffix applies the HasSuffix predicate on the "primaryAttribute" field.
func PrimaryAttributeHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldPrimaryAttribute, v))
}

// PrimaryAttributeEqualFold applies the EqualFold predicate on the "primaryAttribute" field.
func PrimaryAttributeEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldPrimaryAttribute, v))
}

// PrimaryAttributeContainsFold applies the ContainsFold predicate on the "primaryAttribute" field.
func PrimaryAttributeContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldPrimaryAttribute, v))
}

// CompanyUUIDEQ applies the EQ predicate on the "companyUUID" field.
func CompanyUUIDEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldCompanyUUID, v))
}

// CompanyUUIDNEQ applies the NEQ predicate on the "companyUUID" field.
func CompanyUUIDNEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldCompanyUUID, v))
}

// CompanyUUIDIn applies the In predicate on the "companyUUID" field.
func CompanyUUIDIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldCompanyUUID, vs...))
}

// CompanyUUIDNotIn applies the NotIn predicate on the "companyUUID" field.
func CompanyUUIDNotIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldCompanyUUID, vs...))
}

// ItemBatchUUIDEQ applies the EQ predicate on the "itemBatchUUID" field.
func ItemBatchUUIDEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldItemBatchUUID, v))
}

// ItemBatchUUIDNEQ applies the NEQ predicate on the "itemBatchUUID" field.
func ItemBatchUUIDNEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldItemBatchUUID, v))
}

// ItemBatchUUIDIn applies the In predicate on the "itemBatchUUID" field.
func ItemBatchUUIDIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldItemBatchUUID, vs...))
}

// ItemBatchUUIDNotIn applies the NotIn predicate on the "itemBatchUUID" field.
func ItemBatchUUIDNotIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldItemBatchUUID, vs...))
}

// ImageUUIDEQ applies the EQ predicate on the "imageUUID" field.
func ImageUUIDEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldImageUUID, v))
}

// ImageUUIDNEQ applies the NEQ predicate on the "imageUUID" field.
func ImageUUIDNEQ(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldImageUUID, v))
}

// ImageUUIDIn applies the In predicate on the "imageUUID" field.
func ImageUUIDIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldImageUUID, vs...))
}

// ImageUUIDNotIn applies the NotIn predicate on the "imageUUID" field.
func ImageUUIDNotIn(vs ...uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldImageUUID, vs...))
}

// ImageUUIDGT applies the GT predicate on the "imageUUID" field.
func ImageUUIDGT(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldImageUUID, v))
}

// ImageUUIDGTE applies the GTE predicate on the "imageUUID" field.
func ImageUUIDGTE(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldImageUUID, v))
}

// ImageUUIDLT applies the LT predicate on the "imageUUID" field.
func ImageUUIDLT(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldImageUUID, v))
}

// ImageUUIDLTE applies the LTE predicate on the "imageUUID" field.
func ImageUUIDLTE(v uuid.UUID) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldImageUUID, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItemBatch applies the HasEdge predicate on the "itemBatch" edge.
func HasItemBatch() predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ItemBatchTable, ItemBatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemBatchWith applies the HasEdge predicate on the "itemBatch" edge with a given conditions (other predicates).
func HasItemBatchWith(preds ...predicate.ItemBatch) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemBatchInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ItemBatchTable, ItemBatchColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certification) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		p(s.Not())
	})
}
