// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// CertificationHistoryUpdate is the builder for updating CertificationHistory entities.
type CertificationHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *CertificationHistoryMutation
}

// Where appends a list predicates to the CertificationHistoryUpdate builder.
func (chu *CertificationHistoryUpdate) Where(ps ...predicate.CertificationHistory) *CertificationHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (chu *CertificationHistoryUpdate) SetPrimaryAttribute(s string) *CertificationHistoryUpdate {
	chu.mutation.SetPrimaryAttribute(s)
	return chu
}

// SetCompanyUUID sets the "companyUUID" field.
func (chu *CertificationHistoryUpdate) SetCompanyUUID(u uuid.UUID) *CertificationHistoryUpdate {
	chu.mutation.SetCompanyUUID(u)
	return chu
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (chu *CertificationHistoryUpdate) SetItemBatchUUID(u uuid.UUID) *CertificationHistoryUpdate {
	chu.mutation.SetItemBatchUUID(u)
	return chu
}

// SetImageUUID sets the "imageUUID" field.
func (chu *CertificationHistoryUpdate) SetImageUUID(u uuid.UUID) *CertificationHistoryUpdate {
	chu.mutation.SetImageUUID(u)
	return chu
}

// Mutation returns the CertificationHistoryMutation object of the builder.
func (chu *CertificationHistoryUpdate) Mutation() *CertificationHistoryMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *CertificationHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CertificationHistoryMutation](ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *CertificationHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *CertificationHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *CertificationHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (chu *CertificationHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificationhistory.Table, certificationhistory.Columns, sqlgraph.NewFieldSpec(certificationhistory.FieldID, field.TypeUUID))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chu.mutation.RefCleared() {
		_spec.ClearField(certificationhistory.FieldRef, field.TypeUUID)
	}
	if chu.mutation.UpdatedByCleared() {
		_spec.ClearField(certificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := chu.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certificationhistory.FieldPrimaryAttribute, field.TypeString, value)
	}
	if value, ok := chu.mutation.CompanyUUID(); ok {
		_spec.SetField(certificationhistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	if value, ok := chu.mutation.ItemBatchUUID(); ok {
		_spec.SetField(certificationhistory.FieldItemBatchUUID, field.TypeUUID, value)
	}
	if value, ok := chu.mutation.ImageUUID(); ok {
		_spec.SetField(certificationhistory.FieldImageUUID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// CertificationHistoryUpdateOne is the builder for updating a single CertificationHistory entity.
type CertificationHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificationHistoryMutation
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (chuo *CertificationHistoryUpdateOne) SetPrimaryAttribute(s string) *CertificationHistoryUpdateOne {
	chuo.mutation.SetPrimaryAttribute(s)
	return chuo
}

// SetCompanyUUID sets the "companyUUID" field.
func (chuo *CertificationHistoryUpdateOne) SetCompanyUUID(u uuid.UUID) *CertificationHistoryUpdateOne {
	chuo.mutation.SetCompanyUUID(u)
	return chuo
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (chuo *CertificationHistoryUpdateOne) SetItemBatchUUID(u uuid.UUID) *CertificationHistoryUpdateOne {
	chuo.mutation.SetItemBatchUUID(u)
	return chuo
}

// SetImageUUID sets the "imageUUID" field.
func (chuo *CertificationHistoryUpdateOne) SetImageUUID(u uuid.UUID) *CertificationHistoryUpdateOne {
	chuo.mutation.SetImageUUID(u)
	return chuo
}

// Mutation returns the CertificationHistoryMutation object of the builder.
func (chuo *CertificationHistoryUpdateOne) Mutation() *CertificationHistoryMutation {
	return chuo.mutation
}

// Where appends a list predicates to the CertificationHistoryUpdate builder.
func (chuo *CertificationHistoryUpdateOne) Where(ps ...predicate.CertificationHistory) *CertificationHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *CertificationHistoryUpdateOne) Select(field string, fields ...string) *CertificationHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated CertificationHistory entity.
func (chuo *CertificationHistoryUpdateOne) Save(ctx context.Context) (*CertificationHistory, error) {
	return withHooks[*CertificationHistory, CertificationHistoryMutation](ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *CertificationHistoryUpdateOne) SaveX(ctx context.Context) *CertificationHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *CertificationHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *CertificationHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (chuo *CertificationHistoryUpdateOne) sqlSave(ctx context.Context) (_node *CertificationHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificationhistory.Table, certificationhistory.Columns, sqlgraph.NewFieldSpec(certificationhistory.FieldID, field.TypeUUID))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertificationHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificationhistory.FieldID)
		for _, f := range fields {
			if !certificationhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certificationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chuo.mutation.RefCleared() {
		_spec.ClearField(certificationhistory.FieldRef, field.TypeUUID)
	}
	if chuo.mutation.UpdatedByCleared() {
		_spec.ClearField(certificationhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := chuo.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certificationhistory.FieldPrimaryAttribute, field.TypeString, value)
	}
	if value, ok := chuo.mutation.CompanyUUID(); ok {
		_spec.SetField(certificationhistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	if value, ok := chuo.mutation.ItemBatchUUID(); ok {
		_spec.SetField(certificationhistory.FieldItemBatchUUID, field.TypeUUID, value)
	}
	if value, ok := chuo.mutation.ImageUUID(); ok {
		_spec.SetField(certificationhistory.FieldImageUUID, field.TypeUUID, value)
	}
	_node = &CertificationHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
