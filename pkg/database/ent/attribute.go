// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attribute"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
)

// Attribute is the model entity for the Attribute schema.
type Attribute struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CertUUID holds the value of the "certUUID" field.
	CertUUID uuid.UUID `json:"certUUID,omitempty"`
	// AttributeTypeUUID holds the value of the "attributeTypeUUID" field.
	AttributeTypeUUID uuid.UUID `json:"attributeTypeUUID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeQuery when eager-loading is set.
	Edges AttributeEdges `json:"edges"`
}

// AttributeEdges holds the relations/edges for other nodes in the graph.
type AttributeEdges struct {
	// Certification holds the value of the certification edge.
	Certification *Certification `json:"certification,omitempty"`
	// AttributeType holds the value of the attributeType edge.
	AttributeType *AttributeType `json:"attributeType,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CertificationOrErr returns the Certification value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeEdges) CertificationOrErr() (*Certification, error) {
	if e.loadedTypes[0] {
		if e.Certification == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: certification.Label}
		}
		return e.Certification, nil
	}
	return nil, &NotLoadedError{edge: "certification"}
}

// AttributeTypeOrErr returns the AttributeType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeEdges) AttributeTypeOrErr() (*AttributeType, error) {
	if e.loadedTypes[1] {
		if e.AttributeType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attributetype.Label}
		}
		return e.AttributeType, nil
	}
	return nil, &NotLoadedError{edge: "attributeType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attribute.FieldKey, attribute.FieldValue:
			values[i] = new(sql.NullString)
		case attribute.FieldID, attribute.FieldCertUUID, attribute.FieldAttributeTypeUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attribute", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attribute fields.
func (a *Attribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attribute.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case attribute.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				a.Key = value.String
			}
		case attribute.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = value.String
			}
		case attribute.FieldCertUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field certUUID", values[i])
			} else if value != nil {
				a.CertUUID = *value
			}
		case attribute.FieldAttributeTypeUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field attributeTypeUUID", values[i])
			} else if value != nil {
				a.AttributeTypeUUID = *value
			}
		}
	}
	return nil
}

// QueryCertification queries the "certification" edge of the Attribute entity.
func (a *Attribute) QueryCertification() *CertificationQuery {
	return NewAttributeClient(a.config).QueryCertification(a)
}

// QueryAttributeType queries the "attributeType" edge of the Attribute entity.
func (a *Attribute) QueryAttributeType() *AttributeTypeQuery {
	return NewAttributeClient(a.config).QueryAttributeType(a)
}

// Update returns a builder for updating this Attribute.
// Note that you need to call Attribute.Unwrap() before calling this method if this Attribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attribute) Update() *AttributeUpdateOne {
	return NewAttributeClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attribute) Unwrap() *Attribute {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attribute is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attribute) String() string {
	var builder strings.Builder
	builder.WriteString("Attribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("key=")
	builder.WriteString(a.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(a.Value)
	builder.WriteString(", ")
	builder.WriteString("certUUID=")
	builder.WriteString(fmt.Sprintf("%v", a.CertUUID))
	builder.WriteString(", ")
	builder.WriteString("attributeTypeUUID=")
	builder.WriteString(fmt.Sprintf("%v", a.AttributeTypeUUID))
	builder.WriteByte(')')
	return builder.String()
}

// Attributes is a parsable slice of Attribute.
type Attributes []*Attribute
