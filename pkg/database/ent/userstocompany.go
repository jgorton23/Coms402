// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/user"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userstocompany"
)

// UsersToCompany is the model entity for the UsersToCompany schema.
type UsersToCompany struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CompanyUUID holds the value of the "companyUUID" field.
	CompanyUUID uuid.UUID `json:"companyUUID,omitempty"`
	// UserUUID holds the value of the "userUUID" field.
	UserUUID int `json:"userUUID,omitempty"`
	// RoleType holds the value of the "roleType" field.
	RoleType string `json:"roleType,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersToCompanyQuery when eager-loading is set.
	Edges UsersToCompanyEdges `json:"edges"`
}

// UsersToCompanyEdges holds the relations/edges for other nodes in the graph.
type UsersToCompanyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersToCompanyEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersToCompanyEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[1] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsersToCompany) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstocompany.FieldApproved:
			values[i] = new(sql.NullBool)
		case userstocompany.FieldUserUUID:
			values[i] = new(sql.NullInt64)
		case userstocompany.FieldRoleType:
			values[i] = new(sql.NullString)
		case userstocompany.FieldID, userstocompany.FieldCompanyUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UsersToCompany", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsersToCompany fields.
func (utc *UsersToCompany) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstocompany.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				utc.ID = *value
			}
		case userstocompany.FieldCompanyUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field companyUUID", values[i])
			} else if value != nil {
				utc.CompanyUUID = *value
			}
		case userstocompany.FieldUserUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userUUID", values[i])
			} else if value.Valid {
				utc.UserUUID = int(value.Int64)
			}
		case userstocompany.FieldRoleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roleType", values[i])
			} else if value.Valid {
				utc.RoleType = value.String
			}
		case userstocompany.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				utc.Approved = value.Bool
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UsersToCompany entity.
func (utc *UsersToCompany) QueryUser() *UserQuery {
	return NewUsersToCompanyClient(utc.config).QueryUser(utc)
}

// QueryCompany queries the "company" edge of the UsersToCompany entity.
func (utc *UsersToCompany) QueryCompany() *CompanyQuery {
	return NewUsersToCompanyClient(utc.config).QueryCompany(utc)
}

// Update returns a builder for updating this UsersToCompany.
// Note that you need to call UsersToCompany.Unwrap() before calling this method if this UsersToCompany
// was returned from a transaction, and the transaction was committed or rolled back.
func (utc *UsersToCompany) Update() *UsersToCompanyUpdateOne {
	return NewUsersToCompanyClient(utc.config).UpdateOne(utc)
}

// Unwrap unwraps the UsersToCompany entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utc *UsersToCompany) Unwrap() *UsersToCompany {
	_tx, ok := utc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsersToCompany is not a transactional entity")
	}
	utc.config.driver = _tx.drv
	return utc
}

// String implements the fmt.Stringer.
func (utc *UsersToCompany) String() string {
	var builder strings.Builder
	builder.WriteString("UsersToCompany(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utc.ID))
	builder.WriteString("companyUUID=")
	builder.WriteString(fmt.Sprintf("%v", utc.CompanyUUID))
	builder.WriteString(", ")
	builder.WriteString("userUUID=")
	builder.WriteString(fmt.Sprintf("%v", utc.UserUUID))
	builder.WriteString(", ")
	builder.WriteString("roleType=")
	builder.WriteString(utc.RoleType)
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", utc.Approved))
	builder.WriteByte(')')
	return builder.String()
}

// UsersToCompanies is a parsable slice of UsersToCompany.
type UsersToCompanies []*UsersToCompany
