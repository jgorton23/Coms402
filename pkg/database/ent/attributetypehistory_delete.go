// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// AttributeTypeHistoryDelete is the builder for deleting a AttributeTypeHistory entity.
type AttributeTypeHistoryDelete struct {
	config
	hooks    []Hook
	mutation *AttributeTypeHistoryMutation
}

// Where appends a list predicates to the AttributeTypeHistoryDelete builder.
func (athd *AttributeTypeHistoryDelete) Where(ps ...predicate.AttributeTypeHistory) *AttributeTypeHistoryDelete {
	athd.mutation.Where(ps...)
	return athd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (athd *AttributeTypeHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, AttributeTypeHistoryMutation](ctx, athd.sqlExec, athd.mutation, athd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (athd *AttributeTypeHistoryDelete) ExecX(ctx context.Context) int {
	n, err := athd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (athd *AttributeTypeHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(attributetypehistory.Table, sqlgraph.NewFieldSpec(attributetypehistory.FieldID, field.TypeUUID))
	if ps := athd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, athd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	athd.mutation.done = true
	return affected, err
}

// AttributeTypeHistoryDeleteOne is the builder for deleting a single AttributeTypeHistory entity.
type AttributeTypeHistoryDeleteOne struct {
	athd *AttributeTypeHistoryDelete
}

// Where appends a list predicates to the AttributeTypeHistoryDelete builder.
func (athdo *AttributeTypeHistoryDeleteOne) Where(ps ...predicate.AttributeTypeHistory) *AttributeTypeHistoryDeleteOne {
	athdo.athd.mutation.Where(ps...)
	return athdo
}

// Exec executes the deletion query.
func (athdo *AttributeTypeHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := athdo.athd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{attributetypehistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (athdo *AttributeTypeHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := athdo.Exec(ctx); err != nil {
		panic(err)
	}
}
