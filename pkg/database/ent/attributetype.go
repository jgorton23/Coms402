// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
)

// AttributeType is the model entity for the AttributeType schema.
type AttributeType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// CompanyUUID holds the value of the "companyUUID" field.
	CompanyUUID uuid.UUID `json:"companyUUID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeTypeQuery when eager-loading is set.
	Edges AttributeTypeEdges `json:"edges"`
}

// AttributeTypeEdges holds the relations/edges for other nodes in the graph.
type AttributeTypeEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeTypeEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributetype.FieldKey:
			values[i] = new(sql.NullString)
		case attributetype.FieldID, attributetype.FieldCompanyUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AttributeType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeType fields.
func (at *AttributeType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributetype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case attributetype.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				at.Key = value.String
			}
		case attributetype.FieldCompanyUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field companyUUID", values[i])
			} else if value != nil {
				at.CompanyUUID = *value
			}
		}
	}
	return nil
}

// QueryCompany queries the "company" edge of the AttributeType entity.
func (at *AttributeType) QueryCompany() *CompanyQuery {
	return NewAttributeTypeClient(at.config).QueryCompany(at)
}

// Update returns a builder for updating this AttributeType.
// Note that you need to call AttributeType.Unwrap() before calling this method if this AttributeType
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AttributeType) Update() *AttributeTypeUpdateOne {
	return NewAttributeTypeClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AttributeType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AttributeType) Unwrap() *AttributeType {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeType is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AttributeType) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("key=")
	builder.WriteString(at.Key)
	builder.WriteString(", ")
	builder.WriteString("companyUUID=")
	builder.WriteString(fmt.Sprintf("%v", at.CompanyUUID))
	builder.WriteByte(')')
	return builder.String()
}

// AttributeTypes is a parsable slice of AttributeType.
type AttributeTypes []*AttributeType
