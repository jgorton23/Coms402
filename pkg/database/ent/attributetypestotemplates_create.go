// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypestotemplates"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplate"
	"github.com/google/uuid"
)

// AttributeTypesToTemplatesCreate is the builder for creating a AttributeTypesToTemplates entity.
type AttributeTypesToTemplatesCreate struct {
	config
	mutation *AttributeTypesToTemplatesMutation
	hooks    []Hook
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (atttc *AttributeTypesToTemplatesCreate) SetAttributeTypeUUID(u uuid.UUID) *AttributeTypesToTemplatesCreate {
	atttc.mutation.SetAttributeTypeUUID(u)
	return atttc
}

// SetTemplateUUID sets the "templateUUID" field.
func (atttc *AttributeTypesToTemplatesCreate) SetTemplateUUID(u uuid.UUID) *AttributeTypesToTemplatesCreate {
	atttc.mutation.SetTemplateUUID(u)
	return atttc
}

// SetID sets the "id" field.
func (atttc *AttributeTypesToTemplatesCreate) SetID(u uuid.UUID) *AttributeTypesToTemplatesCreate {
	atttc.mutation.SetID(u)
	return atttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atttc *AttributeTypesToTemplatesCreate) SetNillableID(u *uuid.UUID) *AttributeTypesToTemplatesCreate {
	if u != nil {
		atttc.SetID(*u)
	}
	return atttc
}

// SetAttributeID sets the "attribute" edge to the AttributeType entity by ID.
func (atttc *AttributeTypesToTemplatesCreate) SetAttributeID(id uuid.UUID) *AttributeTypesToTemplatesCreate {
	atttc.mutation.SetAttributeID(id)
	return atttc
}

// SetAttribute sets the "attribute" edge to the AttributeType entity.
func (atttc *AttributeTypesToTemplatesCreate) SetAttribute(a *AttributeType) *AttributeTypesToTemplatesCreate {
	return atttc.SetAttributeID(a.ID)
}

// SetTemplateID sets the "template" edge to the CertificationTemplate entity by ID.
func (atttc *AttributeTypesToTemplatesCreate) SetTemplateID(id uuid.UUID) *AttributeTypesToTemplatesCreate {
	atttc.mutation.SetTemplateID(id)
	return atttc
}

// SetTemplate sets the "template" edge to the CertificationTemplate entity.
func (atttc *AttributeTypesToTemplatesCreate) SetTemplate(c *CertificationTemplate) *AttributeTypesToTemplatesCreate {
	return atttc.SetTemplateID(c.ID)
}

// Mutation returns the AttributeTypesToTemplatesMutation object of the builder.
func (atttc *AttributeTypesToTemplatesCreate) Mutation() *AttributeTypesToTemplatesMutation {
	return atttc.mutation
}

// Save creates the AttributeTypesToTemplates in the database.
func (atttc *AttributeTypesToTemplatesCreate) Save(ctx context.Context) (*AttributeTypesToTemplates, error) {
	var (
		err  error
		node *AttributeTypesToTemplates
	)
	atttc.defaults()
	if len(atttc.hooks) == 0 {
		if err = atttc.check(); err != nil {
			return nil, err
		}
		node, err = atttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeTypesToTemplatesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atttc.check(); err != nil {
				return nil, err
			}
			atttc.mutation = mutation
			if node, err = atttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atttc.hooks) - 1; i >= 0; i-- {
			if atttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atttc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atttc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AttributeTypesToTemplates)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttributeTypesToTemplatesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atttc *AttributeTypesToTemplatesCreate) SaveX(ctx context.Context) *AttributeTypesToTemplates {
	v, err := atttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atttc *AttributeTypesToTemplatesCreate) Exec(ctx context.Context) error {
	_, err := atttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atttc *AttributeTypesToTemplatesCreate) ExecX(ctx context.Context) {
	if err := atttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atttc *AttributeTypesToTemplatesCreate) defaults() {
	if _, ok := atttc.mutation.ID(); !ok {
		v := attributetypestotemplates.DefaultID()
		atttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atttc *AttributeTypesToTemplatesCreate) check() error {
	if _, ok := atttc.mutation.AttributeTypeUUID(); !ok {
		return &ValidationError{Name: "attributeTypeUUID", err: errors.New(`ent: missing required field "AttributeTypesToTemplates.attributeTypeUUID"`)}
	}
	if _, ok := atttc.mutation.TemplateUUID(); !ok {
		return &ValidationError{Name: "templateUUID", err: errors.New(`ent: missing required field "AttributeTypesToTemplates.templateUUID"`)}
	}
	if _, ok := atttc.mutation.AttributeID(); !ok {
		return &ValidationError{Name: "attribute", err: errors.New(`ent: missing required edge "AttributeTypesToTemplates.attribute"`)}
	}
	if _, ok := atttc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "AttributeTypesToTemplates.template"`)}
	}
	return nil
}

func (atttc *AttributeTypesToTemplatesCreate) sqlSave(ctx context.Context) (*AttributeTypesToTemplates, error) {
	_node, _spec := atttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (atttc *AttributeTypesToTemplatesCreate) createSpec() (*AttributeTypesToTemplates, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeTypesToTemplates{config: atttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attributetypestotemplates.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: attributetypestotemplates.FieldID,
			},
		}
	)
	if id, ok := atttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := atttc.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.AttributeTable,
			Columns: []string{attributetypestotemplates.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attributetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeTypeUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atttc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.TemplateTable,
			Columns: []string{attributetypestotemplates.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttributeTypesToTemplatesCreateBulk is the builder for creating many AttributeTypesToTemplates entities in bulk.
type AttributeTypesToTemplatesCreateBulk struct {
	config
	builders []*AttributeTypesToTemplatesCreate
}

// Save creates the AttributeTypesToTemplates entities in the database.
func (atttcb *AttributeTypesToTemplatesCreateBulk) Save(ctx context.Context) ([]*AttributeTypesToTemplates, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atttcb.builders))
	nodes := make([]*AttributeTypesToTemplates, len(atttcb.builders))
	mutators := make([]Mutator, len(atttcb.builders))
	for i := range atttcb.builders {
		func(i int, root context.Context) {
			builder := atttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeTypesToTemplatesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atttcb *AttributeTypesToTemplatesCreateBulk) SaveX(ctx context.Context) []*AttributeTypesToTemplates {
	v, err := atttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atttcb *AttributeTypesToTemplatesCreateBulk) Exec(ctx context.Context) error {
	_, err := atttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atttcb *AttributeTypesToTemplatesCreateBulk) ExecX(ctx context.Context) {
	if err := atttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
