// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatch"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchtoitembatch"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ItemBatchToItemBatchUpdate is the builder for updating ItemBatchToItemBatch entities.
type ItemBatchToItemBatchUpdate struct {
	config
	hooks    []Hook
	mutation *ItemBatchToItemBatchMutation
}

// Where appends a list predicates to the ItemBatchToItemBatchUpdate builder.
func (ibtibu *ItemBatchToItemBatchUpdate) Where(ps ...predicate.ItemBatchToItemBatch) *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.Where(ps...)
	return ibtibu
}

// SetChildUUID sets the "childUUID" field.
func (ibtibu *ItemBatchToItemBatchUpdate) SetChildUUID(u uuid.UUID) *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.SetChildUUID(u)
	return ibtibu
}

// SetParentUUID sets the "parentUUID" field.
func (ibtibu *ItemBatchToItemBatchUpdate) SetParentUUID(u uuid.UUID) *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.SetParentUUID(u)
	return ibtibu
}

// SetParentID sets the "parent" edge to the ItemBatch entity by ID.
func (ibtibu *ItemBatchToItemBatchUpdate) SetParentID(id uuid.UUID) *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.SetParentID(id)
	return ibtibu
}

// SetParent sets the "parent" edge to the ItemBatch entity.
func (ibtibu *ItemBatchToItemBatchUpdate) SetParent(i *ItemBatch) *ItemBatchToItemBatchUpdate {
	return ibtibu.SetParentID(i.ID)
}

// SetChildID sets the "child" edge to the ItemBatch entity by ID.
func (ibtibu *ItemBatchToItemBatchUpdate) SetChildID(id uuid.UUID) *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.SetChildID(id)
	return ibtibu
}

// SetChild sets the "child" edge to the ItemBatch entity.
func (ibtibu *ItemBatchToItemBatchUpdate) SetChild(i *ItemBatch) *ItemBatchToItemBatchUpdate {
	return ibtibu.SetChildID(i.ID)
}

// Mutation returns the ItemBatchToItemBatchMutation object of the builder.
func (ibtibu *ItemBatchToItemBatchUpdate) Mutation() *ItemBatchToItemBatchMutation {
	return ibtibu.mutation
}

// ClearParent clears the "parent" edge to the ItemBatch entity.
func (ibtibu *ItemBatchToItemBatchUpdate) ClearParent() *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.ClearParent()
	return ibtibu
}

// ClearChild clears the "child" edge to the ItemBatch entity.
func (ibtibu *ItemBatchToItemBatchUpdate) ClearChild() *ItemBatchToItemBatchUpdate {
	ibtibu.mutation.ClearChild()
	return ibtibu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ibtibu *ItemBatchToItemBatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ItemBatchToItemBatchMutation](ctx, ibtibu.sqlSave, ibtibu.mutation, ibtibu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibtibu *ItemBatchToItemBatchUpdate) SaveX(ctx context.Context) int {
	affected, err := ibtibu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ibtibu *ItemBatchToItemBatchUpdate) Exec(ctx context.Context) error {
	_, err := ibtibu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibu *ItemBatchToItemBatchUpdate) ExecX(ctx context.Context) {
	if err := ibtibu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibtibu *ItemBatchToItemBatchUpdate) check() error {
	if _, ok := ibtibu.mutation.ParentID(); ibtibu.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemBatchToItemBatch.parent"`)
	}
	if _, ok := ibtibu.mutation.ChildID(); ibtibu.mutation.ChildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemBatchToItemBatch.child"`)
	}
	return nil
}

func (ibtibu *ItemBatchToItemBatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ibtibu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(itembatchtoitembatch.Table, itembatchtoitembatch.Columns, sqlgraph.NewFieldSpec(itembatchtoitembatch.FieldID, field.TypeUUID))
	if ps := ibtibu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ibtibu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ParentTable,
			Columns: []string{itembatchtoitembatch.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtibu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ParentTable,
			Columns: []string{itembatchtoitembatch.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ibtibu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ChildTable,
			Columns: []string{itembatchtoitembatch.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtibu.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ChildTable,
			Columns: []string{itembatchtoitembatch.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ibtibu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itembatchtoitembatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ibtibu.mutation.done = true
	return n, nil
}

// ItemBatchToItemBatchUpdateOne is the builder for updating a single ItemBatchToItemBatch entity.
type ItemBatchToItemBatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemBatchToItemBatchMutation
}

// SetChildUUID sets the "childUUID" field.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetChildUUID(u uuid.UUID) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.SetChildUUID(u)
	return ibtibuo
}

// SetParentUUID sets the "parentUUID" field.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetParentUUID(u uuid.UUID) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.SetParentUUID(u)
	return ibtibuo
}

// SetParentID sets the "parent" edge to the ItemBatch entity by ID.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetParentID(id uuid.UUID) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.SetParentID(id)
	return ibtibuo
}

// SetParent sets the "parent" edge to the ItemBatch entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetParent(i *ItemBatch) *ItemBatchToItemBatchUpdateOne {
	return ibtibuo.SetParentID(i.ID)
}

// SetChildID sets the "child" edge to the ItemBatch entity by ID.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetChildID(id uuid.UUID) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.SetChildID(id)
	return ibtibuo
}

// SetChild sets the "child" edge to the ItemBatch entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SetChild(i *ItemBatch) *ItemBatchToItemBatchUpdateOne {
	return ibtibuo.SetChildID(i.ID)
}

// Mutation returns the ItemBatchToItemBatchMutation object of the builder.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) Mutation() *ItemBatchToItemBatchMutation {
	return ibtibuo.mutation
}

// ClearParent clears the "parent" edge to the ItemBatch entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) ClearParent() *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.ClearParent()
	return ibtibuo
}

// ClearChild clears the "child" edge to the ItemBatch entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) ClearChild() *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.ClearChild()
	return ibtibuo
}

// Where appends a list predicates to the ItemBatchToItemBatchUpdate builder.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) Where(ps ...predicate.ItemBatchToItemBatch) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.mutation.Where(ps...)
	return ibtibuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) Select(field string, fields ...string) *ItemBatchToItemBatchUpdateOne {
	ibtibuo.fields = append([]string{field}, fields...)
	return ibtibuo
}

// Save executes the query and returns the updated ItemBatchToItemBatch entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) Save(ctx context.Context) (*ItemBatchToItemBatch, error) {
	return withHooks[*ItemBatchToItemBatch, ItemBatchToItemBatchMutation](ctx, ibtibuo.sqlSave, ibtibuo.mutation, ibtibuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) SaveX(ctx context.Context) *ItemBatchToItemBatch {
	node, err := ibtibuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) Exec(ctx context.Context) error {
	_, err := ibtibuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) ExecX(ctx context.Context) {
	if err := ibtibuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibtibuo *ItemBatchToItemBatchUpdateOne) check() error {
	if _, ok := ibtibuo.mutation.ParentID(); ibtibuo.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemBatchToItemBatch.parent"`)
	}
	if _, ok := ibtibuo.mutation.ChildID(); ibtibuo.mutation.ChildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemBatchToItemBatch.child"`)
	}
	return nil
}

func (ibtibuo *ItemBatchToItemBatchUpdateOne) sqlSave(ctx context.Context) (_node *ItemBatchToItemBatch, err error) {
	if err := ibtibuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(itembatchtoitembatch.Table, itembatchtoitembatch.Columns, sqlgraph.NewFieldSpec(itembatchtoitembatch.FieldID, field.TypeUUID))
	id, ok := ibtibuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ItemBatchToItemBatch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibtibuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itembatchtoitembatch.FieldID)
		for _, f := range fields {
			if !itembatchtoitembatch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itembatchtoitembatch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibtibuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ibtibuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ParentTable,
			Columns: []string{itembatchtoitembatch.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtibuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ParentTable,
			Columns: []string{itembatchtoitembatch.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ibtibuo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ChildTable,
			Columns: []string{itembatchtoitembatch.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibtibuo.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itembatchtoitembatch.ChildTable,
			Columns: []string{itembatchtoitembatch.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itembatch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemBatchToItemBatch{config: ibtibuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibtibuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itembatchtoitembatch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ibtibuo.mutation.done = true
	return _node, nil
}
