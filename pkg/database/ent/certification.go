// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatch"
)

// Certification is the model entity for the Certification schema.
type Certification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PrimaryAttribute holds the value of the "primaryAttribute" field.
	PrimaryAttribute string `json:"primaryAttribute,omitempty"`
	// CompanyUUID holds the value of the "companyUUID" field.
	CompanyUUID uuid.UUID `json:"companyUUID,omitempty"`
	// ItemBatchUUID holds the value of the "itemBatchUUID" field.
	ItemBatchUUID uuid.UUID `json:"itemBatchUUID,omitempty"`
	// ImageUUID holds the value of the "imageUUID" field.
	ImageUUID uuid.UUID `json:"imageUUID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificationQuery when eager-loading is set.
	Edges CertificationEdges `json:"edges"`
}

// CertificationEdges holds the relations/edges for other nodes in the graph.
type CertificationEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// ItemBatch holds the value of the itemBatch edge.
	ItemBatch *ItemBatch `json:"itemBatch,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// ItemBatchOrErr returns the ItemBatch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) ItemBatchOrErr() (*ItemBatch, error) {
	if e.loadedTypes[1] {
		if e.ItemBatch == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: itembatch.Label}
		}
		return e.ItemBatch, nil
	}
	return nil, &NotLoadedError{edge: "itemBatch"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certification.FieldPrimaryAttribute:
			values[i] = new(sql.NullString)
		case certification.FieldID, certification.FieldCompanyUUID, certification.FieldItemBatchUUID, certification.FieldImageUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Certification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certification fields.
func (c *Certification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case certification.FieldPrimaryAttribute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primaryAttribute", values[i])
			} else if value.Valid {
				c.PrimaryAttribute = value.String
			}
		case certification.FieldCompanyUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field companyUUID", values[i])
			} else if value != nil {
				c.CompanyUUID = *value
			}
		case certification.FieldItemBatchUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field itemBatchUUID", values[i])
			} else if value != nil {
				c.ItemBatchUUID = *value
			}
		case certification.FieldImageUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field imageUUID", values[i])
			} else if value != nil {
				c.ImageUUID = *value
			}
		}
	}
	return nil
}

// QueryCompany queries the "company" edge of the Certification entity.
func (c *Certification) QueryCompany() *CompanyQuery {
	return NewCertificationClient(c.config).QueryCompany(c)
}

// QueryItemBatch queries the "itemBatch" edge of the Certification entity.
func (c *Certification) QueryItemBatch() *ItemBatchQuery {
	return NewCertificationClient(c.config).QueryItemBatch(c)
}

// Update returns a builder for updating this Certification.
// Note that you need to call Certification.Unwrap() before calling this method if this Certification
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certification) Update() *CertificationUpdateOne {
	return NewCertificationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certification) Unwrap() *Certification {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certification is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certification) String() string {
	var builder strings.Builder
	builder.WriteString("Certification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("primaryAttribute=")
	builder.WriteString(c.PrimaryAttribute)
	builder.WriteString(", ")
	builder.WriteString("companyUUID=")
	builder.WriteString(fmt.Sprintf("%v", c.CompanyUUID))
	builder.WriteString(", ")
	builder.WriteString("itemBatchUUID=")
	builder.WriteString(fmt.Sprintf("%v", c.ItemBatchUUID))
	builder.WriteString(", ")
	builder.WriteString("imageUUID=")
	builder.WriteString(fmt.Sprintf("%v", c.ImageUUID))
	builder.WriteByte(')')
	return builder.String()
}

// Certifications is a parsable slice of Certification.
type Certifications []*Certification
