// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplate"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"github.com/google/uuid"
)

// CertificationTemplateCreate is the builder for creating a CertificationTemplate entity.
type CertificationTemplateCreate struct {
	config
	mutation *CertificationTemplateMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (ctc *CertificationTemplateCreate) SetDescription(s string) *CertificationTemplateCreate {
	ctc.mutation.SetDescription(s)
	return ctc
}

// SetCompanyUUID sets the "companyUUID" field.
func (ctc *CertificationTemplateCreate) SetCompanyUUID(u uuid.UUID) *CertificationTemplateCreate {
	ctc.mutation.SetCompanyUUID(u)
	return ctc
}

// SetID sets the "id" field.
func (ctc *CertificationTemplateCreate) SetID(u uuid.UUID) *CertificationTemplateCreate {
	ctc.mutation.SetID(u)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *CertificationTemplateCreate) SetNillableID(u *uuid.UUID) *CertificationTemplateCreate {
	if u != nil {
		ctc.SetID(*u)
	}
	return ctc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ctc *CertificationTemplateCreate) SetCompanyID(id uuid.UUID) *CertificationTemplateCreate {
	ctc.mutation.SetCompanyID(id)
	return ctc
}

// SetCompany sets the "company" edge to the Company entity.
func (ctc *CertificationTemplateCreate) SetCompany(c *Company) *CertificationTemplateCreate {
	return ctc.SetCompanyID(c.ID)
}

// Mutation returns the CertificationTemplateMutation object of the builder.
func (ctc *CertificationTemplateCreate) Mutation() *CertificationTemplateMutation {
	return ctc.mutation
}

// Save creates the CertificationTemplate in the database.
func (ctc *CertificationTemplateCreate) Save(ctx context.Context) (*CertificationTemplate, error) {
	var (
		err  error
		node *CertificationTemplate
	)
	ctc.defaults()
	if len(ctc.hooks) == 0 {
		if err = ctc.check(); err != nil {
			return nil, err
		}
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CertificationTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctc.check(); err != nil {
				return nil, err
			}
			ctc.mutation = mutation
			if node, err = ctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			if ctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CertificationTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CertificationTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CertificationTemplateCreate) SaveX(ctx context.Context) *CertificationTemplate {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CertificationTemplateCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CertificationTemplateCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CertificationTemplateCreate) defaults() {
	if _, ok := ctc.mutation.ID(); !ok {
		v := certificationtemplate.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CertificationTemplateCreate) check() error {
	if _, ok := ctc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "CertificationTemplate.description"`)}
	}
	if _, ok := ctc.mutation.CompanyUUID(); !ok {
		return &ValidationError{Name: "companyUUID", err: errors.New(`ent: missing required field "CertificationTemplate.companyUUID"`)}
	}
	if _, ok := ctc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "CertificationTemplate.company"`)}
	}
	return nil
}

func (ctc *CertificationTemplateCreate) sqlSave(ctx context.Context) (*CertificationTemplate, error) {
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ctc *CertificationTemplateCreate) createSpec() (*CertificationTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &CertificationTemplate{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: certificationtemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: certificationtemplate.FieldID,
			},
		}
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctc.mutation.Description(); ok {
		_spec.SetField(certificationtemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ctc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certificationtemplate.CompanyTable,
			Columns: []string{certificationtemplate.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificationTemplateCreateBulk is the builder for creating many CertificationTemplate entities in bulk.
type CertificationTemplateCreateBulk struct {
	config
	builders []*CertificationTemplateCreate
}

// Save creates the CertificationTemplate entities in the database.
func (ctcb *CertificationTemplateCreateBulk) Save(ctx context.Context) ([]*CertificationTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CertificationTemplate, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CertificationTemplateCreateBulk) SaveX(ctx context.Context) []*CertificationTemplate {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CertificationTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CertificationTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
