// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userstocompanyhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// UsersToCompanyHistory is the model entity for the UsersToCompanyHistory schema.
type UsersToCompanyHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref uuid.UUID `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// CompanyUUID holds the value of the "companyUUID" field.
	CompanyUUID uuid.UUID `json:"companyUUID,omitempty"`
	// UserUUID holds the value of the "userUUID" field.
	UserUUID uuid.UUID `json:"userUUID,omitempty"`
	// RoleType holds the value of the "roleType" field.
	RoleType string `json:"roleType,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsersToCompanyHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstocompanyhistory.FieldApproved:
			values[i] = new(sql.NullBool)
		case userstocompanyhistory.FieldOperation, userstocompanyhistory.FieldUpdatedBy, userstocompanyhistory.FieldRoleType:
			values[i] = new(sql.NullString)
		case userstocompanyhistory.FieldHistoryTime:
			values[i] = new(sql.NullTime)
		case userstocompanyhistory.FieldID, userstocompanyhistory.FieldRef, userstocompanyhistory.FieldCompanyUUID, userstocompanyhistory.FieldUserUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UsersToCompanyHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsersToCompanyHistory fields.
func (utch *UsersToCompanyHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstocompanyhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				utch.ID = *value
			}
		case userstocompanyhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				utch.HistoryTime = value.Time
			}
		case userstocompanyhistory.FieldRef:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value != nil {
				utch.Ref = *value
			}
		case userstocompanyhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				utch.Operation = enthistory.OpType(value.String)
			}
		case userstocompanyhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				utch.UpdatedBy = new(string)
				*utch.UpdatedBy = value.String
			}
		case userstocompanyhistory.FieldCompanyUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field companyUUID", values[i])
			} else if value != nil {
				utch.CompanyUUID = *value
			}
		case userstocompanyhistory.FieldUserUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field userUUID", values[i])
			} else if value != nil {
				utch.UserUUID = *value
			}
		case userstocompanyhistory.FieldRoleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roleType", values[i])
			} else if value.Valid {
				utch.RoleType = value.String
			}
		case userstocompanyhistory.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				utch.Approved = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UsersToCompanyHistory.
// Note that you need to call UsersToCompanyHistory.Unwrap() before calling this method if this UsersToCompanyHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (utch *UsersToCompanyHistory) Update() *UsersToCompanyHistoryUpdateOne {
	return NewUsersToCompanyHistoryClient(utch.config).UpdateOne(utch)
}

// Unwrap unwraps the UsersToCompanyHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utch *UsersToCompanyHistory) Unwrap() *UsersToCompanyHistory {
	_tx, ok := utch.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsersToCompanyHistory is not a transactional entity")
	}
	utch.config.driver = _tx.drv
	return utch
}

// String implements the fmt.Stringer.
func (utch *UsersToCompanyHistory) String() string {
	var builder strings.Builder
	builder.WriteString("UsersToCompanyHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utch.ID))
	builder.WriteString("history_time=")
	builder.WriteString(utch.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(fmt.Sprintf("%v", utch.Ref))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", utch.Operation))
	builder.WriteString(", ")
	if v := utch.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("companyUUID=")
	builder.WriteString(fmt.Sprintf("%v", utch.CompanyUUID))
	builder.WriteString(", ")
	builder.WriteString("userUUID=")
	builder.WriteString(fmt.Sprintf("%v", utch.UserUUID))
	builder.WriteString(", ")
	builder.WriteString("roleType=")
	builder.WriteString(utch.RoleType)
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", utch.Approved))
	builder.WriteByte(')')
	return builder.String()
}

// UsersToCompanyHistories is a parsable slice of UsersToCompanyHistory.
type UsersToCompanyHistories []*UsersToCompanyHistory
