// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// AttributeHistoryUpdate is the builder for updating AttributeHistory entities.
type AttributeHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeHistoryMutation
}

// Where appends a list predicates to the AttributeHistoryUpdate builder.
func (ahu *AttributeHistoryUpdate) Where(ps ...predicate.AttributeHistory) *AttributeHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetKey sets the "key" field.
func (ahu *AttributeHistoryUpdate) SetKey(s string) *AttributeHistoryUpdate {
	ahu.mutation.SetKey(s)
	return ahu
}

// SetValue sets the "value" field.
func (ahu *AttributeHistoryUpdate) SetValue(s string) *AttributeHistoryUpdate {
	ahu.mutation.SetValue(s)
	return ahu
}

// SetCertUUID sets the "certUUID" field.
func (ahu *AttributeHistoryUpdate) SetCertUUID(u uuid.UUID) *AttributeHistoryUpdate {
	ahu.mutation.SetCertUUID(u)
	return ahu
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (ahu *AttributeHistoryUpdate) SetAttributeTypeUUID(u uuid.UUID) *AttributeHistoryUpdate {
	ahu.mutation.SetAttributeTypeUUID(u)
	return ahu
}

// Mutation returns the AttributeHistoryMutation object of the builder.
func (ahu *AttributeHistoryUpdate) Mutation() *AttributeHistoryMutation {
	return ahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AttributeHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AttributeHistoryMutation](ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AttributeHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AttributeHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AttributeHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahu *AttributeHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributehistory.Table, attributehistory.Columns, sqlgraph.NewFieldSpec(attributehistory.FieldID, field.TypeUUID))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ahu.mutation.RefCleared() {
		_spec.ClearField(attributehistory.FieldRef, field.TypeUUID)
	}
	if ahu.mutation.UpdatedByCleared() {
		_spec.ClearField(attributehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ahu.mutation.Key(); ok {
		_spec.SetField(attributehistory.FieldKey, field.TypeString, value)
	}
	if value, ok := ahu.mutation.Value(); ok {
		_spec.SetField(attributehistory.FieldValue, field.TypeString, value)
	}
	if value, ok := ahu.mutation.CertUUID(); ok {
		_spec.SetField(attributehistory.FieldCertUUID, field.TypeUUID, value)
	}
	if value, ok := ahu.mutation.AttributeTypeUUID(); ok {
		_spec.SetField(attributehistory.FieldAttributeTypeUUID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AttributeHistoryUpdateOne is the builder for updating a single AttributeHistory entity.
type AttributeHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeHistoryMutation
}

// SetKey sets the "key" field.
func (ahuo *AttributeHistoryUpdateOne) SetKey(s string) *AttributeHistoryUpdateOne {
	ahuo.mutation.SetKey(s)
	return ahuo
}

// SetValue sets the "value" field.
func (ahuo *AttributeHistoryUpdateOne) SetValue(s string) *AttributeHistoryUpdateOne {
	ahuo.mutation.SetValue(s)
	return ahuo
}

// SetCertUUID sets the "certUUID" field.
func (ahuo *AttributeHistoryUpdateOne) SetCertUUID(u uuid.UUID) *AttributeHistoryUpdateOne {
	ahuo.mutation.SetCertUUID(u)
	return ahuo
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (ahuo *AttributeHistoryUpdateOne) SetAttributeTypeUUID(u uuid.UUID) *AttributeHistoryUpdateOne {
	ahuo.mutation.SetAttributeTypeUUID(u)
	return ahuo
}

// Mutation returns the AttributeHistoryMutation object of the builder.
func (ahuo *AttributeHistoryUpdateOne) Mutation() *AttributeHistoryMutation {
	return ahuo.mutation
}

// Where appends a list predicates to the AttributeHistoryUpdate builder.
func (ahuo *AttributeHistoryUpdateOne) Where(ps ...predicate.AttributeHistory) *AttributeHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AttributeHistoryUpdateOne) Select(field string, fields ...string) *AttributeHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AttributeHistory entity.
func (ahuo *AttributeHistoryUpdateOne) Save(ctx context.Context) (*AttributeHistory, error) {
	return withHooks[*AttributeHistory, AttributeHistoryMutation](ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AttributeHistoryUpdateOne) SaveX(ctx context.Context) *AttributeHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AttributeHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AttributeHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahuo *AttributeHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AttributeHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributehistory.Table, attributehistory.Columns, sqlgraph.NewFieldSpec(attributehistory.FieldID, field.TypeUUID))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributehistory.FieldID)
		for _, f := range fields {
			if !attributehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ahuo.mutation.RefCleared() {
		_spec.ClearField(attributehistory.FieldRef, field.TypeUUID)
	}
	if ahuo.mutation.UpdatedByCleared() {
		_spec.ClearField(attributehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ahuo.mutation.Key(); ok {
		_spec.SetField(attributehistory.FieldKey, field.TypeString, value)
	}
	if value, ok := ahuo.mutation.Value(); ok {
		_spec.SetField(attributehistory.FieldValue, field.TypeString, value)
	}
	if value, ok := ahuo.mutation.CertUUID(); ok {
		_spec.SetField(attributehistory.FieldCertUUID, field.TypeUUID, value)
	}
	if value, ok := ahuo.mutation.AttributeTypeUUID(); ok {
		_spec.SetField(attributehistory.FieldAttributeTypeUUID, field.TypeUUID, value)
	}
	_node = &AttributeHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
