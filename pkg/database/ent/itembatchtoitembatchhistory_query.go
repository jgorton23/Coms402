// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchtoitembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ItemBatchToItemBatchHistoryQuery is the builder for querying ItemBatchToItemBatchHistory entities.
type ItemBatchToItemBatchHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.ItemBatchToItemBatchHistory
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemBatchToItemBatchHistoryQuery builder.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Where(ps ...predicate.ItemBatchToItemBatchHistory) *ItemBatchToItemBatchHistoryQuery {
	ibtibhq.predicates = append(ibtibhq.predicates, ps...)
	return ibtibhq
}

// Limit the number of records to be returned by this query.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Limit(limit int) *ItemBatchToItemBatchHistoryQuery {
	ibtibhq.ctx.Limit = &limit
	return ibtibhq
}

// Offset to start from.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Offset(offset int) *ItemBatchToItemBatchHistoryQuery {
	ibtibhq.ctx.Offset = &offset
	return ibtibhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Unique(unique bool) *ItemBatchToItemBatchHistoryQuery {
	ibtibhq.ctx.Unique = &unique
	return ibtibhq
}

// Order specifies how the records should be ordered.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Order(o ...OrderFunc) *ItemBatchToItemBatchHistoryQuery {
	ibtibhq.order = append(ibtibhq.order, o...)
	return ibtibhq
}

// First returns the first ItemBatchToItemBatchHistory entity from the query.
// Returns a *NotFoundError when no ItemBatchToItemBatchHistory was found.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) First(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	nodes, err := ibtibhq.Limit(1).All(setContextOp(ctx, ibtibhq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{itembatchtoitembatchhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) FirstX(ctx context.Context) *ItemBatchToItemBatchHistory {
	node, err := ibtibhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ItemBatchToItemBatchHistory ID from the query.
// Returns a *NotFoundError when no ItemBatchToItemBatchHistory ID was found.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ibtibhq.Limit(1).IDs(setContextOp(ctx, ibtibhq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{itembatchtoitembatchhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ibtibhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ItemBatchToItemBatchHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ItemBatchToItemBatchHistory entity is found.
// Returns a *NotFoundError when no ItemBatchToItemBatchHistory entities are found.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Only(ctx context.Context) (*ItemBatchToItemBatchHistory, error) {
	nodes, err := ibtibhq.Limit(2).All(setContextOp(ctx, ibtibhq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{itembatchtoitembatchhistory.Label}
	default:
		return nil, &NotSingularError{itembatchtoitembatchhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) OnlyX(ctx context.Context) *ItemBatchToItemBatchHistory {
	node, err := ibtibhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ItemBatchToItemBatchHistory ID in the query.
// Returns a *NotSingularError when more than one ItemBatchToItemBatchHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ibtibhq.Limit(2).IDs(setContextOp(ctx, ibtibhq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{itembatchtoitembatchhistory.Label}
	default:
		err = &NotSingularError{itembatchtoitembatchhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ibtibhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ItemBatchToItemBatchHistories.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) All(ctx context.Context) ([]*ItemBatchToItemBatchHistory, error) {
	ctx = setContextOp(ctx, ibtibhq.ctx, "All")
	if err := ibtibhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ItemBatchToItemBatchHistory, *ItemBatchToItemBatchHistoryQuery]()
	return withInterceptors[[]*ItemBatchToItemBatchHistory](ctx, ibtibhq, qr, ibtibhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) AllX(ctx context.Context) []*ItemBatchToItemBatchHistory {
	nodes, err := ibtibhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ItemBatchToItemBatchHistory IDs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ibtibhq.ctx.Unique == nil && ibtibhq.path != nil {
		ibtibhq.Unique(true)
	}
	ctx = setContextOp(ctx, ibtibhq.ctx, "IDs")
	if err = ibtibhq.Select(itembatchtoitembatchhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ibtibhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ibtibhq.ctx, "Count")
	if err := ibtibhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ibtibhq, querierCount[*ItemBatchToItemBatchHistoryQuery](), ibtibhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) CountX(ctx context.Context) int {
	count, err := ibtibhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ibtibhq.ctx, "Exist")
	switch _, err := ibtibhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ibtibhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemBatchToItemBatchHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Clone() *ItemBatchToItemBatchHistoryQuery {
	if ibtibhq == nil {
		return nil
	}
	return &ItemBatchToItemBatchHistoryQuery{
		config:     ibtibhq.config,
		ctx:        ibtibhq.ctx.Clone(),
		order:      append([]OrderFunc{}, ibtibhq.order...),
		inters:     append([]Interceptor{}, ibtibhq.inters...),
		predicates: append([]predicate.ItemBatchToItemBatchHistory{}, ibtibhq.predicates...),
		// clone intermediate query.
		sql:  ibtibhq.sql.Clone(),
		path: ibtibhq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ItemBatchToItemBatchHistory.Query().
//		GroupBy(itembatchtoitembatchhistory.FieldHistoryTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) GroupBy(field string, fields ...string) *ItemBatchToItemBatchHistoryGroupBy {
	ibtibhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ItemBatchToItemBatchHistoryGroupBy{build: ibtibhq}
	grbuild.flds = &ibtibhq.ctx.Fields
	grbuild.label = itembatchtoitembatchhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.ItemBatchToItemBatchHistory.Query().
//		Select(itembatchtoitembatchhistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Select(fields ...string) *ItemBatchToItemBatchHistorySelect {
	ibtibhq.ctx.Fields = append(ibtibhq.ctx.Fields, fields...)
	sbuild := &ItemBatchToItemBatchHistorySelect{ItemBatchToItemBatchHistoryQuery: ibtibhq}
	sbuild.label = itembatchtoitembatchhistory.Label
	sbuild.flds, sbuild.scan = &ibtibhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ItemBatchToItemBatchHistorySelect configured with the given aggregations.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) Aggregate(fns ...AggregateFunc) *ItemBatchToItemBatchHistorySelect {
	return ibtibhq.Select().Aggregate(fns...)
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ibtibhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ibtibhq); err != nil {
				return err
			}
		}
	}
	for _, f := range ibtibhq.ctx.Fields {
		if !itembatchtoitembatchhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ibtibhq.path != nil {
		prev, err := ibtibhq.path(ctx)
		if err != nil {
			return err
		}
		ibtibhq.sql = prev
	}
	return nil
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ItemBatchToItemBatchHistory, error) {
	var (
		nodes = []*ItemBatchToItemBatchHistory{}
		_spec = ibtibhq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ItemBatchToItemBatchHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ItemBatchToItemBatchHistory{config: ibtibhq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(ibtibhq.modifiers) > 0 {
		_spec.Modifiers = ibtibhq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ibtibhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ibtibhq.querySpec()
	if len(ibtibhq.modifiers) > 0 {
		_spec.Modifiers = ibtibhq.modifiers
	}
	_spec.Node.Columns = ibtibhq.ctx.Fields
	if len(ibtibhq.ctx.Fields) > 0 {
		_spec.Unique = ibtibhq.ctx.Unique != nil && *ibtibhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ibtibhq.driver, _spec)
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(itembatchtoitembatchhistory.Table, itembatchtoitembatchhistory.Columns, sqlgraph.NewFieldSpec(itembatchtoitembatchhistory.FieldID, field.TypeUUID))
	_spec.From = ibtibhq.sql
	if unique := ibtibhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ibtibhq.path != nil {
		_spec.Unique = true
	}
	if fields := ibtibhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itembatchtoitembatchhistory.FieldID)
		for i := range fields {
			if fields[i] != itembatchtoitembatchhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ibtibhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ibtibhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ibtibhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ibtibhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ibtibhq *ItemBatchToItemBatchHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ibtibhq.driver.Dialect())
	t1 := builder.Table(itembatchtoitembatchhistory.Table)
	columns := ibtibhq.ctx.Fields
	if len(columns) == 0 {
		columns = itembatchtoitembatchhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ibtibhq.sql != nil {
		selector = ibtibhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ibtibhq.ctx.Unique != nil && *ibtibhq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ibtibhq.modifiers {
		m(selector)
	}
	for _, p := range ibtibhq.predicates {
		p(selector)
	}
	for _, p := range ibtibhq.order {
		p(selector)
	}
	if offset := ibtibhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ibtibhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) ForUpdate(opts ...sql.LockOption) *ItemBatchToItemBatchHistoryQuery {
	if ibtibhq.driver.Dialect() == dialect.Postgres {
		ibtibhq.Unique(false)
	}
	ibtibhq.modifiers = append(ibtibhq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ibtibhq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ibtibhq *ItemBatchToItemBatchHistoryQuery) ForShare(opts ...sql.LockOption) *ItemBatchToItemBatchHistoryQuery {
	if ibtibhq.driver.Dialect() == dialect.Postgres {
		ibtibhq.Unique(false)
	}
	ibtibhq.modifiers = append(ibtibhq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ibtibhq
}

// ItemBatchToItemBatchHistoryGroupBy is the group-by builder for ItemBatchToItemBatchHistory entities.
type ItemBatchToItemBatchHistoryGroupBy struct {
	selector
	build *ItemBatchToItemBatchHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ibtibhgb *ItemBatchToItemBatchHistoryGroupBy) Aggregate(fns ...AggregateFunc) *ItemBatchToItemBatchHistoryGroupBy {
	ibtibhgb.fns = append(ibtibhgb.fns, fns...)
	return ibtibhgb
}

// Scan applies the selector query and scans the result into the given value.
func (ibtibhgb *ItemBatchToItemBatchHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ibtibhgb.build.ctx, "GroupBy")
	if err := ibtibhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ItemBatchToItemBatchHistoryQuery, *ItemBatchToItemBatchHistoryGroupBy](ctx, ibtibhgb.build, ibtibhgb, ibtibhgb.build.inters, v)
}

func (ibtibhgb *ItemBatchToItemBatchHistoryGroupBy) sqlScan(ctx context.Context, root *ItemBatchToItemBatchHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ibtibhgb.fns))
	for _, fn := range ibtibhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ibtibhgb.flds)+len(ibtibhgb.fns))
		for _, f := range *ibtibhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ibtibhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibtibhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ItemBatchToItemBatchHistorySelect is the builder for selecting fields of ItemBatchToItemBatchHistory entities.
type ItemBatchToItemBatchHistorySelect struct {
	*ItemBatchToItemBatchHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ibtibhs *ItemBatchToItemBatchHistorySelect) Aggregate(fns ...AggregateFunc) *ItemBatchToItemBatchHistorySelect {
	ibtibhs.fns = append(ibtibhs.fns, fns...)
	return ibtibhs
}

// Scan applies the selector query and scans the result into the given value.
func (ibtibhs *ItemBatchToItemBatchHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ibtibhs.ctx, "Select")
	if err := ibtibhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ItemBatchToItemBatchHistoryQuery, *ItemBatchToItemBatchHistorySelect](ctx, ibtibhs.ItemBatchToItemBatchHistoryQuery, ibtibhs, ibtibhs.inters, v)
}

func (ibtibhs *ItemBatchToItemBatchHistorySelect) sqlScan(ctx context.Context, root *ItemBatchToItemBatchHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ibtibhs.fns))
	for _, fn := range ibtibhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ibtibhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibtibhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
