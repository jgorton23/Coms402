// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatch"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// CertificationUpdate is the builder for updating Certification entities.
type CertificationUpdate struct {
	config
	hooks    []Hook
	mutation *CertificationMutation
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cu *CertificationUpdate) Where(ps ...predicate.Certification) *CertificationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (cu *CertificationUpdate) SetPrimaryAttribute(s string) *CertificationUpdate {
	cu.mutation.SetPrimaryAttribute(s)
	return cu
}

// SetCompanyUUID sets the "companyUUID" field.
func (cu *CertificationUpdate) SetCompanyUUID(u uuid.UUID) *CertificationUpdate {
	cu.mutation.SetCompanyUUID(u)
	return cu
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (cu *CertificationUpdate) SetItemBatchUUID(u uuid.UUID) *CertificationUpdate {
	cu.mutation.SetItemBatchUUID(u)
	return cu
}

// SetImageUUID sets the "imageUUID" field.
func (cu *CertificationUpdate) SetImageUUID(u uuid.UUID) *CertificationUpdate {
	cu.mutation.SetImageUUID(u)
	return cu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cu *CertificationUpdate) SetCompanyID(id uuid.UUID) *CertificationUpdate {
	cu.mutation.SetCompanyID(id)
	return cu
}

// SetCompany sets the "company" edge to the Company entity.
func (cu *CertificationUpdate) SetCompany(c *Company) *CertificationUpdate {
	return cu.SetCompanyID(c.ID)
}

// SetItemBatchID sets the "itemBatch" edge to the ItemBatch entity by ID.
func (cu *CertificationUpdate) SetItemBatchID(id uuid.UUID) *CertificationUpdate {
	cu.mutation.SetItemBatchID(id)
	return cu
}

// SetItemBatch sets the "itemBatch" edge to the ItemBatch entity.
func (cu *CertificationUpdate) SetItemBatch(i *ItemBatch) *CertificationUpdate {
	return cu.SetItemBatchID(i.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cu *CertificationUpdate) Mutation() *CertificationMutation {
	return cu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cu *CertificationUpdate) ClearCompany() *CertificationUpdate {
	cu.mutation.ClearCompany()
	return cu
}

// ClearItemBatch clears the "itemBatch" edge to the ItemBatch entity.
func (cu *CertificationUpdate) ClearItemBatch() *CertificationUpdate {
	cu.mutation.ClearItemBatch()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CertificationMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificationUpdate) check() error {
	if _, ok := cu.mutation.CompanyID(); cu.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Certification.company"`)
	}
	if _, ok := cu.mutation.ItemBatchID(); cu.mutation.ItemBatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Certification.itemBatch"`)
	}
	return nil
}

func (cu *CertificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certification.FieldPrimaryAttribute, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImageUUID(); ok {
		_spec.SetField(certification.FieldImageUUID, field.TypeUUID, value)
	}
	if cu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ItemBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ItemBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificationUpdateOne is the builder for updating a single Certification entity.
type CertificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificationMutation
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (cuo *CertificationUpdateOne) SetPrimaryAttribute(s string) *CertificationUpdateOne {
	cuo.mutation.SetPrimaryAttribute(s)
	return cuo
}

// SetCompanyUUID sets the "companyUUID" field.
func (cuo *CertificationUpdateOne) SetCompanyUUID(u uuid.UUID) *CertificationUpdateOne {
	cuo.mutation.SetCompanyUUID(u)
	return cuo
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (cuo *CertificationUpdateOne) SetItemBatchUUID(u uuid.UUID) *CertificationUpdateOne {
	cuo.mutation.SetItemBatchUUID(u)
	return cuo
}

// SetImageUUID sets the "imageUUID" field.
func (cuo *CertificationUpdateOne) SetImageUUID(u uuid.UUID) *CertificationUpdateOne {
	cuo.mutation.SetImageUUID(u)
	return cuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cuo *CertificationUpdateOne) SetCompanyID(id uuid.UUID) *CertificationUpdateOne {
	cuo.mutation.SetCompanyID(id)
	return cuo
}

// SetCompany sets the "company" edge to the Company entity.
func (cuo *CertificationUpdateOne) SetCompany(c *Company) *CertificationUpdateOne {
	return cuo.SetCompanyID(c.ID)
}

// SetItemBatchID sets the "itemBatch" edge to the ItemBatch entity by ID.
func (cuo *CertificationUpdateOne) SetItemBatchID(id uuid.UUID) *CertificationUpdateOne {
	cuo.mutation.SetItemBatchID(id)
	return cuo
}

// SetItemBatch sets the "itemBatch" edge to the ItemBatch entity.
func (cuo *CertificationUpdateOne) SetItemBatch(i *ItemBatch) *CertificationUpdateOne {
	return cuo.SetItemBatchID(i.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cuo *CertificationUpdateOne) Mutation() *CertificationMutation {
	return cuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (cuo *CertificationUpdateOne) ClearCompany() *CertificationUpdateOne {
	cuo.mutation.ClearCompany()
	return cuo
}

// ClearItemBatch clears the "itemBatch" edge to the ItemBatch entity.
func (cuo *CertificationUpdateOne) ClearItemBatch() *CertificationUpdateOne {
	cuo.mutation.ClearItemBatch()
	return cuo
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cuo *CertificationUpdateOne) Where(ps ...predicate.Certification) *CertificationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificationUpdateOne) Select(field string, fields ...string) *CertificationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certification entity.
func (cuo *CertificationUpdateOne) Save(ctx context.Context) (*Certification, error) {
	return withHooks[*Certification, CertificationMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificationUpdateOne) SaveX(ctx context.Context) *Certification {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificationUpdateOne) check() error {
	if _, ok := cuo.mutation.CompanyID(); cuo.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Certification.company"`)
	}
	if _, ok := cuo.mutation.ItemBatchID(); cuo.mutation.ItemBatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Certification.itemBatch"`)
	}
	return nil
}

func (cuo *CertificationUpdateOne) sqlSave(ctx context.Context) (_node *Certification, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certification.FieldID)
		for _, f := range fields {
			if !certification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certification.FieldPrimaryAttribute, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImageUUID(); ok {
		_spec.SetField(certification.FieldImageUUID, field.TypeUUID, value)
	}
	if cuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ItemBatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ItemBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certification{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
