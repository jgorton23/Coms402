// Code generated by ent, DO NOT EDIT.

package userhistory

import (
	"fmt"
	"time"

	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

const (
	// Label holds the string label denoting the userhistory type in the database.
	Label = "user_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UUID"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldAttemptCount holds the string denoting the attempt_count field in the database.
	FieldAttemptCount = "attempt_count"
	// FieldLastAttempt holds the string denoting the last_attempt field in the database.
	FieldLastAttempt = "last_attempt"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// Table holds the table name of the userhistory in the database.
	Table = "user_history"
)

// Columns holds all SQL columns for userhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldUpdatedBy,
	FieldEmail,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPasswordHash,
	FieldAttemptCount,
	FieldLastAttempt,
	FieldLocked,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// DefaultRole holds the default value on creation for the "role" field.
	DefaultRole string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o enthistory.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("userhistory: invalid enum value for operation field: %q", o)
	}
}
