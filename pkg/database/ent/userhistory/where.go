// Code generated by ent, DO NOT EDIT.

package userhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldRef, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldEmail, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldPasswordHash, v))
}

// AttemptCount applies equality check predicate on the "attempt_count" field. It's identical to AttemptCountEQ.
func AttemptCount(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldAttemptCount, v))
}

// LastAttempt applies equality check predicate on the "last_attempt" field. It's identical to LastAttemptEQ.
func LastAttempt(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldLastAttempt, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldLocked, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldRole, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v uuid.UUID) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldRef))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v enthistory.OpType) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v enthistory.OpType) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...enthistory.OpType) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...enthistory.OpType) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContainsFold(FieldEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashIsNil applies the IsNil predicate on the "password_hash" field.
func PasswordHashIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldPasswordHash))
}

// PasswordHashNotNil applies the NotNil predicate on the "password_hash" field.
func PasswordHashNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldPasswordHash))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContainsFold(FieldPasswordHash, v))
}

// AttemptCountEQ applies the EQ predicate on the "attempt_count" field.
func AttemptCountEQ(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldAttemptCount, v))
}

// AttemptCountNEQ applies the NEQ predicate on the "attempt_count" field.
func AttemptCountNEQ(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldAttemptCount, v))
}

// AttemptCountIn applies the In predicate on the "attempt_count" field.
func AttemptCountIn(vs ...int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldAttemptCount, vs...))
}

// AttemptCountNotIn applies the NotIn predicate on the "attempt_count" field.
func AttemptCountNotIn(vs ...int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldAttemptCount, vs...))
}

// AttemptCountGT applies the GT predicate on the "attempt_count" field.
func AttemptCountGT(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldAttemptCount, v))
}

// AttemptCountGTE applies the GTE predicate on the "attempt_count" field.
func AttemptCountGTE(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldAttemptCount, v))
}

// AttemptCountLT applies the LT predicate on the "attempt_count" field.
func AttemptCountLT(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldAttemptCount, v))
}

// AttemptCountLTE applies the LTE predicate on the "attempt_count" field.
func AttemptCountLTE(v int) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldAttemptCount, v))
}

// AttemptCountIsNil applies the IsNil predicate on the "attempt_count" field.
func AttemptCountIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldAttemptCount))
}

// AttemptCountNotNil applies the NotNil predicate on the "attempt_count" field.
func AttemptCountNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldAttemptCount))
}

// LastAttemptEQ applies the EQ predicate on the "last_attempt" field.
func LastAttemptEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldLastAttempt, v))
}

// LastAttemptNEQ applies the NEQ predicate on the "last_attempt" field.
func LastAttemptNEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldLastAttempt, v))
}

// LastAttemptIn applies the In predicate on the "last_attempt" field.
func LastAttemptIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldLastAttempt, vs...))
}

// LastAttemptNotIn applies the NotIn predicate on the "last_attempt" field.
func LastAttemptNotIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldLastAttempt, vs...))
}

// LastAttemptGT applies the GT predicate on the "last_attempt" field.
func LastAttemptGT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldLastAttempt, v))
}

// LastAttemptGTE applies the GTE predicate on the "last_attempt" field.
func LastAttemptGTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldLastAttempt, v))
}

// LastAttemptLT applies the LT predicate on the "last_attempt" field.
func LastAttemptLT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldLastAttempt, v))
}

// LastAttemptLTE applies the LTE predicate on the "last_attempt" field.
func LastAttemptLTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldLastAttempt, v))
}

// LastAttemptIsNil applies the IsNil predicate on the "last_attempt" field.
func LastAttemptIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldLastAttempt))
}

// LastAttemptNotNil applies the NotNil predicate on the "last_attempt" field.
func LastAttemptNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldLastAttempt))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldLocked, v))
}

// LockedIn applies the In predicate on the "locked" field.
func LockedIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldLocked, vs...))
}

// LockedNotIn applies the NotIn predicate on the "locked" field.
func LockedNotIn(vs ...time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldLocked, vs...))
}

// LockedGT applies the GT predicate on the "locked" field.
func LockedGT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldLocked, v))
}

// LockedGTE applies the GTE predicate on the "locked" field.
func LockedGTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldLocked, v))
}

// LockedLT applies the LT predicate on the "locked" field.
func LockedLT(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldLocked, v))
}

// LockedLTE applies the LTE predicate on the "locked" field.
func LockedLTE(v time.Time) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldLocked, v))
}

// LockedIsNil applies the IsNil predicate on the "locked" field.
func LockedIsNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIsNull(FieldLocked))
}

// LockedNotNil applies the NotNil predicate on the "locked" field.
func LockedNotNil() predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotNull(FieldLocked))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.UserHistory {
	return predicate.UserHistory(sql.FieldContainsFold(FieldRole, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserHistory) predicate.UserHistory {
	return predicate.UserHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserHistory) predicate.UserHistory {
	return predicate.UserHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserHistory) predicate.UserHistory {
	return predicate.UserHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
