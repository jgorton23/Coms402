// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ItemBatchHistoryUpdate is the builder for updating ItemBatchHistory entities.
type ItemBatchHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ItemBatchHistoryMutation
}

// Where appends a list predicates to the ItemBatchHistoryUpdate builder.
func (ibhu *ItemBatchHistoryUpdate) Where(ps ...predicate.ItemBatchHistory) *ItemBatchHistoryUpdate {
	ibhu.mutation.Where(ps...)
	return ibhu
}

// SetItemNumber sets the "itemNumber" field.
func (ibhu *ItemBatchHistoryUpdate) SetItemNumber(s string) *ItemBatchHistoryUpdate {
	ibhu.mutation.SetItemNumber(s)
	return ibhu
}

// SetDescription sets the "description" field.
func (ibhu *ItemBatchHistoryUpdate) SetDescription(s string) *ItemBatchHistoryUpdate {
	ibhu.mutation.SetDescription(s)
	return ibhu
}

// SetCompanyUUID sets the "companyUUID" field.
func (ibhu *ItemBatchHistoryUpdate) SetCompanyUUID(u uuid.UUID) *ItemBatchHistoryUpdate {
	ibhu.mutation.SetCompanyUUID(u)
	return ibhu
}

// Mutation returns the ItemBatchHistoryMutation object of the builder.
func (ibhu *ItemBatchHistoryUpdate) Mutation() *ItemBatchHistoryMutation {
	return ibhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ibhu *ItemBatchHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ItemBatchHistoryMutation](ctx, ibhu.sqlSave, ibhu.mutation, ibhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibhu *ItemBatchHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ibhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ibhu *ItemBatchHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ibhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibhu *ItemBatchHistoryUpdate) ExecX(ctx context.Context) {
	if err := ibhu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ibhu *ItemBatchHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(itembatchhistory.Table, itembatchhistory.Columns, sqlgraph.NewFieldSpec(itembatchhistory.FieldID, field.TypeUUID))
	if ps := ibhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ibhu.mutation.RefCleared() {
		_spec.ClearField(itembatchhistory.FieldRef, field.TypeUUID)
	}
	if ibhu.mutation.UpdatedByCleared() {
		_spec.ClearField(itembatchhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ibhu.mutation.ItemNumber(); ok {
		_spec.SetField(itembatchhistory.FieldItemNumber, field.TypeString, value)
	}
	if value, ok := ibhu.mutation.Description(); ok {
		_spec.SetField(itembatchhistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := ibhu.mutation.CompanyUUID(); ok {
		_spec.SetField(itembatchhistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ibhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itembatchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ibhu.mutation.done = true
	return n, nil
}

// ItemBatchHistoryUpdateOne is the builder for updating a single ItemBatchHistory entity.
type ItemBatchHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemBatchHistoryMutation
}

// SetItemNumber sets the "itemNumber" field.
func (ibhuo *ItemBatchHistoryUpdateOne) SetItemNumber(s string) *ItemBatchHistoryUpdateOne {
	ibhuo.mutation.SetItemNumber(s)
	return ibhuo
}

// SetDescription sets the "description" field.
func (ibhuo *ItemBatchHistoryUpdateOne) SetDescription(s string) *ItemBatchHistoryUpdateOne {
	ibhuo.mutation.SetDescription(s)
	return ibhuo
}

// SetCompanyUUID sets the "companyUUID" field.
func (ibhuo *ItemBatchHistoryUpdateOne) SetCompanyUUID(u uuid.UUID) *ItemBatchHistoryUpdateOne {
	ibhuo.mutation.SetCompanyUUID(u)
	return ibhuo
}

// Mutation returns the ItemBatchHistoryMutation object of the builder.
func (ibhuo *ItemBatchHistoryUpdateOne) Mutation() *ItemBatchHistoryMutation {
	return ibhuo.mutation
}

// Where appends a list predicates to the ItemBatchHistoryUpdate builder.
func (ibhuo *ItemBatchHistoryUpdateOne) Where(ps ...predicate.ItemBatchHistory) *ItemBatchHistoryUpdateOne {
	ibhuo.mutation.Where(ps...)
	return ibhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibhuo *ItemBatchHistoryUpdateOne) Select(field string, fields ...string) *ItemBatchHistoryUpdateOne {
	ibhuo.fields = append([]string{field}, fields...)
	return ibhuo
}

// Save executes the query and returns the updated ItemBatchHistory entity.
func (ibhuo *ItemBatchHistoryUpdateOne) Save(ctx context.Context) (*ItemBatchHistory, error) {
	return withHooks[*ItemBatchHistory, ItemBatchHistoryMutation](ctx, ibhuo.sqlSave, ibhuo.mutation, ibhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ibhuo *ItemBatchHistoryUpdateOne) SaveX(ctx context.Context) *ItemBatchHistory {
	node, err := ibhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibhuo *ItemBatchHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ibhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibhuo *ItemBatchHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ibhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ibhuo *ItemBatchHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ItemBatchHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(itembatchhistory.Table, itembatchhistory.Columns, sqlgraph.NewFieldSpec(itembatchhistory.FieldID, field.TypeUUID))
	id, ok := ibhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ItemBatchHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itembatchhistory.FieldID)
		for _, f := range fields {
			if !itembatchhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itembatchhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ibhuo.mutation.RefCleared() {
		_spec.ClearField(itembatchhistory.FieldRef, field.TypeUUID)
	}
	if ibhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(itembatchhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ibhuo.mutation.ItemNumber(); ok {
		_spec.SetField(itembatchhistory.FieldItemNumber, field.TypeString, value)
	}
	if value, ok := ibhuo.mutation.Description(); ok {
		_spec.SetField(itembatchhistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := ibhuo.mutation.CompanyUUID(); ok {
		_spec.SetField(itembatchhistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	_node = &ItemBatchHistory{config: ibhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itembatchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ibhuo.mutation.done = true
	return _node, nil
}
