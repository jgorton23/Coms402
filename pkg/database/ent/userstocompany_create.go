// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/user"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userstocompany"
	"github.com/google/uuid"
)

// UsersToCompanyCreate is the builder for creating a UsersToCompany entity.
type UsersToCompanyCreate struct {
	config
	mutation *UsersToCompanyMutation
	hooks    []Hook
}

// SetCompanyUUID sets the "companyUUID" field.
func (utcc *UsersToCompanyCreate) SetCompanyUUID(u uuid.UUID) *UsersToCompanyCreate {
	utcc.mutation.SetCompanyUUID(u)
	return utcc
}

// SetUserUUID sets the "userUUID" field.
func (utcc *UsersToCompanyCreate) SetUserUUID(i int) *UsersToCompanyCreate {
	utcc.mutation.SetUserUUID(i)
	return utcc
}

// SetRoleType sets the "roleType" field.
func (utcc *UsersToCompanyCreate) SetRoleType(s string) *UsersToCompanyCreate {
	utcc.mutation.SetRoleType(s)
	return utcc
}

// SetApproved sets the "approved" field.
func (utcc *UsersToCompanyCreate) SetApproved(b bool) *UsersToCompanyCreate {
	utcc.mutation.SetApproved(b)
	return utcc
}

// SetID sets the "id" field.
func (utcc *UsersToCompanyCreate) SetID(u uuid.UUID) *UsersToCompanyCreate {
	utcc.mutation.SetID(u)
	return utcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (utcc *UsersToCompanyCreate) SetNillableID(u *uuid.UUID) *UsersToCompanyCreate {
	if u != nil {
		utcc.SetID(*u)
	}
	return utcc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utcc *UsersToCompanyCreate) SetUserID(id int) *UsersToCompanyCreate {
	utcc.mutation.SetUserID(id)
	return utcc
}

// SetUser sets the "user" edge to the User entity.
func (utcc *UsersToCompanyCreate) SetUser(u *User) *UsersToCompanyCreate {
	return utcc.SetUserID(u.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (utcc *UsersToCompanyCreate) SetCompanyID(id uuid.UUID) *UsersToCompanyCreate {
	utcc.mutation.SetCompanyID(id)
	return utcc
}

// SetCompany sets the "company" edge to the Company entity.
func (utcc *UsersToCompanyCreate) SetCompany(c *Company) *UsersToCompanyCreate {
	return utcc.SetCompanyID(c.ID)
}

// Mutation returns the UsersToCompanyMutation object of the builder.
func (utcc *UsersToCompanyCreate) Mutation() *UsersToCompanyMutation {
	return utcc.mutation
}

// Save creates the UsersToCompany in the database.
func (utcc *UsersToCompanyCreate) Save(ctx context.Context) (*UsersToCompany, error) {
	var (
		err  error
		node *UsersToCompany
	)
	utcc.defaults()
	if len(utcc.hooks) == 0 {
		if err = utcc.check(); err != nil {
			return nil, err
		}
		node, err = utcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersToCompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = utcc.check(); err != nil {
				return nil, err
			}
			utcc.mutation = mutation
			if node, err = utcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(utcc.hooks) - 1; i >= 0; i-- {
			if utcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = utcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, utcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UsersToCompany)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UsersToCompanyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (utcc *UsersToCompanyCreate) SaveX(ctx context.Context) *UsersToCompany {
	v, err := utcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcc *UsersToCompanyCreate) Exec(ctx context.Context) error {
	_, err := utcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcc *UsersToCompanyCreate) ExecX(ctx context.Context) {
	if err := utcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utcc *UsersToCompanyCreate) defaults() {
	if _, ok := utcc.mutation.ID(); !ok {
		v := userstocompany.DefaultID()
		utcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utcc *UsersToCompanyCreate) check() error {
	if _, ok := utcc.mutation.CompanyUUID(); !ok {
		return &ValidationError{Name: "companyUUID", err: errors.New(`ent: missing required field "UsersToCompany.companyUUID"`)}
	}
	if _, ok := utcc.mutation.UserUUID(); !ok {
		return &ValidationError{Name: "userUUID", err: errors.New(`ent: missing required field "UsersToCompany.userUUID"`)}
	}
	if _, ok := utcc.mutation.RoleType(); !ok {
		return &ValidationError{Name: "roleType", err: errors.New(`ent: missing required field "UsersToCompany.roleType"`)}
	}
	if _, ok := utcc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "UsersToCompany.approved"`)}
	}
	if _, ok := utcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UsersToCompany.user"`)}
	}
	if _, ok := utcc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "UsersToCompany.company"`)}
	}
	return nil
}

func (utcc *UsersToCompanyCreate) sqlSave(ctx context.Context) (*UsersToCompany, error) {
	_node, _spec := utcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (utcc *UsersToCompanyCreate) createSpec() (*UsersToCompany, *sqlgraph.CreateSpec) {
	var (
		_node = &UsersToCompany{config: utcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userstocompany.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userstocompany.FieldID,
			},
		}
	)
	if id, ok := utcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := utcc.mutation.RoleType(); ok {
		_spec.SetField(userstocompany.FieldRoleType, field.TypeString, value)
		_node.RoleType = value
	}
	if value, ok := utcc.mutation.Approved(); ok {
		_spec.SetField(userstocompany.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if nodes := utcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userstocompany.UserTable,
			Columns: []string{userstocompany.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utcc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userstocompany.CompanyTable,
			Columns: []string{userstocompany.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsersToCompanyCreateBulk is the builder for creating many UsersToCompany entities in bulk.
type UsersToCompanyCreateBulk struct {
	config
	builders []*UsersToCompanyCreate
}

// Save creates the UsersToCompany entities in the database.
func (utccb *UsersToCompanyCreateBulk) Save(ctx context.Context) ([]*UsersToCompany, error) {
	specs := make([]*sqlgraph.CreateSpec, len(utccb.builders))
	nodes := make([]*UsersToCompany, len(utccb.builders))
	mutators := make([]Mutator, len(utccb.builders))
	for i := range utccb.builders {
		func(i int, root context.Context) {
			builder := utccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersToCompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utccb *UsersToCompanyCreateBulk) SaveX(ctx context.Context) []*UsersToCompany {
	v, err := utccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utccb *UsersToCompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := utccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utccb *UsersToCompanyCreateBulk) ExecX(ctx context.Context) {
	if err := utccb.Exec(ctx); err != nil {
		panic(err)
	}
}
