// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/MatthewBehnke/apis/pkg/database/ent/authorizationpolicy"
)

// AuthorizationPolicyCreate is the builder for creating a AuthorizationPolicy entity.
type AuthorizationPolicyCreate struct {
	config
	mutation *AuthorizationPolicyMutation
	hooks    []Hook
}

// SetPtype sets the "Ptype" field.
func (apc *AuthorizationPolicyCreate) SetPtype(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetPtype(s)
	return apc
}

// SetNillablePtype sets the "Ptype" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillablePtype(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetPtype(*s)
	}
	return apc
}

// SetV0 sets the "V0" field.
func (apc *AuthorizationPolicyCreate) SetV0(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV0(s)
	return apc
}

// SetNillableV0 sets the "V0" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV0(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV0(*s)
	}
	return apc
}

// SetV1 sets the "V1" field.
func (apc *AuthorizationPolicyCreate) SetV1(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV1(s)
	return apc
}

// SetNillableV1 sets the "V1" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV1(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV1(*s)
	}
	return apc
}

// SetV2 sets the "V2" field.
func (apc *AuthorizationPolicyCreate) SetV2(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV2(s)
	return apc
}

// SetNillableV2 sets the "V2" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV2(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV2(*s)
	}
	return apc
}

// SetV3 sets the "V3" field.
func (apc *AuthorizationPolicyCreate) SetV3(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV3(s)
	return apc
}

// SetNillableV3 sets the "V3" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV3(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV3(*s)
	}
	return apc
}

// SetV4 sets the "V4" field.
func (apc *AuthorizationPolicyCreate) SetV4(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV4(s)
	return apc
}

// SetNillableV4 sets the "V4" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV4(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV4(*s)
	}
	return apc
}

// SetV5 sets the "V5" field.
func (apc *AuthorizationPolicyCreate) SetV5(s string) *AuthorizationPolicyCreate {
	apc.mutation.SetV5(s)
	return apc
}

// SetNillableV5 sets the "V5" field if the given value is not nil.
func (apc *AuthorizationPolicyCreate) SetNillableV5(s *string) *AuthorizationPolicyCreate {
	if s != nil {
		apc.SetV5(*s)
	}
	return apc
}

// Mutation returns the AuthorizationPolicyMutation object of the builder.
func (apc *AuthorizationPolicyCreate) Mutation() *AuthorizationPolicyMutation {
	return apc.mutation
}

// Save creates the AuthorizationPolicy in the database.
func (apc *AuthorizationPolicyCreate) Save(ctx context.Context) (*AuthorizationPolicy, error) {
	var (
		err  error
		node *AuthorizationPolicy
	)
	apc.defaults()
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizationPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, apc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AuthorizationPolicy)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AuthorizationPolicyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AuthorizationPolicyCreate) SaveX(ctx context.Context) *AuthorizationPolicy {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AuthorizationPolicyCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AuthorizationPolicyCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AuthorizationPolicyCreate) defaults() {
	if _, ok := apc.mutation.Ptype(); !ok {
		v := authorizationpolicy.DefaultPtype
		apc.mutation.SetPtype(v)
	}
	if _, ok := apc.mutation.V0(); !ok {
		v := authorizationpolicy.DefaultV0
		apc.mutation.SetV0(v)
	}
	if _, ok := apc.mutation.V1(); !ok {
		v := authorizationpolicy.DefaultV1
		apc.mutation.SetV1(v)
	}
	if _, ok := apc.mutation.V2(); !ok {
		v := authorizationpolicy.DefaultV2
		apc.mutation.SetV2(v)
	}
	if _, ok := apc.mutation.V3(); !ok {
		v := authorizationpolicy.DefaultV3
		apc.mutation.SetV3(v)
	}
	if _, ok := apc.mutation.V4(); !ok {
		v := authorizationpolicy.DefaultV4
		apc.mutation.SetV4(v)
	}
	if _, ok := apc.mutation.V5(); !ok {
		v := authorizationpolicy.DefaultV5
		apc.mutation.SetV5(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AuthorizationPolicyCreate) check() error {
	if _, ok := apc.mutation.Ptype(); !ok {
		return &ValidationError{Name: "Ptype", err: errors.New(`ent: missing required field "AuthorizationPolicy.Ptype"`)}
	}
	if _, ok := apc.mutation.V0(); !ok {
		return &ValidationError{Name: "V0", err: errors.New(`ent: missing required field "AuthorizationPolicy.V0"`)}
	}
	if _, ok := apc.mutation.V1(); !ok {
		return &ValidationError{Name: "V1", err: errors.New(`ent: missing required field "AuthorizationPolicy.V1"`)}
	}
	if _, ok := apc.mutation.V2(); !ok {
		return &ValidationError{Name: "V2", err: errors.New(`ent: missing required field "AuthorizationPolicy.V2"`)}
	}
	if _, ok := apc.mutation.V3(); !ok {
		return &ValidationError{Name: "V3", err: errors.New(`ent: missing required field "AuthorizationPolicy.V3"`)}
	}
	if _, ok := apc.mutation.V4(); !ok {
		return &ValidationError{Name: "V4", err: errors.New(`ent: missing required field "AuthorizationPolicy.V4"`)}
	}
	if _, ok := apc.mutation.V5(); !ok {
		return &ValidationError{Name: "V5", err: errors.New(`ent: missing required field "AuthorizationPolicy.V5"`)}
	}
	return nil
}

func (apc *AuthorizationPolicyCreate) sqlSave(ctx context.Context) (*AuthorizationPolicy, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (apc *AuthorizationPolicyCreate) createSpec() (*AuthorizationPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthorizationPolicy{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authorizationpolicy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorizationpolicy.FieldID,
			},
		}
	)
	if value, ok := apc.mutation.Ptype(); ok {
		_spec.SetField(authorizationpolicy.FieldPtype, field.TypeString, value)
		_node.Ptype = value
	}
	if value, ok := apc.mutation.V0(); ok {
		_spec.SetField(authorizationpolicy.FieldV0, field.TypeString, value)
		_node.V0 = value
	}
	if value, ok := apc.mutation.V1(); ok {
		_spec.SetField(authorizationpolicy.FieldV1, field.TypeString, value)
		_node.V1 = value
	}
	if value, ok := apc.mutation.V2(); ok {
		_spec.SetField(authorizationpolicy.FieldV2, field.TypeString, value)
		_node.V2 = value
	}
	if value, ok := apc.mutation.V3(); ok {
		_spec.SetField(authorizationpolicy.FieldV3, field.TypeString, value)
		_node.V3 = value
	}
	if value, ok := apc.mutation.V4(); ok {
		_spec.SetField(authorizationpolicy.FieldV4, field.TypeString, value)
		_node.V4 = value
	}
	if value, ok := apc.mutation.V5(); ok {
		_spec.SetField(authorizationpolicy.FieldV5, field.TypeString, value)
		_node.V5 = value
	}
	return _node, _spec
}

// AuthorizationPolicyCreateBulk is the builder for creating many AuthorizationPolicy entities in bulk.
type AuthorizationPolicyCreateBulk struct {
	config
	builders []*AuthorizationPolicyCreate
}

// Save creates the AuthorizationPolicy entities in the database.
func (apcb *AuthorizationPolicyCreateBulk) Save(ctx context.Context) ([]*AuthorizationPolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AuthorizationPolicy, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizationPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AuthorizationPolicyCreateBulk) SaveX(ctx context.Context) []*AuthorizationPolicy {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AuthorizationPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AuthorizationPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
