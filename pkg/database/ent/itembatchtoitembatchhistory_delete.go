// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchtoitembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ItemBatchToItemBatchHistoryDelete is the builder for deleting a ItemBatchToItemBatchHistory entity.
type ItemBatchToItemBatchHistoryDelete struct {
	config
	hooks    []Hook
	mutation *ItemBatchToItemBatchHistoryMutation
}

// Where appends a list predicates to the ItemBatchToItemBatchHistoryDelete builder.
func (ibtibhd *ItemBatchToItemBatchHistoryDelete) Where(ps ...predicate.ItemBatchToItemBatchHistory) *ItemBatchToItemBatchHistoryDelete {
	ibtibhd.mutation.Where(ps...)
	return ibtibhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ibtibhd *ItemBatchToItemBatchHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ItemBatchToItemBatchHistoryMutation](ctx, ibtibhd.sqlExec, ibtibhd.mutation, ibtibhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibhd *ItemBatchToItemBatchHistoryDelete) ExecX(ctx context.Context) int {
	n, err := ibtibhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ibtibhd *ItemBatchToItemBatchHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(itembatchtoitembatchhistory.Table, sqlgraph.NewFieldSpec(itembatchtoitembatchhistory.FieldID, field.TypeUUID))
	if ps := ibtibhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ibtibhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ibtibhd.mutation.done = true
	return affected, err
}

// ItemBatchToItemBatchHistoryDeleteOne is the builder for deleting a single ItemBatchToItemBatchHistory entity.
type ItemBatchToItemBatchHistoryDeleteOne struct {
	ibtibhd *ItemBatchToItemBatchHistoryDelete
}

// Where appends a list predicates to the ItemBatchToItemBatchHistoryDelete builder.
func (ibtibhdo *ItemBatchToItemBatchHistoryDeleteOne) Where(ps ...predicate.ItemBatchToItemBatchHistory) *ItemBatchToItemBatchHistoryDeleteOne {
	ibtibhdo.ibtibhd.mutation.Where(ps...)
	return ibtibhdo
}

// Exec executes the deletion query.
func (ibtibhdo *ItemBatchToItemBatchHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ibtibhdo.ibtibhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{itembatchtoitembatchhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibhdo *ItemBatchToItemBatchHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := ibtibhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
