// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// CertificationHistoryDelete is the builder for deleting a CertificationHistory entity.
type CertificationHistoryDelete struct {
	config
	hooks    []Hook
	mutation *CertificationHistoryMutation
}

// Where appends a list predicates to the CertificationHistoryDelete builder.
func (chd *CertificationHistoryDelete) Where(ps ...predicate.CertificationHistory) *CertificationHistoryDelete {
	chd.mutation.Where(ps...)
	return chd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (chd *CertificationHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CertificationHistoryMutation](ctx, chd.sqlExec, chd.mutation, chd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (chd *CertificationHistoryDelete) ExecX(ctx context.Context) int {
	n, err := chd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (chd *CertificationHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(certificationhistory.Table, sqlgraph.NewFieldSpec(certificationhistory.FieldID, field.TypeUUID))
	if ps := chd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, chd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	chd.mutation.done = true
	return affected, err
}

// CertificationHistoryDeleteOne is the builder for deleting a single CertificationHistory entity.
type CertificationHistoryDeleteOne struct {
	chd *CertificationHistoryDelete
}

// Where appends a list predicates to the CertificationHistoryDelete builder.
func (chdo *CertificationHistoryDeleteOne) Where(ps ...predicate.CertificationHistory) *CertificationHistoryDeleteOne {
	chdo.chd.mutation.Where(ps...)
	return chdo
}

// Exec executes the deletion query.
func (chdo *CertificationHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := chdo.chd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{certificationhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (chdo *CertificationHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := chdo.Exec(ctx); err != nil {
		panic(err)
	}
}
