// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attribute"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// AttributeUpdate is the builder for updating Attribute entities.
type AttributeUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeMutation
}

// Where appends a list predicates to the AttributeUpdate builder.
func (au *AttributeUpdate) Where(ps ...predicate.Attribute) *AttributeUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetKey sets the "key" field.
func (au *AttributeUpdate) SetKey(s string) *AttributeUpdate {
	au.mutation.SetKey(s)
	return au
}

// SetValue sets the "value" field.
func (au *AttributeUpdate) SetValue(s string) *AttributeUpdate {
	au.mutation.SetValue(s)
	return au
}

// SetCertUUID sets the "certUUID" field.
func (au *AttributeUpdate) SetCertUUID(u uuid.UUID) *AttributeUpdate {
	au.mutation.SetCertUUID(u)
	return au
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (au *AttributeUpdate) SetAttributeTypeUUID(u uuid.UUID) *AttributeUpdate {
	au.mutation.SetAttributeTypeUUID(u)
	return au
}

// SetCertificationID sets the "certification" edge to the Certification entity by ID.
func (au *AttributeUpdate) SetCertificationID(id uuid.UUID) *AttributeUpdate {
	au.mutation.SetCertificationID(id)
	return au
}

// SetCertification sets the "certification" edge to the Certification entity.
func (au *AttributeUpdate) SetCertification(c *Certification) *AttributeUpdate {
	return au.SetCertificationID(c.ID)
}

// SetAttributeTypeID sets the "attributeType" edge to the AttributeType entity by ID.
func (au *AttributeUpdate) SetAttributeTypeID(id uuid.UUID) *AttributeUpdate {
	au.mutation.SetAttributeTypeID(id)
	return au
}

// SetAttributeType sets the "attributeType" edge to the AttributeType entity.
func (au *AttributeUpdate) SetAttributeType(a *AttributeType) *AttributeUpdate {
	return au.SetAttributeTypeID(a.ID)
}

// Mutation returns the AttributeMutation object of the builder.
func (au *AttributeUpdate) Mutation() *AttributeMutation {
	return au.mutation
}

// ClearCertification clears the "certification" edge to the Certification entity.
func (au *AttributeUpdate) ClearCertification() *AttributeUpdate {
	au.mutation.ClearCertification()
	return au
}

// ClearAttributeType clears the "attributeType" edge to the AttributeType entity.
func (au *AttributeUpdate) ClearAttributeType() *AttributeUpdate {
	au.mutation.ClearAttributeType()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AttributeMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttributeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttributeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttributeUpdate) check() error {
	if _, ok := au.mutation.CertificationID(); au.mutation.CertificationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attribute.certification"`)
	}
	if _, ok := au.mutation.AttributeTypeID(); au.mutation.AttributeTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attribute.attributeType"`)
	}
	return nil
}

func (au *AttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Key(); ok {
		_spec.SetField(attribute.FieldKey, field.TypeString, value)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(attribute.FieldValue, field.TypeString, value)
	}
	if au.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.CertificationTable,
			Columns: []string{attribute.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.CertificationTable,
			Columns: []string{attribute.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AttributeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.AttributeTypeTable,
			Columns: []string{attribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AttributeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.AttributeTypeTable,
			Columns: []string{attribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttributeUpdateOne is the builder for updating a single Attribute entity.
type AttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeMutation
}

// SetKey sets the "key" field.
func (auo *AttributeUpdateOne) SetKey(s string) *AttributeUpdateOne {
	auo.mutation.SetKey(s)
	return auo
}

// SetValue sets the "value" field.
func (auo *AttributeUpdateOne) SetValue(s string) *AttributeUpdateOne {
	auo.mutation.SetValue(s)
	return auo
}

// SetCertUUID sets the "certUUID" field.
func (auo *AttributeUpdateOne) SetCertUUID(u uuid.UUID) *AttributeUpdateOne {
	auo.mutation.SetCertUUID(u)
	return auo
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (auo *AttributeUpdateOne) SetAttributeTypeUUID(u uuid.UUID) *AttributeUpdateOne {
	auo.mutation.SetAttributeTypeUUID(u)
	return auo
}

// SetCertificationID sets the "certification" edge to the Certification entity by ID.
func (auo *AttributeUpdateOne) SetCertificationID(id uuid.UUID) *AttributeUpdateOne {
	auo.mutation.SetCertificationID(id)
	return auo
}

// SetCertification sets the "certification" edge to the Certification entity.
func (auo *AttributeUpdateOne) SetCertification(c *Certification) *AttributeUpdateOne {
	return auo.SetCertificationID(c.ID)
}

// SetAttributeTypeID sets the "attributeType" edge to the AttributeType entity by ID.
func (auo *AttributeUpdateOne) SetAttributeTypeID(id uuid.UUID) *AttributeUpdateOne {
	auo.mutation.SetAttributeTypeID(id)
	return auo
}

// SetAttributeType sets the "attributeType" edge to the AttributeType entity.
func (auo *AttributeUpdateOne) SetAttributeType(a *AttributeType) *AttributeUpdateOne {
	return auo.SetAttributeTypeID(a.ID)
}

// Mutation returns the AttributeMutation object of the builder.
func (auo *AttributeUpdateOne) Mutation() *AttributeMutation {
	return auo.mutation
}

// ClearCertification clears the "certification" edge to the Certification entity.
func (auo *AttributeUpdateOne) ClearCertification() *AttributeUpdateOne {
	auo.mutation.ClearCertification()
	return auo
}

// ClearAttributeType clears the "attributeType" edge to the AttributeType entity.
func (auo *AttributeUpdateOne) ClearAttributeType() *AttributeUpdateOne {
	auo.mutation.ClearAttributeType()
	return auo
}

// Where appends a list predicates to the AttributeUpdate builder.
func (auo *AttributeUpdateOne) Where(ps ...predicate.Attribute) *AttributeUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttributeUpdateOne) Select(field string, fields ...string) *AttributeUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attribute entity.
func (auo *AttributeUpdateOne) Save(ctx context.Context) (*Attribute, error) {
	return withHooks[*Attribute, AttributeMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttributeUpdateOne) SaveX(ctx context.Context) *Attribute {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttributeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttributeUpdateOne) check() error {
	if _, ok := auo.mutation.CertificationID(); auo.mutation.CertificationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attribute.certification"`)
	}
	if _, ok := auo.mutation.AttributeTypeID(); auo.mutation.AttributeTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attribute.attributeType"`)
	}
	return nil
}

func (auo *AttributeUpdateOne) sqlSave(ctx context.Context) (_node *Attribute, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attribute.Table, attribute.Columns, sqlgraph.NewFieldSpec(attribute.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attribute.FieldID)
		for _, f := range fields {
			if !attribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Key(); ok {
		_spec.SetField(attribute.FieldKey, field.TypeString, value)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(attribute.FieldValue, field.TypeString, value)
	}
	if auo.mutation.CertificationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.CertificationTable,
			Columns: []string{attribute.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.CertificationTable,
			Columns: []string{attribute.CertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AttributeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.AttributeTypeTable,
			Columns: []string{attribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AttributeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attribute.AttributeTypeTable,
			Columns: []string{attribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attribute{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
