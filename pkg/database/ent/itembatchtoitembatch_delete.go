// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchtoitembatch"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ItemBatchToItemBatchDelete is the builder for deleting a ItemBatchToItemBatch entity.
type ItemBatchToItemBatchDelete struct {
	config
	hooks    []Hook
	mutation *ItemBatchToItemBatchMutation
}

// Where appends a list predicates to the ItemBatchToItemBatchDelete builder.
func (ibtibd *ItemBatchToItemBatchDelete) Where(ps ...predicate.ItemBatchToItemBatch) *ItemBatchToItemBatchDelete {
	ibtibd.mutation.Where(ps...)
	return ibtibd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ibtibd *ItemBatchToItemBatchDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ItemBatchToItemBatchMutation](ctx, ibtibd.sqlExec, ibtibd.mutation, ibtibd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibd *ItemBatchToItemBatchDelete) ExecX(ctx context.Context) int {
	n, err := ibtibd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ibtibd *ItemBatchToItemBatchDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(itembatchtoitembatch.Table, sqlgraph.NewFieldSpec(itembatchtoitembatch.FieldID, field.TypeUUID))
	if ps := ibtibd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ibtibd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ibtibd.mutation.done = true
	return affected, err
}

// ItemBatchToItemBatchDeleteOne is the builder for deleting a single ItemBatchToItemBatch entity.
type ItemBatchToItemBatchDeleteOne struct {
	ibtibd *ItemBatchToItemBatchDelete
}

// Where appends a list predicates to the ItemBatchToItemBatchDelete builder.
func (ibtibdo *ItemBatchToItemBatchDeleteOne) Where(ps ...predicate.ItemBatchToItemBatch) *ItemBatchToItemBatchDeleteOne {
	ibtibdo.ibtibd.mutation.Where(ps...)
	return ibtibdo
}

// Exec executes the deletion query.
func (ibtibdo *ItemBatchToItemBatchDeleteOne) Exec(ctx context.Context) error {
	n, err := ibtibdo.ibtibd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{itembatchtoitembatch.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ibtibdo *ItemBatchToItemBatchDeleteOne) ExecX(ctx context.Context) {
	if err := ibtibdo.Exec(ctx); err != nil {
		panic(err)
	}
}
