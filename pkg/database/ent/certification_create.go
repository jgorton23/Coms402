// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplate"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatch"
	"github.com/google/uuid"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (cc *CertificationCreate) SetPrimaryAttribute(s string) *CertificationCreate {
	cc.mutation.SetPrimaryAttribute(s)
	return cc
}

// SetCompanyUUID sets the "companyUUID" field.
func (cc *CertificationCreate) SetCompanyUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetCompanyUUID(u)
	return cc
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (cc *CertificationCreate) SetItemBatchUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetItemBatchUUID(u)
	return cc
}

// SetImageUUID sets the "imageUUID" field.
func (cc *CertificationCreate) SetImageUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetImageUUID(u)
	return cc
}

// SetTemplateUUID sets the "templateUUID" field.
func (cc *CertificationCreate) SetTemplateUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetTemplateUUID(u)
	return cc
}

// SetNillableTemplateUUID sets the "templateUUID" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableTemplateUUID(u *uuid.UUID) *CertificationCreate {
	if u != nil {
		cc.SetTemplateUUID(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CertificationCreate) SetID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableID(u *uuid.UUID) *CertificationCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cc *CertificationCreate) SetCompanyID(id uuid.UUID) *CertificationCreate {
	cc.mutation.SetCompanyID(id)
	return cc
}

// SetCompany sets the "company" edge to the Company entity.
func (cc *CertificationCreate) SetCompany(c *Company) *CertificationCreate {
	return cc.SetCompanyID(c.ID)
}

// SetItemBatchID sets the "itemBatch" edge to the ItemBatch entity by ID.
func (cc *CertificationCreate) SetItemBatchID(id uuid.UUID) *CertificationCreate {
	cc.mutation.SetItemBatchID(id)
	return cc
}

// SetItemBatch sets the "itemBatch" edge to the ItemBatch entity.
func (cc *CertificationCreate) SetItemBatch(i *ItemBatch) *CertificationCreate {
	return cc.SetItemBatchID(i.ID)
}

// SetTemplateID sets the "template" edge to the CertificationTemplate entity by ID.
func (cc *CertificationCreate) SetTemplateID(id uuid.UUID) *CertificationCreate {
	cc.mutation.SetTemplateID(id)
	return cc
}

// SetNillableTemplateID sets the "template" edge to the CertificationTemplate entity by ID if the given value is not nil.
func (cc *CertificationCreate) SetNillableTemplateID(id *uuid.UUID) *CertificationCreate {
	if id != nil {
		cc = cc.SetTemplateID(*id)
	}
	return cc
}

// SetTemplate sets the "template" edge to the CertificationTemplate entity.
func (cc *CertificationCreate) SetTemplate(c *CertificationTemplate) *CertificationCreate {
	return cc.SetTemplateID(c.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	var (
		err  error
		node *Certification
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CertificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Certification)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CertificationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificationCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := certification.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.PrimaryAttribute(); !ok {
		return &ValidationError{Name: "primaryAttribute", err: errors.New(`ent: missing required field "Certification.primaryAttribute"`)}
	}
	if _, ok := cc.mutation.CompanyUUID(); !ok {
		return &ValidationError{Name: "companyUUID", err: errors.New(`ent: missing required field "Certification.companyUUID"`)}
	}
	if _, ok := cc.mutation.ItemBatchUUID(); !ok {
		return &ValidationError{Name: "itemBatchUUID", err: errors.New(`ent: missing required field "Certification.itemBatchUUID"`)}
	}
	if _, ok := cc.mutation.ImageUUID(); !ok {
		return &ValidationError{Name: "imageUUID", err: errors.New(`ent: missing required field "Certification.imageUUID"`)}
	}
	if _, ok := cc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "Certification.company"`)}
	}
	if _, ok := cc.mutation.ItemBatchID(); !ok {
		return &ValidationError{Name: "itemBatch", err: errors.New(`ent: missing required edge "Certification.itemBatch"`)}
	}
	return nil
}

func (cc *CertificationCreate) sqlSave(ctx context.Context) (*Certification, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CertificationCreate) createSpec() (*Certification, *sqlgraph.CreateSpec) {
	var (
		_node = &Certification{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: certification.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: certification.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certification.FieldPrimaryAttribute, field.TypeString, value)
		_node.PrimaryAttribute = value
	}
	if value, ok := cc.mutation.ImageUUID(); ok {
		_spec.SetField(certification.FieldImageUUID, field.TypeUUID, value)
		_node.ImageUUID = value
	}
	if nodes := cc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ItemBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemBatchUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.TemplateTable,
			Columns: []string{certification.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	builders []*CertificationCreate
}

// Save creates the Certification entities in the database.
func (ccb *CertificationCreateBulk) Save(ctx context.Context) ([]*Certification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificationCreateBulk) SaveX(ctx context.Context) []*Certification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
