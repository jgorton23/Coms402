// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certification"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatch"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (cc *CertificationCreate) SetPrimaryAttribute(s string) *CertificationCreate {
	cc.mutation.SetPrimaryAttribute(s)
	return cc
}

// SetCompanyUUID sets the "companyUUID" field.
func (cc *CertificationCreate) SetCompanyUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetCompanyUUID(u)
	return cc
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (cc *CertificationCreate) SetItemBatchUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetItemBatchUUID(u)
	return cc
}

// SetImageUUID sets the "imageUUID" field.
func (cc *CertificationCreate) SetImageUUID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetImageUUID(u)
	return cc
}

// SetID sets the "id" field.
func (cc *CertificationCreate) SetID(u uuid.UUID) *CertificationCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableID(u *uuid.UUID) *CertificationCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (cc *CertificationCreate) SetCompanyID(id uuid.UUID) *CertificationCreate {
	cc.mutation.SetCompanyID(id)
	return cc
}

// SetCompany sets the "company" edge to the Company entity.
func (cc *CertificationCreate) SetCompany(c *Company) *CertificationCreate {
	return cc.SetCompanyID(c.ID)
}

// SetItemBatchID sets the "itemBatch" edge to the ItemBatch entity by ID.
func (cc *CertificationCreate) SetItemBatchID(id uuid.UUID) *CertificationCreate {
	cc.mutation.SetItemBatchID(id)
	return cc
}

// SetItemBatch sets the "itemBatch" edge to the ItemBatch entity.
func (cc *CertificationCreate) SetItemBatch(i *ItemBatch) *CertificationCreate {
	return cc.SetItemBatchID(i.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	cc.defaults()
	return withHooks[*Certification, CertificationMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificationCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := certification.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.PrimaryAttribute(); !ok {
		return &ValidationError{Name: "primaryAttribute", err: errors.New(`ent: missing required field "Certification.primaryAttribute"`)}
	}
	if _, ok := cc.mutation.CompanyUUID(); !ok {
		return &ValidationError{Name: "companyUUID", err: errors.New(`ent: missing required field "Certification.companyUUID"`)}
	}
	if _, ok := cc.mutation.ItemBatchUUID(); !ok {
		return &ValidationError{Name: "itemBatchUUID", err: errors.New(`ent: missing required field "Certification.itemBatchUUID"`)}
	}
	if _, ok := cc.mutation.ImageUUID(); !ok {
		return &ValidationError{Name: "imageUUID", err: errors.New(`ent: missing required field "Certification.imageUUID"`)}
	}
	if _, ok := cc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required edge "Certification.company"`)}
	}
	if _, ok := cc.mutation.ItemBatchID(); !ok {
		return &ValidationError{Name: "itemBatch", err: errors.New(`ent: missing required edge "Certification.itemBatch"`)}
	}
	return nil
}

func (cc *CertificationCreate) sqlSave(ctx context.Context) (*Certification, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificationCreate) createSpec() (*Certification, *sqlgraph.CreateSpec) {
	var (
		_node = &Certification{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certification.Table, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.PrimaryAttribute(); ok {
		_spec.SetField(certification.FieldPrimaryAttribute, field.TypeString, value)
		_node.PrimaryAttribute = value
	}
	if value, ok := cc.mutation.ImageUUID(); ok {
		_spec.SetField(certification.FieldImageUUID, field.TypeUUID, value)
		_node.ImageUUID = value
	}
	if nodes := cc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.CompanyTable,
			Columns: []string{certification.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompanyUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ItemBatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certification.ItemBatchTable,
			Columns: []string{certification.ItemBatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itembatch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ItemBatchUUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certification.Create().
//		SetPrimaryAttribute(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificationUpsert) {
//			SetPrimaryAttribute(v+v).
//		}).
//		Exec(ctx)
func (cc *CertificationCreate) OnConflict(opts ...sql.ConflictOption) *CertificationUpsertOne {
	cc.conflict = opts
	return &CertificationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CertificationCreate) OnConflictColumns(columns ...string) *CertificationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CertificationUpsertOne{
		create: cc,
	}
}

type (
	// CertificationUpsertOne is the builder for "upsert"-ing
	//  one Certification node.
	CertificationUpsertOne struct {
		create *CertificationCreate
	}

	// CertificationUpsert is the "OnConflict" setter.
	CertificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (u *CertificationUpsert) SetPrimaryAttribute(v string) *CertificationUpsert {
	u.Set(certification.FieldPrimaryAttribute, v)
	return u
}

// UpdatePrimaryAttribute sets the "primaryAttribute" field to the value that was provided on create.
func (u *CertificationUpsert) UpdatePrimaryAttribute() *CertificationUpsert {
	u.SetExcluded(certification.FieldPrimaryAttribute)
	return u
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *CertificationUpsert) SetCompanyUUID(v uuid.UUID) *CertificationUpsert {
	u.Set(certification.FieldCompanyUUID, v)
	return u
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateCompanyUUID() *CertificationUpsert {
	u.SetExcluded(certification.FieldCompanyUUID)
	return u
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (u *CertificationUpsert) SetItemBatchUUID(v uuid.UUID) *CertificationUpsert {
	u.Set(certification.FieldItemBatchUUID, v)
	return u
}

// UpdateItemBatchUUID sets the "itemBatchUUID" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateItemBatchUUID() *CertificationUpsert {
	u.SetExcluded(certification.FieldItemBatchUUID)
	return u
}

// SetImageUUID sets the "imageUUID" field.
func (u *CertificationUpsert) SetImageUUID(v uuid.UUID) *CertificationUpsert {
	u.Set(certification.FieldImageUUID, v)
	return u
}

// UpdateImageUUID sets the "imageUUID" field to the value that was provided on create.
func (u *CertificationUpsert) UpdateImageUUID() *CertificationUpsert {
	u.SetExcluded(certification.FieldImageUUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(certification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CertificationUpsertOne) UpdateNewValues() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(certification.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CertificationUpsertOne) Ignore() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificationUpsertOne) DoNothing() *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificationCreate.OnConflict
// documentation for more info.
func (u *CertificationUpsertOne) Update(set func(*CertificationUpsert)) *CertificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (u *CertificationUpsertOne) SetPrimaryAttribute(v string) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPrimaryAttribute(v)
	})
}

// UpdatePrimaryAttribute sets the "primaryAttribute" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdatePrimaryAttribute() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePrimaryAttribute()
	})
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *CertificationUpsertOne) SetCompanyUUID(v uuid.UUID) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetCompanyUUID(v)
	})
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateCompanyUUID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateCompanyUUID()
	})
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (u *CertificationUpsertOne) SetItemBatchUUID(v uuid.UUID) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetItemBatchUUID(v)
	})
}

// UpdateItemBatchUUID sets the "itemBatchUUID" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateItemBatchUUID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateItemBatchUUID()
	})
}

// SetImageUUID sets the "imageUUID" field.
func (u *CertificationUpsertOne) SetImageUUID(v uuid.UUID) *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.SetImageUUID(v)
	})
}

// UpdateImageUUID sets the "imageUUID" field to the value that was provided on create.
func (u *CertificationUpsertOne) UpdateImageUUID() *CertificationUpsertOne {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateImageUUID()
	})
}

// Exec executes the query.
func (u *CertificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CertificationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CertificationUpsertOne.ID is not supported by MySQL driver. Use CertificationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CertificationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	builders []*CertificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Certification entities in the database.
func (ccb *CertificationCreateBulk) Save(ctx context.Context) ([]*Certification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificationCreateBulk) SaveX(ctx context.Context) []*Certification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Certification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CertificationUpsert) {
//			SetPrimaryAttribute(v+v).
//		}).
//		Exec(ctx)
func (ccb *CertificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CertificationUpsertBulk {
	ccb.conflict = opts
	return &CertificationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CertificationCreateBulk) OnConflictColumns(columns ...string) *CertificationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CertificationUpsertBulk{
		create: ccb,
	}
}

// CertificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Certification nodes.
type CertificationUpsertBulk struct {
	create *CertificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(certification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CertificationUpsertBulk) UpdateNewValues() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(certification.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Certification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CertificationUpsertBulk) Ignore() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CertificationUpsertBulk) DoNothing() *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CertificationCreateBulk.OnConflict
// documentation for more info.
func (u *CertificationUpsertBulk) Update(set func(*CertificationUpsert)) *CertificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CertificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrimaryAttribute sets the "primaryAttribute" field.
func (u *CertificationUpsertBulk) SetPrimaryAttribute(v string) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetPrimaryAttribute(v)
	})
}

// UpdatePrimaryAttribute sets the "primaryAttribute" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdatePrimaryAttribute() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdatePrimaryAttribute()
	})
}

// SetCompanyUUID sets the "companyUUID" field.
func (u *CertificationUpsertBulk) SetCompanyUUID(v uuid.UUID) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetCompanyUUID(v)
	})
}

// UpdateCompanyUUID sets the "companyUUID" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateCompanyUUID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateCompanyUUID()
	})
}

// SetItemBatchUUID sets the "itemBatchUUID" field.
func (u *CertificationUpsertBulk) SetItemBatchUUID(v uuid.UUID) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetItemBatchUUID(v)
	})
}

// UpdateItemBatchUUID sets the "itemBatchUUID" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateItemBatchUUID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateItemBatchUUID()
	})
}

// SetImageUUID sets the "imageUUID" field.
func (u *CertificationUpsertBulk) SetImageUUID(v uuid.UUID) *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.SetImageUUID(v)
	})
}

// UpdateImageUUID sets the "imageUUID" field to the value that was provided on create.
func (u *CertificationUpsertBulk) UpdateImageUUID() *CertificationUpsertBulk {
	return u.Update(func(s *CertificationUpsert) {
		s.UpdateImageUUID()
	})
}

// Exec executes the query.
func (u *CertificationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CertificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CertificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CertificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
