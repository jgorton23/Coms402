// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypestotemplates"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplate"
)

// AttributeTypesToTemplates is the model entity for the AttributeTypesToTemplates schema.
type AttributeTypesToTemplates struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AttributeTypeUUID holds the value of the "attributeTypeUUID" field.
	AttributeTypeUUID uuid.UUID `json:"attributeTypeUUID,omitempty"`
	// TemplateUUID holds the value of the "templateUUID" field.
	TemplateUUID uuid.UUID `json:"templateUUID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttributeTypesToTemplatesQuery when eager-loading is set.
	Edges AttributeTypesToTemplatesEdges `json:"edges"`
}

// AttributeTypesToTemplatesEdges holds the relations/edges for other nodes in the graph.
type AttributeTypesToTemplatesEdges struct {
	// Attribute holds the value of the attribute edge.
	Attribute *AttributeType `json:"attribute,omitempty"`
	// Template holds the value of the template edge.
	Template *CertificationTemplate `json:"template,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeTypesToTemplatesEdges) AttributeOrErr() (*AttributeType, error) {
	if e.loadedTypes[0] {
		if e.Attribute == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attributetype.Label}
		}
		return e.Attribute, nil
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttributeTypesToTemplatesEdges) TemplateOrErr() (*CertificationTemplate, error) {
	if e.loadedTypes[1] {
		if e.Template == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: certificationtemplate.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttributeTypesToTemplates) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attributetypestotemplates.FieldID, attributetypestotemplates.FieldAttributeTypeUUID, attributetypestotemplates.FieldTemplateUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AttributeTypesToTemplates", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttributeTypesToTemplates fields.
func (attt *AttributeTypesToTemplates) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attributetypestotemplates.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				attt.ID = *value
			}
		case attributetypestotemplates.FieldAttributeTypeUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field attributeTypeUUID", values[i])
			} else if value != nil {
				attt.AttributeTypeUUID = *value
			}
		case attributetypestotemplates.FieldTemplateUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field templateUUID", values[i])
			} else if value != nil {
				attt.TemplateUUID = *value
			}
		}
	}
	return nil
}

// QueryAttribute queries the "attribute" edge of the AttributeTypesToTemplates entity.
func (attt *AttributeTypesToTemplates) QueryAttribute() *AttributeTypeQuery {
	return NewAttributeTypesToTemplatesClient(attt.config).QueryAttribute(attt)
}

// QueryTemplate queries the "template" edge of the AttributeTypesToTemplates entity.
func (attt *AttributeTypesToTemplates) QueryTemplate() *CertificationTemplateQuery {
	return NewAttributeTypesToTemplatesClient(attt.config).QueryTemplate(attt)
}

// Update returns a builder for updating this AttributeTypesToTemplates.
// Note that you need to call AttributeTypesToTemplates.Unwrap() before calling this method if this AttributeTypesToTemplates
// was returned from a transaction, and the transaction was committed or rolled back.
func (attt *AttributeTypesToTemplates) Update() *AttributeTypesToTemplatesUpdateOne {
	return NewAttributeTypesToTemplatesClient(attt.config).UpdateOne(attt)
}

// Unwrap unwraps the AttributeTypesToTemplates entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (attt *AttributeTypesToTemplates) Unwrap() *AttributeTypesToTemplates {
	_tx, ok := attt.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttributeTypesToTemplates is not a transactional entity")
	}
	attt.config.driver = _tx.drv
	return attt
}

// String implements the fmt.Stringer.
func (attt *AttributeTypesToTemplates) String() string {
	var builder strings.Builder
	builder.WriteString("AttributeTypesToTemplates(")
	builder.WriteString(fmt.Sprintf("id=%v, ", attt.ID))
	builder.WriteString("attributeTypeUUID=")
	builder.WriteString(fmt.Sprintf("%v", attt.AttributeTypeUUID))
	builder.WriteString(", ")
	builder.WriteString("templateUUID=")
	builder.WriteString(fmt.Sprintf("%v", attt.TemplateUUID))
	builder.WriteByte(')')
	return builder.String()
}

// AttributeTypesToTemplatesSlice is a parsable slice of AttributeTypesToTemplates.
type AttributeTypesToTemplatesSlice []*AttributeTypesToTemplates
