// Code generated by ent, DO NOT EDIT.

package userstocompany

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the userstocompany type in the database.
	Label = "users_to_company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UUID"
	// FieldCompanyUUID holds the string denoting the companyuuid field in the database.
	FieldCompanyUUID = "company_uuid"
	// FieldUserUUID holds the string denoting the useruuid field in the database.
	FieldUserUUID = "user_uuid"
	// FieldRoleType holds the string denoting the roletype field in the database.
	FieldRoleType = "role_type"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the userstocompany in the database.
	Table = "users_to_companies"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "users_to_companies"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_uuid"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "users_to_companies"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_uuid"
)

// Columns holds all SQL columns for userstocompany fields.
var Columns = []string{
	FieldID,
	FieldCompanyUUID,
	FieldUserUUID,
	FieldRoleType,
	FieldApproved,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
