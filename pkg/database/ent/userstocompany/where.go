// Code generated by ent, DO NOT EDIT.

package userstocompany

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldLTE(FieldID, id))
}

// CompanyUUID applies equality check predicate on the "companyUUID" field. It's identical to CompanyUUIDEQ.
func CompanyUUID(v uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldCompanyUUID, v))
}

// UserID applies equality check predicate on the "userID" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldUserID, v))
}

// RoleType applies equality check predicate on the "roleType" field. It's identical to RoleTypeEQ.
func RoleType(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldRoleType, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldApproved, v))
}

// CompanyUUIDEQ applies the EQ predicate on the "companyUUID" field.
func CompanyUUIDEQ(v uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldCompanyUUID, v))
}

// CompanyUUIDNEQ applies the NEQ predicate on the "companyUUID" field.
func CompanyUUIDNEQ(v uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNEQ(FieldCompanyUUID, v))
}

// CompanyUUIDIn applies the In predicate on the "companyUUID" field.
func CompanyUUIDIn(vs ...uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldIn(FieldCompanyUUID, vs...))
}

// CompanyUUIDNotIn applies the NotIn predicate on the "companyUUID" field.
func CompanyUUIDNotIn(vs ...uuid.UUID) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNotIn(FieldCompanyUUID, vs...))
}

// UserIDEQ applies the EQ predicate on the "userID" field.
func UserIDEQ(v int) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "userID" field.
func UserIDNEQ(v int) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "userID" field.
func UserIDIn(vs ...int) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "userID" field.
func UserIDNotIn(vs ...int) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNotIn(FieldUserID, vs...))
}

// RoleTypeEQ applies the EQ predicate on the "roleType" field.
func RoleTypeEQ(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldRoleType, v))
}

// RoleTypeNEQ applies the NEQ predicate on the "roleType" field.
func RoleTypeNEQ(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNEQ(FieldRoleType, v))
}

// RoleTypeIn applies the In predicate on the "roleType" field.
func RoleTypeIn(vs ...string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldIn(FieldRoleType, vs...))
}

// RoleTypeNotIn applies the NotIn predicate on the "roleType" field.
func RoleTypeNotIn(vs ...string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNotIn(FieldRoleType, vs...))
}

// RoleTypeGT applies the GT predicate on the "roleType" field.
func RoleTypeGT(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldGT(FieldRoleType, v))
}

// RoleTypeGTE applies the GTE predicate on the "roleType" field.
func RoleTypeGTE(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldGTE(FieldRoleType, v))
}

// RoleTypeLT applies the LT predicate on the "roleType" field.
func RoleTypeLT(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldLT(FieldRoleType, v))
}

// RoleTypeLTE applies the LTE predicate on the "roleType" field.
func RoleTypeLTE(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldLTE(FieldRoleType, v))
}

// RoleTypeContains applies the Contains predicate on the "roleType" field.
func RoleTypeContains(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldContains(FieldRoleType, v))
}

// RoleTypeHasPrefix applies the HasPrefix predicate on the "roleType" field.
func RoleTypeHasPrefix(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldHasPrefix(FieldRoleType, v))
}

// RoleTypeHasSuffix applies the HasSuffix predicate on the "roleType" field.
func RoleTypeHasSuffix(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldHasSuffix(FieldRoleType, v))
}

// RoleTypeEqualFold applies the EqualFold predicate on the "roleType" field.
func RoleTypeEqualFold(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEqualFold(FieldRoleType, v))
}

// RoleTypeContainsFold applies the ContainsFold predicate on the "roleType" field.
func RoleTypeContainsFold(v string) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldContainsFold(FieldRoleType, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.UsersToCompany {
	return predicate.UsersToCompany(sql.FieldNEQ(FieldApproved, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompanyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UsersToCompany) predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UsersToCompany) predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UsersToCompany) predicate.UsersToCompany {
	return predicate.UsersToCompany(func(s *sql.Selector) {
		p(s.Not())
	})
}
