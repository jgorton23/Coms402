// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/userhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// UserHistoryCreate is the builder for creating a UserHistory entity.
type UserHistoryCreate struct {
	config
	mutation *UserHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHistoryTime sets the "history_time" field.
func (uhc *UserHistoryCreate) SetHistoryTime(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetHistoryTime(t)
	return uhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableHistoryTime(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetHistoryTime(*t)
	}
	return uhc
}

// SetRef sets the "ref" field.
func (uhc *UserHistoryCreate) SetRef(u uuid.UUID) *UserHistoryCreate {
	uhc.mutation.SetRef(u)
	return uhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableRef(u *uuid.UUID) *UserHistoryCreate {
	if u != nil {
		uhc.SetRef(*u)
	}
	return uhc
}

// SetOperation sets the "operation" field.
func (uhc *UserHistoryCreate) SetOperation(et enthistory.OpType) *UserHistoryCreate {
	uhc.mutation.SetOperation(et)
	return uhc
}

// SetUpdatedBy sets the "updated_by" field.
func (uhc *UserHistoryCreate) SetUpdatedBy(s string) *UserHistoryCreate {
	uhc.mutation.SetUpdatedBy(s)
	return uhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableUpdatedBy(s *string) *UserHistoryCreate {
	if s != nil {
		uhc.SetUpdatedBy(*s)
	}
	return uhc
}

// SetEmail sets the "email" field.
func (uhc *UserHistoryCreate) SetEmail(s string) *UserHistoryCreate {
	uhc.mutation.SetEmail(s)
	return uhc
}

// SetCreatedAt sets the "created_at" field.
func (uhc *UserHistoryCreate) SetCreatedAt(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetCreatedAt(t)
	return uhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableCreatedAt(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetCreatedAt(*t)
	}
	return uhc
}

// SetUpdatedAt sets the "updated_at" field.
func (uhc *UserHistoryCreate) SetUpdatedAt(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetUpdatedAt(t)
	return uhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableUpdatedAt(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetUpdatedAt(*t)
	}
	return uhc
}

// SetPasswordHash sets the "password_hash" field.
func (uhc *UserHistoryCreate) SetPasswordHash(s string) *UserHistoryCreate {
	uhc.mutation.SetPasswordHash(s)
	return uhc
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillablePasswordHash(s *string) *UserHistoryCreate {
	if s != nil {
		uhc.SetPasswordHash(*s)
	}
	return uhc
}

// SetAttemptCount sets the "attempt_count" field.
func (uhc *UserHistoryCreate) SetAttemptCount(i int) *UserHistoryCreate {
	uhc.mutation.SetAttemptCount(i)
	return uhc
}

// SetNillableAttemptCount sets the "attempt_count" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableAttemptCount(i *int) *UserHistoryCreate {
	if i != nil {
		uhc.SetAttemptCount(*i)
	}
	return uhc
}

// SetLastAttempt sets the "last_attempt" field.
func (uhc *UserHistoryCreate) SetLastAttempt(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetLastAttempt(t)
	return uhc
}

// SetNillableLastAttempt sets the "last_attempt" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableLastAttempt(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetLastAttempt(*t)
	}
	return uhc
}

// SetLocked sets the "locked" field.
func (uhc *UserHistoryCreate) SetLocked(t time.Time) *UserHistoryCreate {
	uhc.mutation.SetLocked(t)
	return uhc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableLocked(t *time.Time) *UserHistoryCreate {
	if t != nil {
		uhc.SetLocked(*t)
	}
	return uhc
}

// SetRole sets the "role" field.
func (uhc *UserHistoryCreate) SetRole(s string) *UserHistoryCreate {
	uhc.mutation.SetRole(s)
	return uhc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableRole(s *string) *UserHistoryCreate {
	if s != nil {
		uhc.SetRole(*s)
	}
	return uhc
}

// SetID sets the "id" field.
func (uhc *UserHistoryCreate) SetID(u uuid.UUID) *UserHistoryCreate {
	uhc.mutation.SetID(u)
	return uhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uhc *UserHistoryCreate) SetNillableID(u *uuid.UUID) *UserHistoryCreate {
	if u != nil {
		uhc.SetID(*u)
	}
	return uhc
}

// Mutation returns the UserHistoryMutation object of the builder.
func (uhc *UserHistoryCreate) Mutation() *UserHistoryMutation {
	return uhc.mutation
}

// Save creates the UserHistory in the database.
func (uhc *UserHistoryCreate) Save(ctx context.Context) (*UserHistory, error) {
	uhc.defaults()
	return withHooks[*UserHistory, UserHistoryMutation](ctx, uhc.sqlSave, uhc.mutation, uhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uhc *UserHistoryCreate) SaveX(ctx context.Context) *UserHistory {
	v, err := uhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhc *UserHistoryCreate) Exec(ctx context.Context) error {
	_, err := uhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhc *UserHistoryCreate) ExecX(ctx context.Context) {
	if err := uhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhc *UserHistoryCreate) defaults() {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		v := userhistory.DefaultHistoryTime()
		uhc.mutation.SetHistoryTime(v)
	}
	if _, ok := uhc.mutation.CreatedAt(); !ok {
		v := userhistory.DefaultCreatedAt()
		uhc.mutation.SetCreatedAt(v)
	}
	if _, ok := uhc.mutation.UpdatedAt(); !ok {
		v := userhistory.DefaultUpdatedAt
		uhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uhc.mutation.Role(); !ok {
		v := userhistory.DefaultRole
		uhc.mutation.SetRole(v)
	}
	if _, ok := uhc.mutation.ID(); !ok {
		v := userhistory.DefaultID()
		uhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhc *UserHistoryCreate) check() error {
	if _, ok := uhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "UserHistory.history_time"`)}
	}
	if _, ok := uhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "UserHistory.operation"`)}
	}
	if v, ok := uhc.mutation.Operation(); ok {
		if err := userhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "UserHistory.operation": %w`, err)}
		}
	}
	if _, ok := uhc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "UserHistory.email"`)}
	}
	if _, ok := uhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserHistory.created_at"`)}
	}
	if _, ok := uhc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserHistory.updated_at"`)}
	}
	if _, ok := uhc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "UserHistory.role"`)}
	}
	return nil
}

func (uhc *UserHistoryCreate) sqlSave(ctx context.Context) (*UserHistory, error) {
	if err := uhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uhc.mutation.id = &_node.ID
	uhc.mutation.done = true
	return _node, nil
}

func (uhc *UserHistoryCreate) createSpec() (*UserHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &UserHistory{config: uhc.config}
		_spec = sqlgraph.NewCreateSpec(userhistory.Table, sqlgraph.NewFieldSpec(userhistory.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = uhc.conflict
	if id, ok := uhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uhc.mutation.HistoryTime(); ok {
		_spec.SetField(userhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := uhc.mutation.Ref(); ok {
		_spec.SetField(userhistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := uhc.mutation.Operation(); ok {
		_spec.SetField(userhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := uhc.mutation.UpdatedBy(); ok {
		_spec.SetField(userhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := uhc.mutation.Email(); ok {
		_spec.SetField(userhistory.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uhc.mutation.CreatedAt(); ok {
		_spec.SetField(userhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uhc.mutation.UpdatedAt(); ok {
		_spec.SetField(userhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uhc.mutation.PasswordHash(); ok {
		_spec.SetField(userhistory.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := uhc.mutation.AttemptCount(); ok {
		_spec.SetField(userhistory.FieldAttemptCount, field.TypeInt, value)
		_node.AttemptCount = value
	}
	if value, ok := uhc.mutation.LastAttempt(); ok {
		_spec.SetField(userhistory.FieldLastAttempt, field.TypeTime, value)
		_node.LastAttempt = value
	}
	if value, ok := uhc.mutation.Locked(); ok {
		_spec.SetField(userhistory.FieldLocked, field.TypeTime, value)
		_node.Locked = value
	}
	if value, ok := uhc.mutation.Role(); ok {
		_spec.SetField(userhistory.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserHistory.Create().
//		SetHistoryTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (uhc *UserHistoryCreate) OnConflict(opts ...sql.ConflictOption) *UserHistoryUpsertOne {
	uhc.conflict = opts
	return &UserHistoryUpsertOne{
		create: uhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uhc *UserHistoryCreate) OnConflictColumns(columns ...string) *UserHistoryUpsertOne {
	uhc.conflict = append(uhc.conflict, sql.ConflictColumns(columns...))
	return &UserHistoryUpsertOne{
		create: uhc,
	}
}

type (
	// UserHistoryUpsertOne is the builder for "upsert"-ing
	//  one UserHistory node.
	UserHistoryUpsertOne struct {
		create *UserHistoryCreate
	}

	// UserHistoryUpsert is the "OnConflict" setter.
	UserHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *UserHistoryUpsert) SetEmail(v string) *UserHistoryUpsert {
	u.Set(userhistory.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateEmail() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldEmail)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserHistoryUpsert) SetUpdatedAt(v time.Time) *UserHistoryUpsert {
	u.Set(userhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateUpdatedAt() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldUpdatedAt)
	return u
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserHistoryUpsert) SetPasswordHash(v string) *UserHistoryUpsert {
	u.Set(userhistory.FieldPasswordHash, v)
	return u
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdatePasswordHash() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldPasswordHash)
	return u
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserHistoryUpsert) ClearPasswordHash() *UserHistoryUpsert {
	u.SetNull(userhistory.FieldPasswordHash)
	return u
}

// SetAttemptCount sets the "attempt_count" field.
func (u *UserHistoryUpsert) SetAttemptCount(v int) *UserHistoryUpsert {
	u.Set(userhistory.FieldAttemptCount, v)
	return u
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateAttemptCount() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldAttemptCount)
	return u
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *UserHistoryUpsert) AddAttemptCount(v int) *UserHistoryUpsert {
	u.Add(userhistory.FieldAttemptCount, v)
	return u
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *UserHistoryUpsert) ClearAttemptCount() *UserHistoryUpsert {
	u.SetNull(userhistory.FieldAttemptCount)
	return u
}

// SetLastAttempt sets the "last_attempt" field.
func (u *UserHistoryUpsert) SetLastAttempt(v time.Time) *UserHistoryUpsert {
	u.Set(userhistory.FieldLastAttempt, v)
	return u
}

// UpdateLastAttempt sets the "last_attempt" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateLastAttempt() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldLastAttempt)
	return u
}

// ClearLastAttempt clears the value of the "last_attempt" field.
func (u *UserHistoryUpsert) ClearLastAttempt() *UserHistoryUpsert {
	u.SetNull(userhistory.FieldLastAttempt)
	return u
}

// SetLocked sets the "locked" field.
func (u *UserHistoryUpsert) SetLocked(v time.Time) *UserHistoryUpsert {
	u.Set(userhistory.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateLocked() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldLocked)
	return u
}

// ClearLocked clears the value of the "locked" field.
func (u *UserHistoryUpsert) ClearLocked() *UserHistoryUpsert {
	u.SetNull(userhistory.FieldLocked)
	return u
}

// SetRole sets the "role" field.
func (u *UserHistoryUpsert) SetRole(v string) *UserHistoryUpsert {
	u.Set(userhistory.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserHistoryUpsert) UpdateRole() *UserHistoryUpsert {
	u.SetExcluded(userhistory.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserHistoryUpsertOne) UpdateNewValues() *UserHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userhistory.FieldID)
		}
		if _, exists := u.create.mutation.HistoryTime(); exists {
			s.SetIgnore(userhistory.FieldHistoryTime)
		}
		if _, exists := u.create.mutation.Ref(); exists {
			s.SetIgnore(userhistory.FieldRef)
		}
		if _, exists := u.create.mutation.Operation(); exists {
			s.SetIgnore(userhistory.FieldOperation)
		}
		if _, exists := u.create.mutation.UpdatedBy(); exists {
			s.SetIgnore(userhistory.FieldUpdatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserHistoryUpsertOne) Ignore() *UserHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserHistoryUpsertOne) DoNothing() *UserHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserHistoryCreate.OnConflict
// documentation for more info.
func (u *UserHistoryUpsertOne) Update(set func(*UserHistoryUpsert)) *UserHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserHistoryUpsertOne) SetEmail(v string) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateEmail() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateEmail()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserHistoryUpsertOne) SetUpdatedAt(v time.Time) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateUpdatedAt() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserHistoryUpsertOne) SetPasswordHash(v string) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdatePasswordHash() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserHistoryUpsertOne) ClearPasswordHash() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearPasswordHash()
	})
}

// SetAttemptCount sets the "attempt_count" field.
func (u *UserHistoryUpsertOne) SetAttemptCount(v int) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetAttemptCount(v)
	})
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *UserHistoryUpsertOne) AddAttemptCount(v int) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.AddAttemptCount(v)
	})
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateAttemptCount() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateAttemptCount()
	})
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *UserHistoryUpsertOne) ClearAttemptCount() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearAttemptCount()
	})
}

// SetLastAttempt sets the "last_attempt" field.
func (u *UserHistoryUpsertOne) SetLastAttempt(v time.Time) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetLastAttempt(v)
	})
}

// UpdateLastAttempt sets the "last_attempt" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateLastAttempt() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateLastAttempt()
	})
}

// ClearLastAttempt clears the value of the "last_attempt" field.
func (u *UserHistoryUpsertOne) ClearLastAttempt() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearLastAttempt()
	})
}

// SetLocked sets the "locked" field.
func (u *UserHistoryUpsertOne) SetLocked(v time.Time) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateLocked() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *UserHistoryUpsertOne) ClearLocked() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearLocked()
	})
}

// SetRole sets the "role" field.
func (u *UserHistoryUpsertOne) SetRole(v string) *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserHistoryUpsertOne) UpdateRole() *UserHistoryUpsertOne {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *UserHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserHistoryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserHistoryUpsertOne.ID is not supported by MySQL driver. Use UserHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserHistoryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserHistoryCreateBulk is the builder for creating many UserHistory entities in bulk.
type UserHistoryCreateBulk struct {
	config
	builders []*UserHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the UserHistory entities in the database.
func (uhcb *UserHistoryCreateBulk) Save(ctx context.Context) ([]*UserHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uhcb.builders))
	nodes := make([]*UserHistory, len(uhcb.builders))
	mutators := make([]Mutator, len(uhcb.builders))
	for i := range uhcb.builders {
		func(i int, root context.Context) {
			builder := uhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uhcb *UserHistoryCreateBulk) SaveX(ctx context.Context) []*UserHistory {
	v, err := uhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhcb *UserHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := uhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhcb *UserHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := uhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (uhcb *UserHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserHistoryUpsertBulk {
	uhcb.conflict = opts
	return &UserHistoryUpsertBulk{
		create: uhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uhcb *UserHistoryCreateBulk) OnConflictColumns(columns ...string) *UserHistoryUpsertBulk {
	uhcb.conflict = append(uhcb.conflict, sql.ConflictColumns(columns...))
	return &UserHistoryUpsertBulk{
		create: uhcb,
	}
}

// UserHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of UserHistory nodes.
type UserHistoryUpsertBulk struct {
	create *UserHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserHistoryUpsertBulk) UpdateNewValues() *UserHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userhistory.FieldID)
			}
			if _, exists := b.mutation.HistoryTime(); exists {
				s.SetIgnore(userhistory.FieldHistoryTime)
			}
			if _, exists := b.mutation.Ref(); exists {
				s.SetIgnore(userhistory.FieldRef)
			}
			if _, exists := b.mutation.Operation(); exists {
				s.SetIgnore(userhistory.FieldOperation)
			}
			if _, exists := b.mutation.UpdatedBy(); exists {
				s.SetIgnore(userhistory.FieldUpdatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserHistoryUpsertBulk) Ignore() *UserHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserHistoryUpsertBulk) DoNothing() *UserHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *UserHistoryUpsertBulk) Update(set func(*UserHistoryUpsert)) *UserHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserHistoryUpsertBulk) SetEmail(v string) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateEmail() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateEmail()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserHistoryUpsertBulk) SetUpdatedAt(v time.Time) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateUpdatedAt() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetPasswordHash sets the "password_hash" field.
func (u *UserHistoryUpsertBulk) SetPasswordHash(v string) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetPasswordHash(v)
	})
}

// UpdatePasswordHash sets the "password_hash" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdatePasswordHash() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdatePasswordHash()
	})
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (u *UserHistoryUpsertBulk) ClearPasswordHash() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearPasswordHash()
	})
}

// SetAttemptCount sets the "attempt_count" field.
func (u *UserHistoryUpsertBulk) SetAttemptCount(v int) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetAttemptCount(v)
	})
}

// AddAttemptCount adds v to the "attempt_count" field.
func (u *UserHistoryUpsertBulk) AddAttemptCount(v int) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.AddAttemptCount(v)
	})
}

// UpdateAttemptCount sets the "attempt_count" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateAttemptCount() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateAttemptCount()
	})
}

// ClearAttemptCount clears the value of the "attempt_count" field.
func (u *UserHistoryUpsertBulk) ClearAttemptCount() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearAttemptCount()
	})
}

// SetLastAttempt sets the "last_attempt" field.
func (u *UserHistoryUpsertBulk) SetLastAttempt(v time.Time) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetLastAttempt(v)
	})
}

// UpdateLastAttempt sets the "last_attempt" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateLastAttempt() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateLastAttempt()
	})
}

// ClearLastAttempt clears the value of the "last_attempt" field.
func (u *UserHistoryUpsertBulk) ClearLastAttempt() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearLastAttempt()
	})
}

// SetLocked sets the "locked" field.
func (u *UserHistoryUpsertBulk) SetLocked(v time.Time) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateLocked() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateLocked()
	})
}

// ClearLocked clears the value of the "locked" field.
func (u *UserHistoryUpsertBulk) ClearLocked() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.ClearLocked()
	})
}

// SetRole sets the "role" field.
func (u *UserHistoryUpsertBulk) SetRole(v string) *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserHistoryUpsertBulk) UpdateRole() *UserHistoryUpsertBulk {
	return u.Update(func(s *UserHistoryUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *UserHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
