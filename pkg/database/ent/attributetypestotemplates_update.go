// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetypestotemplates"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplate"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// AttributeTypesToTemplatesUpdate is the builder for updating AttributeTypesToTemplates entities.
type AttributeTypesToTemplatesUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeTypesToTemplatesMutation
}

// Where appends a list predicates to the AttributeTypesToTemplatesUpdate builder.
func (atttu *AttributeTypesToTemplatesUpdate) Where(ps ...predicate.AttributeTypesToTemplates) *AttributeTypesToTemplatesUpdate {
	atttu.mutation.Where(ps...)
	return atttu
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (atttu *AttributeTypesToTemplatesUpdate) SetAttributeTypeUUID(u uuid.UUID) *AttributeTypesToTemplatesUpdate {
	atttu.mutation.SetAttributeTypeUUID(u)
	return atttu
}

// SetTemplateUUID sets the "templateUUID" field.
func (atttu *AttributeTypesToTemplatesUpdate) SetTemplateUUID(u uuid.UUID) *AttributeTypesToTemplatesUpdate {
	atttu.mutation.SetTemplateUUID(u)
	return atttu
}

// SetAttributeID sets the "attribute" edge to the AttributeType entity by ID.
func (atttu *AttributeTypesToTemplatesUpdate) SetAttributeID(id uuid.UUID) *AttributeTypesToTemplatesUpdate {
	atttu.mutation.SetAttributeID(id)
	return atttu
}

// SetAttribute sets the "attribute" edge to the AttributeType entity.
func (atttu *AttributeTypesToTemplatesUpdate) SetAttribute(a *AttributeType) *AttributeTypesToTemplatesUpdate {
	return atttu.SetAttributeID(a.ID)
}

// SetTemplateID sets the "template" edge to the CertificationTemplate entity by ID.
func (atttu *AttributeTypesToTemplatesUpdate) SetTemplateID(id uuid.UUID) *AttributeTypesToTemplatesUpdate {
	atttu.mutation.SetTemplateID(id)
	return atttu
}

// SetTemplate sets the "template" edge to the CertificationTemplate entity.
func (atttu *AttributeTypesToTemplatesUpdate) SetTemplate(c *CertificationTemplate) *AttributeTypesToTemplatesUpdate {
	return atttu.SetTemplateID(c.ID)
}

// Mutation returns the AttributeTypesToTemplatesMutation object of the builder.
func (atttu *AttributeTypesToTemplatesUpdate) Mutation() *AttributeTypesToTemplatesMutation {
	return atttu.mutation
}

// ClearAttribute clears the "attribute" edge to the AttributeType entity.
func (atttu *AttributeTypesToTemplatesUpdate) ClearAttribute() *AttributeTypesToTemplatesUpdate {
	atttu.mutation.ClearAttribute()
	return atttu
}

// ClearTemplate clears the "template" edge to the CertificationTemplate entity.
func (atttu *AttributeTypesToTemplatesUpdate) ClearTemplate() *AttributeTypesToTemplatesUpdate {
	atttu.mutation.ClearTemplate()
	return atttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atttu *AttributeTypesToTemplatesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AttributeTypesToTemplatesMutation](ctx, atttu.sqlSave, atttu.mutation, atttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atttu *AttributeTypesToTemplatesUpdate) SaveX(ctx context.Context) int {
	affected, err := atttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atttu *AttributeTypesToTemplatesUpdate) Exec(ctx context.Context) error {
	_, err := atttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atttu *AttributeTypesToTemplatesUpdate) ExecX(ctx context.Context) {
	if err := atttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atttu *AttributeTypesToTemplatesUpdate) check() error {
	if _, ok := atttu.mutation.AttributeID(); atttu.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeTypesToTemplates.attribute"`)
	}
	if _, ok := atttu.mutation.TemplateID(); atttu.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeTypesToTemplates.template"`)
	}
	return nil
}

func (atttu *AttributeTypesToTemplatesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributetypestotemplates.Table, attributetypestotemplates.Columns, sqlgraph.NewFieldSpec(attributetypestotemplates.FieldID, field.TypeUUID))
	if ps := atttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atttu.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.AttributeTable,
			Columns: []string{attributetypestotemplates.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attributetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atttu.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.AttributeTable,
			Columns: []string{attributetypestotemplates.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attributetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atttu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.TemplateTable,
			Columns: []string{attributetypestotemplates.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atttu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.TemplateTable,
			Columns: []string{attributetypestotemplates.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributetypestotemplates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atttu.mutation.done = true
	return n, nil
}

// AttributeTypesToTemplatesUpdateOne is the builder for updating a single AttributeTypesToTemplates entity.
type AttributeTypesToTemplatesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeTypesToTemplatesMutation
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetAttributeTypeUUID(u uuid.UUID) *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.SetAttributeTypeUUID(u)
	return atttuo
}

// SetTemplateUUID sets the "templateUUID" field.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetTemplateUUID(u uuid.UUID) *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.SetTemplateUUID(u)
	return atttuo
}

// SetAttributeID sets the "attribute" edge to the AttributeType entity by ID.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetAttributeID(id uuid.UUID) *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.SetAttributeID(id)
	return atttuo
}

// SetAttribute sets the "attribute" edge to the AttributeType entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetAttribute(a *AttributeType) *AttributeTypesToTemplatesUpdateOne {
	return atttuo.SetAttributeID(a.ID)
}

// SetTemplateID sets the "template" edge to the CertificationTemplate entity by ID.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetTemplateID(id uuid.UUID) *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.SetTemplateID(id)
	return atttuo
}

// SetTemplate sets the "template" edge to the CertificationTemplate entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SetTemplate(c *CertificationTemplate) *AttributeTypesToTemplatesUpdateOne {
	return atttuo.SetTemplateID(c.ID)
}

// Mutation returns the AttributeTypesToTemplatesMutation object of the builder.
func (atttuo *AttributeTypesToTemplatesUpdateOne) Mutation() *AttributeTypesToTemplatesMutation {
	return atttuo.mutation
}

// ClearAttribute clears the "attribute" edge to the AttributeType entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) ClearAttribute() *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.ClearAttribute()
	return atttuo
}

// ClearTemplate clears the "template" edge to the CertificationTemplate entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) ClearTemplate() *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.ClearTemplate()
	return atttuo
}

// Where appends a list predicates to the AttributeTypesToTemplatesUpdate builder.
func (atttuo *AttributeTypesToTemplatesUpdateOne) Where(ps ...predicate.AttributeTypesToTemplates) *AttributeTypesToTemplatesUpdateOne {
	atttuo.mutation.Where(ps...)
	return atttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atttuo *AttributeTypesToTemplatesUpdateOne) Select(field string, fields ...string) *AttributeTypesToTemplatesUpdateOne {
	atttuo.fields = append([]string{field}, fields...)
	return atttuo
}

// Save executes the query and returns the updated AttributeTypesToTemplates entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) Save(ctx context.Context) (*AttributeTypesToTemplates, error) {
	return withHooks[*AttributeTypesToTemplates, AttributeTypesToTemplatesMutation](ctx, atttuo.sqlSave, atttuo.mutation, atttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atttuo *AttributeTypesToTemplatesUpdateOne) SaveX(ctx context.Context) *AttributeTypesToTemplates {
	node, err := atttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atttuo *AttributeTypesToTemplatesUpdateOne) Exec(ctx context.Context) error {
	_, err := atttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atttuo *AttributeTypesToTemplatesUpdateOne) ExecX(ctx context.Context) {
	if err := atttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atttuo *AttributeTypesToTemplatesUpdateOne) check() error {
	if _, ok := atttuo.mutation.AttributeID(); atttuo.mutation.AttributeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeTypesToTemplates.attribute"`)
	}
	if _, ok := atttuo.mutation.TemplateID(); atttuo.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeTypesToTemplates.template"`)
	}
	return nil
}

func (atttuo *AttributeTypesToTemplatesUpdateOne) sqlSave(ctx context.Context) (_node *AttributeTypesToTemplates, err error) {
	if err := atttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributetypestotemplates.Table, attributetypestotemplates.Columns, sqlgraph.NewFieldSpec(attributetypestotemplates.FieldID, field.TypeUUID))
	id, ok := atttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeTypesToTemplates.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributetypestotemplates.FieldID)
		for _, f := range fields {
			if !attributetypestotemplates.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributetypestotemplates.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atttuo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.AttributeTable,
			Columns: []string{attributetypestotemplates.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attributetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atttuo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.AttributeTable,
			Columns: []string{attributetypestotemplates.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attributetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atttuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.TemplateTable,
			Columns: []string{attributetypestotemplates.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atttuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetypestotemplates.TemplateTable,
			Columns: []string{attributetypestotemplates.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: certificationtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeTypesToTemplates{config: atttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributetypestotemplates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atttuo.mutation.done = true
	return _node, nil
}
