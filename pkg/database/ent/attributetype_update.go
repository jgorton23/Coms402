// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributetype"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/company"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// AttributeTypeUpdate is the builder for updating AttributeType entities.
type AttributeTypeUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeTypeMutation
}

// Where appends a list predicates to the AttributeTypeUpdate builder.
func (atu *AttributeTypeUpdate) Where(ps ...predicate.AttributeType) *AttributeTypeUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetKey sets the "key" field.
func (atu *AttributeTypeUpdate) SetKey(s string) *AttributeTypeUpdate {
	atu.mutation.SetKey(s)
	return atu
}

// SetCompanyUUID sets the "companyUUID" field.
func (atu *AttributeTypeUpdate) SetCompanyUUID(u uuid.UUID) *AttributeTypeUpdate {
	atu.mutation.SetCompanyUUID(u)
	return atu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (atu *AttributeTypeUpdate) SetCompanyID(id uuid.UUID) *AttributeTypeUpdate {
	atu.mutation.SetCompanyID(id)
	return atu
}

// SetCompany sets the "company" edge to the Company entity.
func (atu *AttributeTypeUpdate) SetCompany(c *Company) *AttributeTypeUpdate {
	return atu.SetCompanyID(c.ID)
}

// Mutation returns the AttributeTypeMutation object of the builder.
func (atu *AttributeTypeUpdate) Mutation() *AttributeTypeMutation {
	return atu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (atu *AttributeTypeUpdate) ClearCompany() *AttributeTypeUpdate {
	atu.mutation.ClearCompany()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AttributeTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AttributeTypeMutation](ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AttributeTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AttributeTypeUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AttributeTypeUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AttributeTypeUpdate) check() error {
	if _, ok := atu.mutation.CompanyID(); atu.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeType.company"`)
	}
	return nil
}

func (atu *AttributeTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributetype.Table, attributetype.Columns, sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Key(); ok {
		_spec.SetField(attributetype.FieldKey, field.TypeString, value)
	}
	if atu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetype.CompanyTable,
			Columns: []string{attributetype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetype.CompanyTable,
			Columns: []string{attributetype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AttributeTypeUpdateOne is the builder for updating a single AttributeType entity.
type AttributeTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeTypeMutation
}

// SetKey sets the "key" field.
func (atuo *AttributeTypeUpdateOne) SetKey(s string) *AttributeTypeUpdateOne {
	atuo.mutation.SetKey(s)
	return atuo
}

// SetCompanyUUID sets the "companyUUID" field.
func (atuo *AttributeTypeUpdateOne) SetCompanyUUID(u uuid.UUID) *AttributeTypeUpdateOne {
	atuo.mutation.SetCompanyUUID(u)
	return atuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (atuo *AttributeTypeUpdateOne) SetCompanyID(id uuid.UUID) *AttributeTypeUpdateOne {
	atuo.mutation.SetCompanyID(id)
	return atuo
}

// SetCompany sets the "company" edge to the Company entity.
func (atuo *AttributeTypeUpdateOne) SetCompany(c *Company) *AttributeTypeUpdateOne {
	return atuo.SetCompanyID(c.ID)
}

// Mutation returns the AttributeTypeMutation object of the builder.
func (atuo *AttributeTypeUpdateOne) Mutation() *AttributeTypeMutation {
	return atuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (atuo *AttributeTypeUpdateOne) ClearCompany() *AttributeTypeUpdateOne {
	atuo.mutation.ClearCompany()
	return atuo
}

// Where appends a list predicates to the AttributeTypeUpdate builder.
func (atuo *AttributeTypeUpdateOne) Where(ps ...predicate.AttributeType) *AttributeTypeUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AttributeTypeUpdateOne) Select(field string, fields ...string) *AttributeTypeUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AttributeType entity.
func (atuo *AttributeTypeUpdateOne) Save(ctx context.Context) (*AttributeType, error) {
	return withHooks[*AttributeType, AttributeTypeMutation](ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AttributeTypeUpdateOne) SaveX(ctx context.Context) *AttributeType {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AttributeTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AttributeTypeUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AttributeTypeUpdateOne) check() error {
	if _, ok := atuo.mutation.CompanyID(); atuo.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttributeType.company"`)
	}
	return nil
}

func (atuo *AttributeTypeUpdateOne) sqlSave(ctx context.Context) (_node *AttributeType, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attributetype.Table, attributetype.Columns, sqlgraph.NewFieldSpec(attributetype.FieldID, field.TypeUUID))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributetype.FieldID)
		for _, f := range fields {
			if !attributetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Key(); ok {
		_spec.SetField(attributetype.FieldKey, field.TypeString, value)
	}
	if atuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetype.CompanyTable,
			Columns: []string{attributetype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   attributetype.CompanyTable,
			Columns: []string{attributetype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttributeType{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
