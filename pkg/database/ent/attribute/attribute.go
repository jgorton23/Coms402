// Code generated by ent, DO NOT EDIT.

package attribute

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the attribute type in the database.
	Label = "attribute"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UUID"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldCertUUID holds the string denoting the certuuid field in the database.
	FieldCertUUID = "cert_uuid"
	// FieldAttributeTypeUUID holds the string denoting the attributetypeuuid field in the database.
	FieldAttributeTypeUUID = "attribute_type_uuid"
	// EdgeCertification holds the string denoting the certification edge name in mutations.
	EdgeCertification = "certification"
	// EdgeAttributeType holds the string denoting the attributetype edge name in mutations.
	EdgeAttributeType = "attributeType"
	// Table holds the table name of the attribute in the database.
	Table = "attributes"
	// CertificationTable is the table that holds the certification relation/edge.
	CertificationTable = "attributes"
	// CertificationInverseTable is the table name for the Certification entity.
	// It exists in this package in order to avoid circular dependency with the "certification" package.
	CertificationInverseTable = "certifications"
	// CertificationColumn is the table column denoting the certification relation/edge.
	CertificationColumn = "cert_uuid"
	// AttributeTypeTable is the table that holds the attributeType relation/edge.
	AttributeTypeTable = "attributes"
	// AttributeTypeInverseTable is the table name for the AttributeType entity.
	// It exists in this package in order to avoid circular dependency with the "attributetype" package.
	AttributeTypeInverseTable = "attribute_types"
	// AttributeTypeColumn is the table column denoting the attributeType relation/edge.
	AttributeTypeColumn = "attribute_type_uuid"
)

// Columns holds all SQL columns for attribute fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
	FieldCertUUID,
	FieldAttributeTypeUUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
