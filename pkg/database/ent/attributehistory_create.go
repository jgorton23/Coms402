// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/attributehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// AttributeHistoryCreate is the builder for creating a AttributeHistory entity.
type AttributeHistoryCreate struct {
	config
	mutation *AttributeHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHistoryTime sets the "history_time" field.
func (ahc *AttributeHistoryCreate) SetHistoryTime(t time.Time) *AttributeHistoryCreate {
	ahc.mutation.SetHistoryTime(t)
	return ahc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (ahc *AttributeHistoryCreate) SetNillableHistoryTime(t *time.Time) *AttributeHistoryCreate {
	if t != nil {
		ahc.SetHistoryTime(*t)
	}
	return ahc
}

// SetRef sets the "ref" field.
func (ahc *AttributeHistoryCreate) SetRef(u uuid.UUID) *AttributeHistoryCreate {
	ahc.mutation.SetRef(u)
	return ahc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (ahc *AttributeHistoryCreate) SetNillableRef(u *uuid.UUID) *AttributeHistoryCreate {
	if u != nil {
		ahc.SetRef(*u)
	}
	return ahc
}

// SetOperation sets the "operation" field.
func (ahc *AttributeHistoryCreate) SetOperation(et enthistory.OpType) *AttributeHistoryCreate {
	ahc.mutation.SetOperation(et)
	return ahc
}

// SetUpdatedBy sets the "updated_by" field.
func (ahc *AttributeHistoryCreate) SetUpdatedBy(s string) *AttributeHistoryCreate {
	ahc.mutation.SetUpdatedBy(s)
	return ahc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahc *AttributeHistoryCreate) SetNillableUpdatedBy(s *string) *AttributeHistoryCreate {
	if s != nil {
		ahc.SetUpdatedBy(*s)
	}
	return ahc
}

// SetKey sets the "key" field.
func (ahc *AttributeHistoryCreate) SetKey(s string) *AttributeHistoryCreate {
	ahc.mutation.SetKey(s)
	return ahc
}

// SetValue sets the "value" field.
func (ahc *AttributeHistoryCreate) SetValue(s string) *AttributeHistoryCreate {
	ahc.mutation.SetValue(s)
	return ahc
}

// SetCertUUID sets the "certUUID" field.
func (ahc *AttributeHistoryCreate) SetCertUUID(u uuid.UUID) *AttributeHistoryCreate {
	ahc.mutation.SetCertUUID(u)
	return ahc
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (ahc *AttributeHistoryCreate) SetAttributeTypeUUID(u uuid.UUID) *AttributeHistoryCreate {
	ahc.mutation.SetAttributeTypeUUID(u)
	return ahc
}

// SetID sets the "id" field.
func (ahc *AttributeHistoryCreate) SetID(u uuid.UUID) *AttributeHistoryCreate {
	ahc.mutation.SetID(u)
	return ahc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ahc *AttributeHistoryCreate) SetNillableID(u *uuid.UUID) *AttributeHistoryCreate {
	if u != nil {
		ahc.SetID(*u)
	}
	return ahc
}

// Mutation returns the AttributeHistoryMutation object of the builder.
func (ahc *AttributeHistoryCreate) Mutation() *AttributeHistoryMutation {
	return ahc.mutation
}

// Save creates the AttributeHistory in the database.
func (ahc *AttributeHistoryCreate) Save(ctx context.Context) (*AttributeHistory, error) {
	ahc.defaults()
	return withHooks[*AttributeHistory, AttributeHistoryMutation](ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *AttributeHistoryCreate) SaveX(ctx context.Context) *AttributeHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *AttributeHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *AttributeHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahc *AttributeHistoryCreate) defaults() {
	if _, ok := ahc.mutation.HistoryTime(); !ok {
		v := attributehistory.DefaultHistoryTime()
		ahc.mutation.SetHistoryTime(v)
	}
	if _, ok := ahc.mutation.ID(); !ok {
		v := attributehistory.DefaultID()
		ahc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahc *AttributeHistoryCreate) check() error {
	if _, ok := ahc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "AttributeHistory.history_time"`)}
	}
	if _, ok := ahc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "AttributeHistory.operation"`)}
	}
	if v, ok := ahc.mutation.Operation(); ok {
		if err := attributehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "AttributeHistory.operation": %w`, err)}
		}
	}
	if _, ok := ahc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "AttributeHistory.key"`)}
	}
	if _, ok := ahc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AttributeHistory.value"`)}
	}
	if _, ok := ahc.mutation.CertUUID(); !ok {
		return &ValidationError{Name: "certUUID", err: errors.New(`ent: missing required field "AttributeHistory.certUUID"`)}
	}
	if _, ok := ahc.mutation.AttributeTypeUUID(); !ok {
		return &ValidationError{Name: "attributeTypeUUID", err: errors.New(`ent: missing required field "AttributeHistory.attributeTypeUUID"`)}
	}
	return nil
}

func (ahc *AttributeHistoryCreate) sqlSave(ctx context.Context) (*AttributeHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *AttributeHistoryCreate) createSpec() (*AttributeHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(attributehistory.Table, sqlgraph.NewFieldSpec(attributehistory.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ahc.conflict
	if id, ok := ahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ahc.mutation.HistoryTime(); ok {
		_spec.SetField(attributehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := ahc.mutation.Ref(); ok {
		_spec.SetField(attributehistory.FieldRef, field.TypeUUID, value)
		_node.Ref = value
	}
	if value, ok := ahc.mutation.Operation(); ok {
		_spec.SetField(attributehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := ahc.mutation.UpdatedBy(); ok {
		_spec.SetField(attributehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := ahc.mutation.Key(); ok {
		_spec.SetField(attributehistory.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ahc.mutation.Value(); ok {
		_spec.SetField(attributehistory.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := ahc.mutation.CertUUID(); ok {
		_spec.SetField(attributehistory.FieldCertUUID, field.TypeUUID, value)
		_node.CertUUID = value
	}
	if value, ok := ahc.mutation.AttributeTypeUUID(); ok {
		_spec.SetField(attributehistory.FieldAttributeTypeUUID, field.TypeUUID, value)
		_node.AttributeTypeUUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeHistory.Create().
//		SetHistoryTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (ahc *AttributeHistoryCreate) OnConflict(opts ...sql.ConflictOption) *AttributeHistoryUpsertOne {
	ahc.conflict = opts
	return &AttributeHistoryUpsertOne{
		create: ahc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahc *AttributeHistoryCreate) OnConflictColumns(columns ...string) *AttributeHistoryUpsertOne {
	ahc.conflict = append(ahc.conflict, sql.ConflictColumns(columns...))
	return &AttributeHistoryUpsertOne{
		create: ahc,
	}
}

type (
	// AttributeHistoryUpsertOne is the builder for "upsert"-ing
	//  one AttributeHistory node.
	AttributeHistoryUpsertOne struct {
		create *AttributeHistoryCreate
	}

	// AttributeHistoryUpsert is the "OnConflict" setter.
	AttributeHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *AttributeHistoryUpsert) SetKey(v string) *AttributeHistoryUpsert {
	u.Set(attributehistory.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeHistoryUpsert) UpdateKey() *AttributeHistoryUpsert {
	u.SetExcluded(attributehistory.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *AttributeHistoryUpsert) SetValue(v string) *AttributeHistoryUpsert {
	u.Set(attributehistory.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeHistoryUpsert) UpdateValue() *AttributeHistoryUpsert {
	u.SetExcluded(attributehistory.FieldValue)
	return u
}

// SetCertUUID sets the "certUUID" field.
func (u *AttributeHistoryUpsert) SetCertUUID(v uuid.UUID) *AttributeHistoryUpsert {
	u.Set(attributehistory.FieldCertUUID, v)
	return u
}

// UpdateCertUUID sets the "certUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsert) UpdateCertUUID() *AttributeHistoryUpsert {
	u.SetExcluded(attributehistory.FieldCertUUID)
	return u
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (u *AttributeHistoryUpsert) SetAttributeTypeUUID(v uuid.UUID) *AttributeHistoryUpsert {
	u.Set(attributehistory.FieldAttributeTypeUUID, v)
	return u
}

// UpdateAttributeTypeUUID sets the "attributeTypeUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsert) UpdateAttributeTypeUUID() *AttributeHistoryUpsert {
	u.SetExcluded(attributehistory.FieldAttributeTypeUUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attributehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeHistoryUpsertOne) UpdateNewValues() *AttributeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(attributehistory.FieldID)
		}
		if _, exists := u.create.mutation.HistoryTime(); exists {
			s.SetIgnore(attributehistory.FieldHistoryTime)
		}
		if _, exists := u.create.mutation.Ref(); exists {
			s.SetIgnore(attributehistory.FieldRef)
		}
		if _, exists := u.create.mutation.Operation(); exists {
			s.SetIgnore(attributehistory.FieldOperation)
		}
		if _, exists := u.create.mutation.UpdatedBy(); exists {
			s.SetIgnore(attributehistory.FieldUpdatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttributeHistoryUpsertOne) Ignore() *AttributeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeHistoryUpsertOne) DoNothing() *AttributeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeHistoryCreate.OnConflict
// documentation for more info.
func (u *AttributeHistoryUpsertOne) Update(set func(*AttributeHistoryUpsert)) *AttributeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *AttributeHistoryUpsertOne) SetKey(v string) *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeHistoryUpsertOne) UpdateKey() *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *AttributeHistoryUpsertOne) SetValue(v string) *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeHistoryUpsertOne) UpdateValue() *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateValue()
	})
}

// SetCertUUID sets the "certUUID" field.
func (u *AttributeHistoryUpsertOne) SetCertUUID(v uuid.UUID) *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetCertUUID(v)
	})
}

// UpdateCertUUID sets the "certUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsertOne) UpdateCertUUID() *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateCertUUID()
	})
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (u *AttributeHistoryUpsertOne) SetAttributeTypeUUID(v uuid.UUID) *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetAttributeTypeUUID(v)
	})
}

// UpdateAttributeTypeUUID sets the "attributeTypeUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsertOne) UpdateAttributeTypeUUID() *AttributeHistoryUpsertOne {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateAttributeTypeUUID()
	})
}

// Exec executes the query.
func (u *AttributeHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttributeHistoryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AttributeHistoryUpsertOne.ID is not supported by MySQL driver. Use AttributeHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttributeHistoryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttributeHistoryCreateBulk is the builder for creating many AttributeHistory entities in bulk.
type AttributeHistoryCreateBulk struct {
	config
	builders []*AttributeHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AttributeHistory entities in the database.
func (ahcb *AttributeHistoryCreateBulk) Save(ctx context.Context) ([]*AttributeHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*AttributeHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ahcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *AttributeHistoryCreateBulk) SaveX(ctx context.Context) []*AttributeHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *AttributeHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *AttributeHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeHistoryUpsert) {
//			SetHistoryTime(v+v).
//		}).
//		Exec(ctx)
func (ahcb *AttributeHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttributeHistoryUpsertBulk {
	ahcb.conflict = opts
	return &AttributeHistoryUpsertBulk{
		create: ahcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahcb *AttributeHistoryCreateBulk) OnConflictColumns(columns ...string) *AttributeHistoryUpsertBulk {
	ahcb.conflict = append(ahcb.conflict, sql.ConflictColumns(columns...))
	return &AttributeHistoryUpsertBulk{
		create: ahcb,
	}
}

// AttributeHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AttributeHistory nodes.
type AttributeHistoryUpsertBulk struct {
	create *AttributeHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(attributehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AttributeHistoryUpsertBulk) UpdateNewValues() *AttributeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(attributehistory.FieldID)
			}
			if _, exists := b.mutation.HistoryTime(); exists {
				s.SetIgnore(attributehistory.FieldHistoryTime)
			}
			if _, exists := b.mutation.Ref(); exists {
				s.SetIgnore(attributehistory.FieldRef)
			}
			if _, exists := b.mutation.Operation(); exists {
				s.SetIgnore(attributehistory.FieldOperation)
			}
			if _, exists := b.mutation.UpdatedBy(); exists {
				s.SetIgnore(attributehistory.FieldUpdatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttributeHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttributeHistoryUpsertBulk) Ignore() *AttributeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeHistoryUpsertBulk) DoNothing() *AttributeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *AttributeHistoryUpsertBulk) Update(set func(*AttributeHistoryUpsert)) *AttributeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *AttributeHistoryUpsertBulk) SetKey(v string) *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AttributeHistoryUpsertBulk) UpdateKey() *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *AttributeHistoryUpsertBulk) SetValue(v string) *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AttributeHistoryUpsertBulk) UpdateValue() *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateValue()
	})
}

// SetCertUUID sets the "certUUID" field.
func (u *AttributeHistoryUpsertBulk) SetCertUUID(v uuid.UUID) *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetCertUUID(v)
	})
}

// UpdateCertUUID sets the "certUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsertBulk) UpdateCertUUID() *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateCertUUID()
	})
}

// SetAttributeTypeUUID sets the "attributeTypeUUID" field.
func (u *AttributeHistoryUpsertBulk) SetAttributeTypeUUID(v uuid.UUID) *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.SetAttributeTypeUUID(v)
	})
}

// UpdateAttributeTypeUUID sets the "attributeTypeUUID" field to the value that was provided on create.
func (u *AttributeHistoryUpsertBulk) UpdateAttributeTypeUUID() *AttributeHistoryUpsertBulk {
	return u.Update(func(s *AttributeHistoryUpsert) {
		s.UpdateAttributeTypeUUID()
	})
}

// Exec executes the query.
func (u *AttributeHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttributeHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
