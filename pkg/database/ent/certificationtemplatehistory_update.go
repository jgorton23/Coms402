// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/certificationtemplatehistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/predicate"
)

// CertificationTemplateHistoryUpdate is the builder for updating CertificationTemplateHistory entities.
type CertificationTemplateHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *CertificationTemplateHistoryMutation
}

// Where appends a list predicates to the CertificationTemplateHistoryUpdate builder.
func (cthu *CertificationTemplateHistoryUpdate) Where(ps ...predicate.CertificationTemplateHistory) *CertificationTemplateHistoryUpdate {
	cthu.mutation.Where(ps...)
	return cthu
}

// SetDescription sets the "description" field.
func (cthu *CertificationTemplateHistoryUpdate) SetDescription(s string) *CertificationTemplateHistoryUpdate {
	cthu.mutation.SetDescription(s)
	return cthu
}

// SetCompanyUUID sets the "companyUUID" field.
func (cthu *CertificationTemplateHistoryUpdate) SetCompanyUUID(u uuid.UUID) *CertificationTemplateHistoryUpdate {
	cthu.mutation.SetCompanyUUID(u)
	return cthu
}

// Mutation returns the CertificationTemplateHistoryMutation object of the builder.
func (cthu *CertificationTemplateHistoryUpdate) Mutation() *CertificationTemplateHistoryMutation {
	return cthu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cthu *CertificationTemplateHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CertificationTemplateHistoryMutation](ctx, cthu.sqlSave, cthu.mutation, cthu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cthu *CertificationTemplateHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cthu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cthu *CertificationTemplateHistoryUpdate) Exec(ctx context.Context) error {
	_, err := cthu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cthu *CertificationTemplateHistoryUpdate) ExecX(ctx context.Context) {
	if err := cthu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cthu *CertificationTemplateHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificationtemplatehistory.Table, certificationtemplatehistory.Columns, sqlgraph.NewFieldSpec(certificationtemplatehistory.FieldID, field.TypeUUID))
	if ps := cthu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cthu.mutation.RefCleared() {
		_spec.ClearField(certificationtemplatehistory.FieldRef, field.TypeUUID)
	}
	if cthu.mutation.UpdatedByCleared() {
		_spec.ClearField(certificationtemplatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cthu.mutation.Description(); ok {
		_spec.SetField(certificationtemplatehistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := cthu.mutation.CompanyUUID(); ok {
		_spec.SetField(certificationtemplatehistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cthu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificationtemplatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cthu.mutation.done = true
	return n, nil
}

// CertificationTemplateHistoryUpdateOne is the builder for updating a single CertificationTemplateHistory entity.
type CertificationTemplateHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificationTemplateHistoryMutation
}

// SetDescription sets the "description" field.
func (cthuo *CertificationTemplateHistoryUpdateOne) SetDescription(s string) *CertificationTemplateHistoryUpdateOne {
	cthuo.mutation.SetDescription(s)
	return cthuo
}

// SetCompanyUUID sets the "companyUUID" field.
func (cthuo *CertificationTemplateHistoryUpdateOne) SetCompanyUUID(u uuid.UUID) *CertificationTemplateHistoryUpdateOne {
	cthuo.mutation.SetCompanyUUID(u)
	return cthuo
}

// Mutation returns the CertificationTemplateHistoryMutation object of the builder.
func (cthuo *CertificationTemplateHistoryUpdateOne) Mutation() *CertificationTemplateHistoryMutation {
	return cthuo.mutation
}

// Where appends a list predicates to the CertificationTemplateHistoryUpdate builder.
func (cthuo *CertificationTemplateHistoryUpdateOne) Where(ps ...predicate.CertificationTemplateHistory) *CertificationTemplateHistoryUpdateOne {
	cthuo.mutation.Where(ps...)
	return cthuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cthuo *CertificationTemplateHistoryUpdateOne) Select(field string, fields ...string) *CertificationTemplateHistoryUpdateOne {
	cthuo.fields = append([]string{field}, fields...)
	return cthuo
}

// Save executes the query and returns the updated CertificationTemplateHistory entity.
func (cthuo *CertificationTemplateHistoryUpdateOne) Save(ctx context.Context) (*CertificationTemplateHistory, error) {
	return withHooks[*CertificationTemplateHistory, CertificationTemplateHistoryMutation](ctx, cthuo.sqlSave, cthuo.mutation, cthuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cthuo *CertificationTemplateHistoryUpdateOne) SaveX(ctx context.Context) *CertificationTemplateHistory {
	node, err := cthuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cthuo *CertificationTemplateHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cthuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cthuo *CertificationTemplateHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := cthuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cthuo *CertificationTemplateHistoryUpdateOne) sqlSave(ctx context.Context) (_node *CertificationTemplateHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(certificationtemplatehistory.Table, certificationtemplatehistory.Columns, sqlgraph.NewFieldSpec(certificationtemplatehistory.FieldID, field.TypeUUID))
	id, ok := cthuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertificationTemplateHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cthuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificationtemplatehistory.FieldID)
		for _, f := range fields {
			if !certificationtemplatehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certificationtemplatehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cthuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cthuo.mutation.RefCleared() {
		_spec.ClearField(certificationtemplatehistory.FieldRef, field.TypeUUID)
	}
	if cthuo.mutation.UpdatedByCleared() {
		_spec.ClearField(certificationtemplatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cthuo.mutation.Description(); ok {
		_spec.SetField(certificationtemplatehistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := cthuo.mutation.CompanyUUID(); ok {
		_spec.SetField(certificationtemplatehistory.FieldCompanyUUID, field.TypeUUID, value)
	}
	_node = &CertificationTemplateHistory{config: cthuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cthuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificationtemplatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cthuo.mutation.done = true
	return _node, nil
}
