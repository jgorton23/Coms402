// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/ent/itembatchhistory"
	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"
)

// ItemBatchHistory is the model entity for the ItemBatchHistory schema.
type ItemBatchHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref uuid.UUID `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// ItemNumber holds the value of the "itemNumber" field.
	ItemNumber string `json:"itemNumber,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CompanyUUID holds the value of the "companyUUID" field.
	CompanyUUID uuid.UUID `json:"companyUUID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemBatchHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case itembatchhistory.FieldOperation, itembatchhistory.FieldUpdatedBy, itembatchhistory.FieldItemNumber, itembatchhistory.FieldDescription:
			values[i] = new(sql.NullString)
		case itembatchhistory.FieldHistoryTime:
			values[i] = new(sql.NullTime)
		case itembatchhistory.FieldID, itembatchhistory.FieldRef, itembatchhistory.FieldCompanyUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ItemBatchHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemBatchHistory fields.
func (ibh *ItemBatchHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itembatchhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ibh.ID = *value
			}
		case itembatchhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				ibh.HistoryTime = value.Time
			}
		case itembatchhistory.FieldRef:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value != nil {
				ibh.Ref = *value
			}
		case itembatchhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				ibh.Operation = enthistory.OpType(value.String)
			}
		case itembatchhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ibh.UpdatedBy = new(string)
				*ibh.UpdatedBy = value.String
			}
		case itembatchhistory.FieldItemNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field itemNumber", values[i])
			} else if value.Valid {
				ibh.ItemNumber = value.String
			}
		case itembatchhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ibh.Description = value.String
			}
		case itembatchhistory.FieldCompanyUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field companyUUID", values[i])
			} else if value != nil {
				ibh.CompanyUUID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ItemBatchHistory.
// Note that you need to call ItemBatchHistory.Unwrap() before calling this method if this ItemBatchHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ibh *ItemBatchHistory) Update() *ItemBatchHistoryUpdateOne {
	return NewItemBatchHistoryClient(ibh.config).UpdateOne(ibh)
}

// Unwrap unwraps the ItemBatchHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ibh *ItemBatchHistory) Unwrap() *ItemBatchHistory {
	_tx, ok := ibh.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemBatchHistory is not a transactional entity")
	}
	ibh.config.driver = _tx.drv
	return ibh
}

// String implements the fmt.Stringer.
func (ibh *ItemBatchHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ItemBatchHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ibh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(ibh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(fmt.Sprintf("%v", ibh.Ref))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", ibh.Operation))
	builder.WriteString(", ")
	if v := ibh.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("itemNumber=")
	builder.WriteString(ibh.ItemNumber)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ibh.Description)
	builder.WriteString(", ")
	builder.WriteString("companyUUID=")
	builder.WriteString(fmt.Sprintf("%v", ibh.CompanyUUID))
	builder.WriteByte(')')
	return builder.String()
}

// ItemBatchHistories is a parsable slice of ItemBatchHistory.
type ItemBatchHistories []*ItemBatchHistory
