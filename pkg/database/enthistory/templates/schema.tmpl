// Code generated by enthistory, DO NOT EDIT.
package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"

	"git.las.iastate.edu/SeniorDesignComS/2023spr/online-certificate-repo/backend/pkg/database/enthistory"

	"time"
)
{{- $schema := .Schema }}
{{- $name := $schema.Name }}
{{- $fields := $schema.Fields }}

// {{ $name }} holds the schema definition for the {{ $name }} entity.
type {{ $name }} struct {
	ent.Schema
}

// Annotations of the {{ $name }}.
func ({{ $name }}) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{
			Table: "{{ .TableName }}",
		},
        enthistory.Annotations{
            IsHistory: true,
            Exclude: true,
        },
	}
}

// Fields of the {{ $name }}.
func ({{ $name }}) Fields() []ent.Field {
	historyFields := []ent.Field{
        field.Time("history_time").
            Default(time.Now).
            Immutable(),
        field.UUID("ref", uuid.UUID{}).
            Immutable().
            Optional(),
        field.Enum("operation").
            GoType(enthistory.OpType("")).
            Immutable(),
        {{- if $.WithUpdatedBy }}
        field.{{ $.UpdatedByValueType }}("updated_by").
            Optional().
            Immutable().
            Nillable(),
        {{- end }}
    }

    return append(historyFields, {{ .OriginalTableName }}{}.Fields()...)
}

// Mixin of the {{ $name }}.
func ({{ $name }}) Mixin() []ent.Mixin {
	return {{ .OriginalTableName }}{}.Mixin()
}
